<?php

/**
 * @file
 * Provides options for users to override visibility of their profile fields.
 */

/**
* Implements hook_menu().
*/
function profile2_field_privacy_menu() {
    // Config
    $items['admin/config/people/profile2-field-privacy'] = array(
        'title' => 'Profile 2 Field Privacy',
        'description' => 'Select profile types where field privacy should be enabled.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('profile2_field_privacy_settings'),
        'access arguments' => array('administer private fields'),
        'file' => 'profile2_field_privacy.admin.inc',
    );
    
    return $items;
}

/**
 * Implements hook_permission().
 */
function profile2_field_privacy_permission() {
    return array(
        'view private fields' => array(
            'title' => t('View private fields'), 
            'description' => t('Allow user to see fields set as private.'),
        ),
        'edit private fields' => array(
            'title' => t('Override private fields'), 
            'description' => t('Allow administrative users to override privacy set on fields.'),
        ),
        'administer private fields' => array(
            'title' => t('Administer private fields'), 
            'description' => t('Administer private field settings.'),
        ),
    );
}

/**
 * Implements hook_field_info_alter().
 */
function profile2_field_privacy_field_info_alter(&$info) {
    // Add the 'profile2_field_privacy' instance setting to all field types.
    foreach ($info as $field_type => &$field_type_info) {
        $field_type_info += array('instance_settings' => array());
        $field_type_info['instance_settings'] += array(
            'profile2_field_privacy' => FALSE,
        );
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a checkbox profile2 field instance settings on the 'Edit
 * field instance' form.
 *
 * @see user_form_field_ui_field_edit_form_alter()
 */
function profile2_field_privacy_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
    $instance = $form['#instance'];
    if ($instance['entity_type'] == 'profile2') {
        $form['instance']['settings']['profile2_field_privacy'] = array(
            '#type' => 'checkbox',
            '#title' => t('Allow the user to hide this field\'s value by making it private.'),
            '#default_value' => $instance['settings']['profile2_field_privacy'],
            // Display just below the 'required' checkbox.
            '#weight' => $form['instance']['required']['#weight'] + .1,
        );
    }
}

/**
 * Implements hook_field_delete_instance().
 *
 * Removes a field's privacy settings upon deletion of the field instance.
 */
function profile2_field_privacy_field_delete_instance($instance) {
    db_delete('profile2_field_privacy_value')
        ->condition('fid', $instance['field_id'])
        ->execute();
}

/**
 * Returns if a field value should be kept private.
 *
 * @param $fid
 *   Field ID.
 * @param $pid
 *   Profile ID.
 * @return bool
 *   TRUE if the field value should be kept private.
 */
function _profile2_field_privacy_value($fid, $pid) {
    return (bool) db_select('profile2_field_privacy_value', 'ufpv')
        ->fields('ufpv', array('private'))
        ->condition('fid', $fid)
        ->condition('pid', $pid)
        ->execute()
        ->fetchField();
}

/**
 * Implements hook_field_attach_form().
 *
 * Adds the 'private' checkbox to user fields where the field instance's
 * settings demand it.
 */
function profile2_field_privacy_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
    if ($entity_type == 'profile2') {
        $profile2_field_privacy = FALSE;
        foreach (field_info_instances('profile2', $entity->type) as $instance) {
            if ($instance['settings']['profile2_field_privacy']) {
                $field_name = $instance['field_name'];
                $form[$field_name]['profile2_field_privacy'] = array(
                    '#type' => 'checkbox',
                    '#title' => t('Private'),
                    '#description' => t('Tick this if you want to hide this value from your profile.'),
                    '#default_value' => _profile2_field_privacy_value($instance['field_id'], $entity->pid),
                );
                $form[$field_name]['#profile2_field_privacy_fid'] = $instance['field_id'];
                $profile2_field_privacy = TRUE;
            }
        }
    }
}

/**
 * Stores if a profile2 field's value should be kept private.
 *
 * @see profile2_field_privacy_field_attach_form
 */
function profile2_field_privacy_field_attach_submit($entity_type, $entity, $form, $form_state) {
    if (isset($form_state['values']) && is_array($form_state['values']) && is_array($fields = reset($form_state['values']))) {
        if(isset($entity->type))
        {
            //krumo($fields);
            // Delete existing
            //profile2_field_privacy_field_attach_delete($entity_type, $entity);4
            foreach (field_info_instances('profile2', $entity->type) as $instance) {
                if (isset($fields[$instance['field_name']]) && isset($fields[$instance['field_name']]['profile2_field_privacy'])) {
                    //krumo($fields[$instance['field_name']]['profile2_field_privacy']);
                    //krumo($instance);
                    db_merge('profile2_field_privacy_value')
                    ->key(array(
                        'fid' => $instance['field_id'],
                        'pid' => $form['#entity']->pid,
                    ))
                    ->fields(array('private' => $fields[$instance['field_name']]['profile2_field_privacy']))
                    ->execute();
                }
            }
        }
    }
}

/**
 * Implements hook_field_access().
 */
function profile2_field_privacy_field_access($op, $field, $entity_type, $entity, $account) {
    //krumo($entity_type);
    if ($entity_type == 'profile2') {
        switch ($op) {
        case 'view':
            $instance = field_info_instance('profile2', $field['field_name'], $entity->type);
            if ($instance['settings']['profile2_field_privacy']) {
                // Grant access if this permission is granted to the viewer.
                if (user_access('access private fields')) {
                    return TRUE;
                }
                // If the to-be-displayed field's owner have not submitted the user
                // add/edit form with the profile2_field_privacy checkbox on it, then s/he
                // will not have any data related to this field, so her/his $entity
                // user object is not populated here. In other words, her/his field
                // should be available to the public, so grant access.
                if (!is_object($entity)) {
                    return TRUE;
                }
                // If the field is to be kept private, only grant access if the viewer
                // has the same uid as the $user being viewed.
                if (_profile2_field_privacy_value($field['id'], $entity->pid)) {
                    return (bool) ($entity->uid == $account->uid);
                }
                // If the field is not to be kept private, grant access.
                return TRUE;
            }
            break;
        }
    }
}

/**
 * Implements hook_field_attach_delete().
 */
function profile2_field_privacy_field_attach_delete($entity_type, $entity) {
    if ($entity_type == 'profile2') {
        db_delete('profile2_field_privacy_value')
            ->condition('pid', $entity->uid)
            ->execute();
    }
}
