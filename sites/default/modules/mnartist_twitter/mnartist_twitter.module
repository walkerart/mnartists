<?php

/**
 * @file
 * Code for the MNArtist Twitter feature.
 */

function twitterCache($consumerKey, $consumerSecret, $count, $search_string, $reset = FALSE)
{
	if($cached = cache_get('mnartist_twitter'))
	{
		$tweets = $cached->data;
		foreach($tweets as $tweet)
		{
			if(!empty($tweet))
			{
				$tweet->cache = true;
			}
		}
	}
	if (empty($tweets) || $reset)
	{
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, 'https://api.twitter.com/oauth2/token');
		curl_setopt($ch, CURLOPT_POST, true);
		$data = array();
		$data['grant_type'] = "client_credentials";
		curl_setopt($ch, CURLOPT_POSTFIELDS, $data);

		curl_setopt($ch, CURLOPT_USERPWD, $consumerKey . ':' . $consumerSecret);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$result = curl_exec($ch);
		curl_close($ch);
		$bearer_token = json_decode($result);
		$bearer = $bearer_token->{'access_token'}; // this is your app token
		$tweets = array();

		$tweet_ch = curl_init();
        curl_setopt_array($tweet_ch, array(
            CURLOPT_URL => 'https://api.twitter.com/1.1/search/tweets.json?q='.$search_string,
            CURLOPT_HTTPHEADER => array('Authorization: Bearer ' . $bearer),
            CURLOPT_RETURNTRANSFER => true
        ));
        $tweets_result = curl_exec($tweet_ch);
        curl_close($tweet_ch);
        $clean_tweets_result = json_decode($tweets_result);
        foreach($clean_tweets_result->statuses as $tweet)
        {
            $tweets[$tweet->id_str] = $tweet;
        }
		krsort($tweets);
		cache_set('mnartist_twitter', $tweets, 'cache', REQUEST_TIME + (60*10));
	}

	return $tweets;
}

function _mnartist_twitter_block_visibility() {
    	return true;
}

function mnartist_twitter_admin() {
    $form = array();
    $form['mnartist_twitter_consumer_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter API Consumer Key'),
        '#default_value' => variable_get('mnartist_twitter_consumer_key', ''),
        '#size' => 21,
        '#maxlength' => 21,
        '#description' => t("Your Twitter API Consumer Key, from dev.twitter.com."),
        '#required' => FALSE,
    );
    $form['mnartist_twitter_consumer_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter API Consumer Secret'),
        '#default_value' => variable_get('mnartist_twitter_consumer_secret', ''),
        '#size' => 42,
        '#maxlength' => 42,
        '#description' => t("Your Twitter API Consumer Secret, from dev.twitter.com."),
        '#required' => FALSE,
    );
    return system_settings_form($form);
}

function mnartist_twitter_menu() {
    $items = array();
    $items['admin/config/mnartist_twitter'] = array(
        'title' => 'MNArtsts Twitter module settings',
        'description' => 'Setup for your twitter API account. Information available at dev.twitter.com',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mnartist_twitter_admin'),
        'access arguments' => array('administer mnartist_twitter settings'),
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

function mnartist_twitter_block_info() {
    return array(
        'mna_twitter_create' => array(
            'info' => 'MNArtist Twitter Block',
            'cache' => DRUPAL_NO_CACHE,
            'visibility' => BLOCK_VISIBILITY_PHP,
            'pages' => '<?php return _mnartist_twitter_block_visibility(); ?>'
        ),
    );
}

function mnartist_twitter_block_view($delta = '') {
    switch($delta) {
        case 'mna_twitter_create':
            $block['content'] = _mnartist_twitter_block();
        break;
    }
    return $block;
}

function _mnartist_twitter_block()
{
	$url = $_SERVER['REQUEST_URI'];
    $url = parse_url($url);
    $list = array();

    // if a community is selected, get the relevant hashtags and
    // add them to $list
    if(isset($url['query']))
    {
        parse_str($url['query'], $vars);
        if(isset($vars['og']))
        {
        	$keys = array_keys($vars['og']);
        	$nodes = node_load_multiple($keys);
        	foreach($nodes as $node)
        	{
        		// if the community has a hashtag set, add it to the terms
        		// we'll scrape for
        		if (isset($node->field_community_twitter['und'])) {
        			$list[] = urlencode('#'.strtolower($node->field_community_twitter['und'][0]['value']));
        		}
        	}
        }
    // or if no community is selected, get ALL of the community
    // nodes, and their hashtags
    } else {
        $nodes = node_load_multiple(array(), array('type' => 'community'));
        foreach($nodes as $node)
        {
            if (isset($node->field_community_twitter['und'])) {
                $list[] = urlencode('#'.strtolower($node->field_community_twitter['und'][0]['value']));
            }
        }
    }
    $search_string = implode('+', $list);
    $consumer_key = variable_get('mnartist_twitter_consumer_key');
    $consumer_secret = variable_get('mnartist_twitter_consumer_secret');
	$tweets = twitterCache($consumer_key, $consumer_secret, 50, $search_string, TRUE);
	$output = "";
	$output .= '<ul id="twitter_update_list">';
	foreach ( $tweets as $tweet ) {
		if(isset($vars['og']))
		{
			preg_match_all("/(#\w+)/", $tweet->text, $matches);
			$matched = false;
			foreach($matches[0] as $match)
			{
				$match = ltrim(strtolower($match), "#");
				if(in_array($match, $list))
				{
					$matched = true;
				}
			}
			if(!$matched)
			{
				continue;
			}
		}
		// Set up some variables
		$tweet_url = 'http://twitter.com/'.$tweet->user->screen_name.'/statuses/'.$tweet->id_str; // tweet url
		$urls = $tweet->entities->urls; // links
		$retweet = false;
		if(!empty($tweet->retweet))
			print_r($tweet->retweet);
			//$retweet = $tweet->retweeted_status->user->screen_name; // there is a retweeted user
		$time = new DateTime($tweet->created_at); // lets grab the date
		$date = $time->format('M j, g:ia'); // and format it accordingly
		$url_find = array();
		$url_links = array();
		if ( $urls ) {
		    if ( !is_array( $urls ) ) {
		        $urls = array();
		    }
		    foreach ( $urls as $url ) {
		        $theurl = $url->url;
		        if ( $theurl ) {
		            $url_block = '<a href="'.$theurl.'" target="_blank">'.$theurl.'</a>';
		            $url_find[] = $theurl; // make array of urls
		            $url_links[] = $url_block; // make array of replacement link blocks for urls in text
		        }
		    }
		}
		if ( $retweet ) { // add a class for retweets
		    $link_class = ' class="retweet"';
		} else {
		    $link_class = '';
		}
		$output .= '<li'.$link_class.'>';
		$new_text = preg_replace('#@([\\d\\w]+)#', '<a href="http://twitter.com/$1" target="_blank">$0</a>', $tweet->text); // replace all @mentions with actual links
		$newer_text = preg_replace('/#([\\d\\w]+)/', '<a href="https://twitter.com/search?q=%23$1&src=hash" target="_blank">$0</a>', $new_text); // replace all #tags with actual links
		$text = str_replace( $url_find, $url_links, $newer_text); // replace all links with actual links
		$output .= $text;
		$output .= '<br /><a class="twt-date" href="'.$tweet_url.'" target="_blank">'.$date.'</a>'; // format the date above
		$output .= '</li>';
	}
	$output .= '</ul>';
	return $output;
}