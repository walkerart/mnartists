<?php
define('TWITTER_SEARCH_ENDPOINT', 'https://api.twitter.com/1.1/search/tweets.json');
define('TWITTER_USERSTATUSES_ENDPOINT', 'https://api.twitter.com/1.1/statuses/user_timeline.json');
define('TWITTER_HOME_USER', variable_get('mnartist_twitter_home_user'));
define('TWITTER_CONSUMER_KEY', variable_get('mnartist_twitter_consumer_key'));
define('TWITTER_CONSUMER_SECRET', variable_get('mnartist_twitter_consumer_secret'));
define('TWITTER_ACCESS_TOKEN', variable_get('mnartist_twitter_access_token'));
define('TWITTER_TOKEN_SECRET', variable_get('mnartist_twitter_token_secret'));
define('TWITTER_BLOCK_HIDE_THRESHOLD', 2);// number of tweets to display before we do the 'hide' thing

/**
 * @file
 * Code for the MNArtist Twitter feature.
 */

function twitterCache($endpointUrl, array $urlParams, $reset = FALSE)
{
    $urlParamsStringArr = array();
    foreach ($urlParams as $key => $value) {
        $urlParamsStringArr[] = "$key=".urlencode($value);
    }
    $urlParamsString = implode('&', $urlParamsStringArr);
    $fetchUrl = "$endpointUrl?$urlParamsString";
    $cacheKey = 'mnartist_twitter_'.md5($fetchUrl);

	if($cached = cache_get($cacheKey)) {
		$tweets = $cached->data;
		foreach($tweets as $tweet)
		{
			if(!empty($tweet))
			{
				$tweet->cache = true;
			}
		}
	}
	if (empty($tweets) || $reset) {

        // setup oauth for request
        // NB dependency on php OAuth library here
        $oauth = new OAuth(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, OAUTH_SIG_METHOD_HMACSHA1, OAUTH_AUTH_TYPE_URI);
        $oauth->setToken(TWITTER_ACCESS_TOKEN, TWITTER_TOKEN_SECRET);

        // do the request
        $oauth->fetch($fetchUrl);
        $tweets = json_decode($oauth->getLastResponse());

        // if endpoint returned errors, log them and return false
        if (isset($tweets->errors)) {
            foreach ($tweets->errors as $index => $error) {
                watchdog('mnartist_twitter', 'Twitter API returned an error in mnartist_twitter.module->twitterCache():', array(), WATCHDOG_ERROR);
                watchdog('mnartist_twitter', 'Error message: @message', array("@message" => $error->message), WATCHDOG_ERROR);
                watchdog('mnartist_twitter', 'Error code: @code', array("@code" => $error->code), WATCHDOG_ERROR);
                watchdog('mnartist_twitter', 'Error @num of @den', array("@num" => $index, "@den" => count($tweets->errors)), WATCHDOG_ERROR);
            }
            return false;
        } else {
            // okay this is less than ideal, but because search api results
            // are structured differently from timeline results in this one
            // way (the search returns the tweets in a 'statuses' property),
            // if we have the statuses property then jump down to that, otherwise
            // just return the decoded return
            $tweets = (isset($tweets->statuses)) ? $tweets->statuses : $tweets;

            // set the cache
            cache_set($cacheKey, $tweets, 'cache', REQUEST_TIME + (60*10));
        }
    }
    return $tweets;
}

function _mnartist_twitter_block_visibility() {
    	return true;
}

function mnartist_twitter_admin() {
    $form = array();
    $form['mnartist_twitter_home_user'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter API Home User'),
        '#default_value' => variable_get('mnartist_twitter_home_user', ''),
        '#description' => t("The twitter user that will be used as the basis for the home page feed. Do not include '@' sign."),
        '#required' => FALSE,
    );
    $form['mnartist_twitter_consumer_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter API Consumer Key'),
        '#default_value' => variable_get('mnartist_twitter_consumer_key', ''),
        '#size' => 21,
        '#maxlength' => 21,
        '#description' => t("Your Twitter API Consumer Key, from dev.twitter.com."),
        '#required' => FALSE,
    );
    $form['mnartist_twitter_consumer_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter API Consumer Secret'),
        '#default_value' => variable_get('mnartist_twitter_consumer_secret', ''),
        '#size' => 42,
        '#maxlength' => 42,
        '#description' => t("Your Twitter API Consumer Secret, from dev.twitter.com."),
        '#required' => FALSE,
    );
    $form['mnartist_twitter_access_token'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter API Access Token'),
        '#default_value' => variable_get('mnartist_twitter_access_token', ''),
        '#size' => 50,
        '#maxlength' => 50,
        '#description' => t("Your Twitter API Access Token, from dev.twitter.com."),
        '#required' => FALSE,
    );
    $form['mnartist_twitter_token_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter API Token Secret'),
        '#default_value' => variable_get('mnartist_twitter_token_secret', ''),
        '#size' => 45,
        '#maxlength' => 45,
        '#description' => t("Your Twitter API Token Secret, from dev.twitter.com."),
        '#required' => FALSE,
    );
    return system_settings_form($form);
}

function mnartist_twitter_menu() {
    $items = array();
    $items['admin/config/mnartist_twitter'] = array(
        'title' => 'MNArtsts Twitter module settings',
        'description' => 'Setup for your twitter API account. Information available at dev.twitter.com',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mnartist_twitter_admin'),
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

function mnartist_twitter_block_info() {
    return array(
        'mna_twitter_create' => array(
            'info' => 'MNArtist Twitter Block',
            'cache' => DRUPAL_NO_CACHE,
            'visibility' => BLOCK_VISIBILITY_PHP,
            'pages' => '<?php return _mnartist_twitter_block_visibility(); ?>'
        ),
    );
}

function mnartist_twitter_block_view($delta = '') {
    switch($delta) {
        case 'mna_twitter_create':
            $block['content'] = _mnartist_twitter_block();
        break;
    }
    return $block;
}

function mnartist_twitter_theme() {
    return array(
        'tweets_block' => array(
            'variables' => array(),
            'template' => 'templates/tweets',
        )
    );
}

function _mnartist_twitter_block()
{
	$url = $_SERVER['REQUEST_URI'];
    $url = parse_url($url);
    $list = array();
    $tweets = array();

    // if a community is selected, get the relevant hashtags and
    // add them to $list
    if(isset($_GET['og']))
    {
        parse_str($url['query'], $vars);

        $hashtag_list = array();
    	$keys = array_keys($vars['og']);

    	$nodes = node_load_multiple($keys);
    	foreach($nodes as $node)
    	{
    		// if the community has a hashtag set, add it to the terms
    		// we'll scrape for
    		if (isset($node->field_community_twitter['und'])) {
    			$hashtag_list[] = urlencode('#'.strtolower($node->field_community_twitter['und'][0]['safe_value']));
    		}
    	}
        sort($hashtag_list);
        $hashtag_tweets_options = array(
            'q' => implode(' OR ', $hashtag_list),
            'count' => '50',
        );
        $hashtag_tweets = twitterCache(TWITTER_SEARCH_ENDPOINT, $hashtag_tweets_options);
        foreach ($hashtag_tweets as $tweet) {
            $tweets[$tweet->id_str] = $tweet;
        }
        krsort($tweets);
    } else {
        // or if no community is selected, get tweets for 'home user' (set in config)
        // plus mentions of that user

        // get user tweets directly from user statuses endpoint
        $user_tweets_options = array(
            'screen_name' => TWITTER_HOME_USER,
            'count' => '50',
        );
        $user_tweets = twitterCache(TWITTER_USERSTATUSES_ENDPOINT, $user_tweets_options);

        // get mentions from search endpoint
        $mention_tweets_options = array(
            'q' => '@'.TWITTER_HOME_USER,
            'count' => '50',
        );
        $mention_tweets = twitterCache(TWITTER_SEARCH_ENDPOINT, $mention_tweets_options);

        // interleave the user tweets and mentions
        foreach ($user_tweets as $tweet) {
            $tweets[$tweet->id_str] = $tweet;
        }
        foreach ($mention_tweets as $tweet) {
            $tweets[$tweet->id_str] = $tweet;
        }
        krsort($tweets);
    }
    // if we have no results, return false so we can hide the block
    if (count($tweets) === 0) {
        return false;
    }

	$output = "";
    if (count($tweets) > TWITTER_BLOCK_HIDE_THRESHOLD) {
        $visible_tweets = array_slice($tweets, 0, TWITTER_BLOCK_HIDE_THRESHOLD, true);
        $hidden_tweets = array_slice($tweets, TWITTER_BLOCK_HIDE_THRESHOLD, null, true);
        $output .= theme('tweets_block', array('tweets' => $visible_tweets, 'list_class' => 'twitter-thing-visible', 'show_more_link' => true));
        $output .= theme('tweets_block', array('tweets' => $hidden_tweets, 'list_class' => 'twitter-thing-hidden', 'show_more_link' => false));
    } else {
        $output .= theme('tweets_block', array('tweets' => $tweets, 'list_class' => 'twitter-thing-visible', 'show_more_link' => false));
    }

	return $output;
}