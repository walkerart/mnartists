<?php

/**
 * Implements hook_node_info()
 */
function mn_op_node_info() {
  return array(
    'opportunity' => array(
        'name' => t('Opportunity'),
        'base' => 'node_content',
        'description' => t('Create a new opportunity.'),
        'has_title' => '1',
        'title_label' => t('Opportunity Name'),
     )
  );
}

/**
 * Implements hook_menu().
 *
 */
function mn_op_menu() {
  $items['opportunities'] = array(
    'title' => 'Opportunities',
    'page callback' => 'mn_op_index',
    'access callback' => 'user_is_logged_in',
    'file' => 'mn_op.index.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['applications'] = array(
    'title' => 'Applications',
    'page callback' => 'mn_op_aps',
    'access callback' => 'user_is_logged_in',
    'file' => 'mn_op.applications.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  //path for user to view personal applications for specific opportunities
  $items['application/%'] = array(
    'title' => 'Application',
    'page callback' => 'mn_op_ap',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
    'file' => 'mn_op.application.inc',
  );

  //path for user to view personal resume from specific opportunities
  $items['application/%/resume'] = array(
    'title' => 'Application Resume',
    'page callback' => 'mn_op_resume',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
    'file' => 'mn_op.resume.inc',
  );

  $items['opportunity/%/jury-settings'] = array(
    'title' => 'Jury Settings',
    'page callback' => 'mn_op_settings',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
    'file' => 'mn_op.settings.inc',
  );
  return $items;
}

/**
 * Implement hook_form()
 */
function mn_op_form($node, $form_state) {
    return node_content_form($node, $form_state);
}

/**
 * Implements hook_theme().
 */
function mn_op_theme() {
  return array(
    'mn_op_list' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-op-list',
    ),
    'mn_op_view' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-op-view',
    ),
    'mn_op_applications' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-op-applications',
    ),
    'mn_op_application' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-op-application',
    ),
    'mn_op_resume' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-op-resume',
    ),
    'mn_op_settings' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-op-settings',
    )
  );
}

/**
 * Implements hook_cron().
 * This cron checks announce date and publishes opportunities
 */
function mn_op_cron() {
  // $interval = variable_get('cron_example_interval', 60 * 60);
  $type = "opportunity";
  $now = new DateTime();
  $result = NULL;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $type)
    ->propertyCondition('status', 0);
  $result = $query->execute();

  if ($result != NULL) {
    $nodes = node_load_multiple(array_keys($result['node']));
    foreach($nodes as $opportunity) {
      $announce_date = mn_ap_get_comparable_date($opportunity->field_announce_date['und']['0']['value'], $opportunity->field_announce_date['und']['0']['timezone'], $opportunity->field_announce_date['und']['0']['timezone_db']);
      if ($now > $announce_date) {
        $nid = $opportunity->nid;
        $node = node_load($nid);
        $node->status = 1;
        node_save($node);
      }
    }
  }
}

/**
 * Implements hook_node_access().
 */
function mn_op_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  // if context user does not own opportunity, or is
  // not an admin, then deny access to node view if
  // current date is prior to announce date
  if ($type == 'opportunity' && $op == 'view') {
    if ($node->uid !== $account->uid && !in_array('administrator', $account->roles)) {
      if (isset($node->field_announce_date[LANGUAGE_NONE])) {
        $field_announce_date = $node->field_announce_date[LANGUAGE_NONE][0];
        $now = new DateTime();
        $timezone_db = new DateTimeZone($field_announce_date['timezone_db']);
        $announce_date = new DateTime($field_announce_date['value'], $timezone_db);
        $announce_date->setTimezone(new DateTimeZone(date_default_timezone(FALSE)));

        if ($now < $announce_date) {
          return NODE_ACCESS_DENY;
        }
      }
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

function mn_op_get_jurors($nid) {
    $result = db_select('op_jurors', 'op')
      ->fields('op')
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchAll();
    //check for unregistered jurors and update table
    $i = 0;
    foreach ($result as $juror) {
      if ($juror->uid == 0) {
        $checkJuror = mn_op_check_juror_registration($nid, $juror->mail);
        if (isset($checkJuror)) $result = $checkJuror;
      }
      $i++;
    }
    return $result;
}

function mn_op_check_juror_registration($nid, $mail){
  $jurors = '';
  $user = user_load_by_mail($mail);
  if ($user) {
    $juror['uid'] = $user->uid;
    $juror['name'] = $user->name;
    $result = db_update('op_jurors')
      ->condition('nid', $nid, '=')
      ->condition('mail', $mail, '=')
            ->fields($juror)
            ->execute();
        if ($result) $jurors = mn_op_get_jurors($nid);
        return $jurors;
  }
}

function mn_op_check_existing_settings($nid) {
  $result = db_select('op_jury_settings', 'op')
      ->fields('op')
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchAssoc();
  if (!$result) {
    $result = db_insert('op_jury_settings')
      ->fields(array('nid' => $nid, 'note' => ''))
      ->execute();
  }
  return $result;
}

function mn_op_get_user_ap($uid, $nid) {
  $result = db_select('op_applications', 'op')
          ->fields('op')
          ->condition('nid', $nid, '=')
          ->condition('uid', $uid, '=')
          ->condition('complete', 1, '=')
          ->execute()
          ->fetchAssoc();
  return $result;
}

/*
* convert datetime to correct site db set time
*/
function mn_ap_get_date($date, $timezone, $timezone_db) {
  if($date && $timezone && $timezone_db) {
    $timezone = new DateTimeZone($timezone);
    $timezone_db = new DateTimeZone($timezone_db);

    $resultDate = new DateTime($date, $timezone_db);
    $resultDate->setTimezone($timezone);
    $resultDate = (array) $resultDate;
    $resultDate = new DateTime($resultDate['date']);
    $resultDate = $resultDate->format("M j, Y, g:i a");
  } else {
    $resultDate = '';
  }
  return $resultDate;
}

/*
* convert datetime to correct site db set time in a comparable format
*/
function mn_ap_get_comparable_date($date, $timezone, $timezone_db) {
  if($date && $timezone && $timezone_db) {
    $timezone = new DateTimeZone($timezone);
    $timezone_db = new DateTimeZone($timezone_db);

    $resultDate = new DateTime($date, $timezone_db);
    $resultDate->setTimezone($timezone);
    $resultDate = (array) $resultDate;
    $resultDate = new DateTime($resultDate['date']);
  } else {
    $resultDate = '';
  }
  return $resultDate;
}

/**
 * Implementation of hook_block_info().
 **/
function mn_op_block_info() {
  return array(
      'mna_op_apply_button' => array(
          'info' => 'Opportunity Apply Button',
          'cache' => DRUPAL_NO_CACHE,
          'visibility' => BLOCK_VISIBILITY_PHP
      ),
      'mna_op_external_apply_button' => array(
          'info' => 'Opportunity External Apply Button',
          'cache' => DRUPAL_NO_CACHE,
          'visibility' => BLOCK_VISIBILITY_PHP
      ),
    );
}

/**
 * Implementation of hook_block_view().
 **/
function mn_op_block_view($delta = '') {
    switch($delta) {
        case 'mna_op_apply_button':
            $block['subject'] = 'Opportunity Apply Button';
            $block['content'] = _mn_op_apply_button();
        break;
        case 'mna_op_external_apply_button':
            $block['subject'] = 'Opportunity External Apply Button';
            $block['content'] = _mn_op_external_apply_button();
        break;
    }

    return $block;
}

/* returns html fragment representing apply button on singular opportunity view */
function _mn_op_apply_button() {
  $context_opp = node_load(arg(1));
  $internal = (isset($context_opp-> op_application_type[LANGUAGE_NONE]) && $context_opp-> op_application_type[LANGUAGE_NONE][0]['value'] === '1') ? TRUE : FALSE;
  $start_date = $end_date = '1970-1-1 00:00:00';
  if (isset($context_opp->op_dates)) {
    $start_date = date_create_from_format('Y-n-d G:i:s', $context_opp->op_dates[LANGUAGE_NONE][0]['value']);
    $end_date = date_create_from_format('Y-n-d G:i:s', $context_opp->op_dates[LANGUAGE_NONE][0]['value2']);
  }
  $now = new DateTime();

  if ($internal && $now >= $start_date && $now <= $end_date) {
    $button_fragment_arr = array();
    $button_fragment_arr[] = '<div class="edit-button">';
    if (!user_is_logged_in()) {
      $button_fragment_arr[] = '<a href="/user/login?destination=opportunity/'.$context_opp->nid.'/apply">Apply</a>';
    } else {
      $button_fragment_arr[] = '<a href="/opportunity/'.$context_opp->nid.'/apply">Apply</a>';
    }
    $button_fragment_arr[] = '</div>';
    return implode('', $button_fragment_arr);
  }
}

function _mn_op_external_apply_button() {
  $context_opp = node_load(arg(1));
  $internal = (isset($context_opp-> op_application_type[LANGUAGE_NONE]) && $context_opp-> op_application_type[LANGUAGE_NONE][0]['value'] === '1') ? TRUE : FALSE;
  $start_date = date_create_from_format('Y-n-d G:i:s', $context_opp->op_dates[LANGUAGE_NONE][0]['value']);
  $end_date = date_create_from_format('Y-n-d G:i:s', $context_opp->op_dates[LANGUAGE_NONE][0]['value2']);
  $now = new DateTime();

  $button_fragment_arr = array();
  if (!$internal) {
      if (!empty($context_opp->field_op_uri) && $now >= $start_date && $now <= $end_date) {
          $button_fragment_arr[] = '<a href="'.$context_opp->field_op_uri[LANGUAGE_NONE][0]['value'].'" target="_blank">Apply Here</a>';
      } else {
          $button_fragment_arr[] = 'External Site';
      }
  } else {
      $button_fragment_arr[] = 'MNArtists.org';
  }
  return implode('', $button_fragment_arr);

}

/**
 * Implementation of hook_views_query_alter
 * @param type $view
 * @param type $query 
 */
function mn_op_views_query_alter(&$view, &$query) {

  if ($view->name == 'artist_artworks') {

    // Add a join to the draggableviews_structure table which is maintained by the 'manage-artworks-sort' view
    // and by the draggable_views contrib module
    // We need to use the sort order from there to order this view
    $join = new views_join();
    $join->table = 'draggableviews_structure';
    $join->field = 'entity_id';
    $join->left_table = 'node';
    $join->left_field = 'nid';
    $join->type = 'left';
    $query->add_relationship('draggableviews_structure', $join, 'node');
  
    $query->orderby[1]['field'] = "draggableviews_structure.weight";
    $query->orderby[1]['direction'] = "ASC";
  }
}

/**
 * Implements hook_form_alter().
 *
 */
function mn_op_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_form_manage_artworks_sort_page') {
    $form['actions']['submit']['#submit'][] = 'mn_op_draggable_view_submit';
  }
}

function mn_op_draggable_view_submit($form, &$form_state) {
  drupal_set_message('Successfully updated');
}
