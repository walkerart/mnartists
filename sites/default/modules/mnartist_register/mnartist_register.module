<?php

// needed to clean up an import mess
// function mnartist_register_init() {
//     $nodes = node_load_multiple(array(), array('uid' => 45));
//     foreach($nodes as $node) {
//         if (strlen($node->title) === 0) {
//             node_delete($node->nid);
//         }
//     }
// }

function mnartist_register_menu() {

    // endpoint for downloading user resume
    $items['user/migrate'] = array(
        'page callback'     => 'mnartist_register_migrate',
        'page arguments'    => array(),
        'access callback'   => TRUE,
        'type'              => MENU_CALLBACK,
    );

    $items['admin/settings/mnartist_register'] = array(
        'title' => 'MNArtist Register Settings',
        'description' => 'Manage registration settings, including migration settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mnartist_register_admin'),
        'access arguments' => array('administer settings'),
        'type' => MENU_NORMAL_ITEM,
    );

    // $items['admin/settings/mnartist_migrate'] = array(
    //     'title' => 'MNArtist Migration',
    //     'description' => 'Manage migration',
    //     'page callback' => 'mnartist_register_migrate_content',
    //     'access arguments' => array('administer settings'),
    //     'type' => MENU_NORMAL_ITEM,
    // );

    return $items;

}

function mnartist_register_admin() {
    $form = array();
    $form['mnartist_postgres_db'] = array(
        '#type' => 'textfield',
        '#title' => t('Postgres Database Name'),
        '#default_value' => variable_get('mnartist_postgres_db', 'mna_prod'),
        '#size' => 60,
        '#maxlength' => 250,
        '#description' => t("The name of the postgres database."),
        '#required' => TRUE,
    );
    $form['mnartist_postgres_user'] = array(
        '#type' => 'textfield',
        '#title' => t('Postgres Database Username'),
        '#default_value' => variable_get('mnartist_postgres_user', 'postgres'),
        '#size' => 60,
        '#maxlength' => 250,
        '#description' => t("The user of the postgres database."),
        '#required' => TRUE,
    );
    $form['mnartist_postgres_pass'] = array(
        '#type' => 'textfield',
        '#title' => t('Postgres Database Password'),
        '#default_value' => variable_get('mnartist_postgres_pass', ''),
        '#size' => 60,
        '#maxlength' => 250,
        '#description' => t("The password of the postgres database."),
        '#required' => FALSE,
    );
    return system_settings_form($form);
}

function mnartist_register_form_alter(&$form, &$form_state, $form_id) {
    switch ($form_id) {
        case 'user_register_form':
            $form['#submit'][] = 'mnartist_register_user_register_submit';
            break;
    }
}

function mnartist_register_user_register_submit($form, &$form_state) {
    drupal_goto('user/migrate');
}

function mnartist_register_migrate() {
    global $user;

    $html_fragment = array();
    $html_fragment[] = '<div class="clearfix migrate-form">';
    $temp_form = drupal_get_form('mnartist_register_user_form');
    $html_fragment[] = drupal_render($temp_form);
    $html_fragment[] = '</div>';
    return implode('', $html_fragment);
}

function mnartist_register_user_form() {
    global $user;
    return array(
        'help' => array(
            '#markup' => '<h1>User Migration</h1>
                          <p>
                            Welcome to an all-new mnartists.org!<br>
                            Follow these 3 easy steps to import your exisitng account to the new mnartists.org, or click &lsquo;Proceed without importing&rsquo; to continue to the new site without import.
                          </p>
                          <p>
                            <ol>
                                <li>Enter your old email and password from your existing mnartists.org and click Import.</li>
                                <li>You will then be brought to your new account with data imported from your old account.</li>
                                <li>After import, click on My Stuff to view and update your migrated account, profile information, work samples and resume data.</li>
                            </ol>
                        </p>
                        <p>
                            <ul>
                                <li>Want to start fresh? Decline to import your old account information, work samples, and resume info by clicking the &lsquo;Proceed without Importing&rsquo; button.</li>
                                <li>Have questions about migrating your account or fogot your old password? Reset your old password or contact us with questions by emailing <a href="mailto:info@mnartists.org">info@mnartists.org</a>.</li>
                            </ul>
                        </p>',
        ),
        'username' => array(
            '#type' => 'textfield',
            '#title' => t('Username'),
            '#default_value' => $user->mail,
            '#required' => false
        ),
        'password' => array(
            '#type' => 'password',
            '#title' => t('Password'),
            '#default_value' => '',
            '#required' => false
        ),
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Import')
        ),
        'button' => array(
            '#type' => 'button',
            '#value' => t('Proceed Without Importing'),
        )
    );
}

function mnartist_register_user_form_validate($form, &$form_state) {

    global $user;

    if (isset($form_state["values"]["op"]) && $form_state["values"]["op"] === "Proceed Without Importing") {
        drupal_goto("user/feed");
        return;
    }

    if (!isset($form_state["values"]["username"]) || strlen($form_state["values"]["username"]) < 1) {
        form_set_error('username', 'Username is required.');
    }
    if (!isset($form_state["values"]["password"]) || strlen($form_state["values"]["password"]) < 1) {
        form_set_error('username', 'Password is required.');
    }

    $dbh = ConnectionFactory::getFactory()->getConnection();

    $stmt = $dbh->prepare("SELECT * FROM t_user WHERE username = :username AND password = :password");
    $stmt->bindParam(":username", $form_state['values']['username']);
    $stmt->bindParam(":password", $form_state['values']['password']);
    $stmt->execute();

    $result = $stmt->fetchAll();

    if (count($result) < 1) {
        form_set_error('username', 'No account found for those credentials.');
    }
}

function mnartist_register_user_form_submit($form, &$form_state) {

    $batch = array(
        'operations' => array(
            array('_mnartist_register_batch_handler', array('getUserData', array(
                'username' => trim($form_state['values']['username']),
                'password' => trim($form_state['values']['password'])))),
            array('_mnartist_register_batch_handler', array('loadMainProfile', array())),
            array('_mnartist_register_batch_handler', array('loadResume', array())),
            array('_mnartist_register_batch_handler', array('loadWorks', array())),
            array('_mnartist_register_batch_handler', array('linkArticle', array())),
        ),
        'finished' => '_mnartist_register_batch_finished',
        'title' => t('MNArtists Account Import'),
        'init_message' => t('MNArtists Account Import is starting.'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('MNArtists Account Import has encountered an error.'),
    );

    batch_set($batch);
}

function _mnartist_register_batch_handler($action, $data, &$context) {

    switch($action) {
        case 'getUserData':
            $legacyData = _mnartist_register_get_user_data(
                $data['username'],
                $data['password']
            );
            $context['results']['legacyData'] = $legacyData;
            $context['finished'] = 1;
            break;
        case 'loadMainProfile':
            _mnartist_load_user_profile_data($context['results']['legacyData']);
            $context['finished'] = 1;
            break;
        case 'loadResume':
            _mnartist_load_resume_profile_data($context['results']['legacyData']);
            $context['finished'] = 1;
            break;
        case 'loadWorks':
            if (!isset($context['sandbox']['progress'])) {
                $context['sandbox']['progress'] = 0;
                $context['sandbox']['max'] = isset($context['results']['legacyData']['work']) ? count($context['results']['legacyData']['work']) : 0;
            }

            if ($context['sandbox']['max'] == 0) {
                $context['finished'] = 1;
            } else {
                $work = $context['results']['legacyData']['work'][$context['sandbox']['progress']];
                _mnartist_register_import_work($work);

                $context['sandbox']['progress']++;
                $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
            }
            break;
        case 'linkArticle':
            _mnartist_register_link_article($context['results']['legacyData']);
            $context['finished'] = 1;
            break;
    }
}

function _mnartist_register_batch_finished($success, $results, $operations) {
    if ($success) {
        drupal_set_message('Your old mnartists.org account data has been successfully imported. View and update your account information by using the options on the left-hand menu.');
        drupal_goto('/user/feed');
    }
    else {
        // An error occurred.
        // $operations contains the operations that remained unprocessed.
        $error_operation = reset($operations);
        $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
        drupal_set_message($message, 'error');
    }
}

function _mnartist_load_user_profile_data($legacyData) {
    global $user;

    if (isset($legacyData['artist']['files']) && count($legacyData['artist']['files'])) {
        $image = system_retrieve_file($legacyData['artist']['files'][0]['uri'], 'public://pictures/' . $legacyData['artist']['files'][0]['filename'], TRUE, FILE_EXISTS_REPLACE);
        if ($image) {
            $saveData = array(
                'picture' => $image
            );
            user_save($user, $saveData);
        }
    }

    $mainProfile = profile2_load_by_user($user, 'main');
    if (!$mainProfile) {
         $mainProfile = profile_create(array('type' => 'main', 'uid' => $user->uid));
         $mainProfile->bundle = 'main';
         profile2_save($mainProfile);
    }

    if (strlen(trim($legacyData['firstname'])) || strlen(trim($legacyData['lastname']))) {
        if (isset($mainProfile->field_full_name) && count($mainProfile->field_full_name)) {
            //update field
        } else {
            $fc = entity_create('field_collection_item', array(
                'field_name' => 'field_full_name',
                'field_first_name' => array(
                    LANGUAGE_NONE => array(array('value' => trim($legacyData['firstname'])))
                ),
                'field_last_name' => array(
                    LANGUAGE_NONE => array(array('value' => trim($legacyData['lastname'])))
                )
            ));
            $fc->setHostEntity('profile2', $mainProfile);
            $fc->save();
        }
    }

    if (isset($legacyData['artist'])) {
        $artistData = $legacyData['artist'];
        if (_mnartist_register_validate_field($artistData, 'gender')) {
            $mainProfile->field_gender = array(LANGUAGE_NONE => array(array('value' => strtolower($artistData['gender']))));
        }

        if (_mnartist_register_validate_field($artistData, 'pseudonym')) {
            $mainProfile->field_pseudonym = array(LANGUAGE_NONE => array(array('value' => $artistData['pseudonym'])));
        }

        if (_mnartist_register_validate_field($artistData, 'birthlocation')) {
            $mainProfile->field_birthplace = array(LANGUAGE_NONE => array(array('value' => $artistData['birthlocation'])));
        }

        if (_mnartist_register_validate_field($artistData, 'birthdate')) {
            $mainProfile->field_birthdate = array(LANGUAGE_NONE => array(array(
                'value' => strtolower($artistData['birthdate'] . ' 00:00:00'
            ))));
        }

        if (_mnartist_register_validate_field($artistData, 'qualificationtext')) {
            $mainProfile->field_bio = array(LANGUAGE_NONE => array(array(
                'value' => _mnartist_register_filter_legacy_tags(trim($artistData['qualificationtext'])),
                'format' => 'filtered_html'
            )));
        }

        if (isset($artistData['contact']) && count($artistData['contact'])) {
            $contactData = $artistData['contact'];

            if (_mnartist_register_validate_field($contactData, 'lineone')) {
                $address = trim(trim($contactData['lineone']) . ' ' . trim($contactData['linetwo']));
                $mainProfile->field_address = array(LANGUAGE_NONE => array(array('value' => $address)));
            }

            if (_mnartist_register_validate_field($contactData, 'city')) {
                $mainProfile->field_city = array(LANGUAGE_NONE => array(array('value' => $contactData['city'])));
            }

            if (_mnartist_register_validate_field($contactData, 'state_code')) {
                $mainProfile->field_state = array(LANGUAGE_NONE => array(array('value' => strtoupper($contactData['state_code']))));
            }

            if (_mnartist_register_validate_field($contactData, 'zipcode')) {
                $mainProfile->field_zip = array(LANGUAGE_NONE => array(array('value' => $contactData['zipcode'])));
            }

            if (_mnartist_register_validate_field($contactData, 'country_code')) {
                $mainProfile->field_country = array(LANGUAGE_NONE => array(array('value' => strtoupper($contactData['country_code']))));
            }

            if (_mnartist_register_validate_field($contactData, 'number')) {
                $mainProfile->field_phone = array(LANGUAGE_NONE => array(array('value' => $contactData['number'])));
            }

            if (_mnartist_register_validate_field($contactData, 'emailaddress')) {
                $mainProfile->field_public_email = array(LANGUAGE_NONE => array(array('value' => $contactData['emailaddress'])));
            }
        }
    }

    profile2_save($mainProfile);
}

function _mnartist_load_resume_profile_data($legacyData) {
    global $user;

    $resume = profile2_load_by_user($user, 'resume');
    if (!$resume) {
         $resume = profile_create(array('type' => 'resume', 'uid' => $user->uid));
         $resume->bundle = 'resume';
         profile2_save($resume);
    }

    if (isset($legacyData['artist'])) {
        $artistData = $legacyData['artist'];

        if (_mnartist_register_validate_field($artistData, 'qualificationtext')) {
            $resume->field_biography = array(LANGUAGE_NONE => array(array(
                'value' => _mnartist_register_filter_legacy_tags(trim($artistData['qualificationtext'])),
                'format' => 'filtered_html'
            )));
        }

        //Load all of these fields into field_imported_data since they cannot be parsed into fields
        $importData = array();
        if (_mnartist_register_validate_field($artistData, 'awardtext')) {
            $importData['Awards'] = trim($artistData['awardtext']);
        }

        if (_mnartist_register_validate_field($artistData, 'exhibitiontext')) {
            $importData['Exhibitions'] = trim($artistData['exhibitiontext']);
        }

        if (_mnartist_register_validate_field($artistData, 'gallerytext')) {
            $importData['Galleries'] = trim($artistData['gallerytext']);
        }

        if (_mnartist_register_validate_field($artistData, 'collectiontext')) {
            $importData['Collections'] = trim($artistData['collectiontext']);
        }

        if (_mnartist_register_validate_field($artistData, 'relatedorgtext')) {
            $importData['Related Organizations'] = trim($artistData['relatedorgtext']);
        }

        if (count($importData)) {
            $fieldData = '';
            foreach($importData as $k => $v) {
                $fieldData .= '<div><strong>' . $k . '</strong></div><div>' . $v . '</div>';
            }

            $resume->field_imported_data = array(LANGUAGE_NONE => array(array(
                'value' => _mnartist_register_filter_legacy_tags($fieldData),
                'format' => 'filtered_html'
            )));
        }
    }

    profile2_save($resume);
}

function _mnartist_register_validate_field($legacyData, $field) {
    return isset($legacyData[$field]) && strlen(trim($legacyData[$field]));
}

function _mnartist_register_filter_legacy_tags($originalString) {

    $legacySubstitutions = array(
        '[b]' => '<b>',
        '[/b]' => '</b>',
        '[i]' => '<i>',
        '[/i]' => '</i>',
        '[u]' => '<u>',
        '[/u]' => '</u>',
    );

    return str_replace(
        array_keys($legacySubstitutions),
        array_values($legacySubstitutions),
        $originalString
    );

}

function _mnartist_register_get_user_data($email, $password) {
    $dbh = ConnectionFactory::getFactory()->getConnection();

    $userData = array();
    $email = trim($email);
    $password = trim($password);

    //get base user info
    $stmt = $dbh->prepare("SELECT * FROM t_user WHERE username = :username AND password = :password LIMIT 1");
    $stmt->bindParam(":username", $email);
    $stmt->bindParam(":password", $password);
    $stmt->execute();

    $result = $stmt->fetch();

    if (count($result)) {
        $userData['t_user.id'] = $result['id'];
        $userData['firstname'] = $result['firstname'];
        $userData['lastname'] = $result['lastname'];
    } else {
        return $userData;
    }

    //get resources
    $stmt = $dbh->prepare(
        "SELECT tr.*,
                trt.name as resource_type_name
           FROM t_resource tr
          INNER JOIN t_resourcetype trt ON tr.resourcetype = trt.id
          WHERE owner = :creatorid");

    $stmt->bindParam(":creatorid", $userData['t_user.id']);
    $stmt->execute();
    $resources = $stmt->fetchAll();
    $userData['resources'] = $resources;

    foreach($resources as $resource) {
        $contactStmt = $stmt = $dbh->prepare(
         "SELECT tcp.*,
                 ts.name as state_name,
                 ts.code as state_code,
                 tc.name as country_name,
                 tc.code as country_code
            FROM t_contactpoint tcp
            LEFT JOIN t_state ts ON tcp.state = ts.id
            LEFT JOIN t_country tc on tcp.country = tc.id
           WHERE resourceid = :resourceId");

        $stmt->bindParam(":resourceId", $resource['id']);
        $stmt->execute();
        $contactInfo = $stmt->fetch();

        $type = strtolower($resource['resource_type_name']);
        switch($type) {
            case 'artist':
                $stmt = $dbh->prepare("SELECT * FROM t_artist WHERE resourceid = :resourceId");
                $stmt->bindParam(":resourceId", $resource['id']);
                $stmt->execute();
                $artistInfo = $stmt->fetch();
                $userData['artist'] = $artistInfo;
                $userData['artist']['childResources'] = _mnartist_register_getChildResources($resource['id']);
                $userData['artist']['files'] = _mnartist_register_getResourceFiles($resource['id']);
                if ($contactInfo) {
                    $userData['artist']['contact'] = $contactInfo;
                }
                $userData['resource'] = $resource;

                break;
            case 'work':
                if (!isset($userData[$type])) {
                    $userData[$type] = array();
                }

                $work = $resource;

                $stmt = $dbh->prepare("SELECT * FROM t_work WHERE resourceid = :resourceId");
                $stmt->bindParam(":resourceId", $resource['id']);
                $stmt->execute();
                $work['work'] = $stmt->fetch();

                $work['childResources'] = _mnartist_register_getChildResources($resource['id']);
                $work['files'] = _mnartist_register_getResourceFiles($resource['id']);

                if ($contactInfo) {
                    $work['contact'] = $contactInfo;
                }

                $userData[$type][] = $work;
                break;
            default:
                if (!isset($userData[$type])) {
                    $userData[$type] = array();
                }

                $userData[$type][] = $resource;
        }
    }

    return $userData;
}

function _mnartist_register_getChildResources($parentId) {
    $dbh = ConnectionFactory::getFactory()->getConnection();

    $stmt = $dbh->prepare("SELECT r.* FROM t_resource r INNER JOIN t_resource_child rc ON r.id = rc.childid WHERE rc.parentid = :resourceId");
    $stmt->bindParam(":resourceId", $parentId);
    $stmt->execute();

    $resources = $stmt->fetchAll();
    foreach($resources as $k => $resource) {
        $resources[$k]['files'] = $_mnartist_register_getResourceFiles($resource['id']);
    }

    return $resources;
}

function _mnartist_register_getResourceFiles($resourceId) {
    $dbh = ConnectionFactory::getFactory()->getConnection();

    $stmt = $dbh->prepare("SELECT f.* FROM t_resource_file rf INNER JOIN t_mediafile f ON rf.fileid = f.id WHERE rf.resourceid = :resourceId");
    $stmt->bindParam(":resourceId", $resourceId);
    $stmt->execute();

    $files = $stmt->fetchAll();
    foreach($files as $k => $v) {
        $path = (strrpos($v['filepath'], '/') === strlen($v['filepath']) - 1) ? $v['filepath'] : $v['filepath'] . '/';
        $files[$k]['uri'] = 'http://mnartists.org' . $path . $v['filename'];
    }

    return $files;
}

function _mnartist_register_import_work($work) {
    global $user;

    if ($work == null || $work == "") {
        return;
    }

    $node = new stdClass();
    $node->type = 'artwork';
    node_object_prepare($node);

    $node->title    = $work['title'];
    $node->language = LANGUAGE_NONE;
    $node->uid      = $user->uid;

    if (_mnartist_register_validate_field($work['work'], 'statementtext')) {
        $node->body = array(LANGUAGE_NONE => array(array(
            'value' => $work['work']['statementtext'],
            'summary' => text_summary(_mnartist_register_filter_legacy_tags($work['work']['statementtext'])),
            'format' => 'filtered_html'
        )));
    }

    if (_mnartist_register_validate_field($work['work'], 'workurl')) {
        $node->field_url = array(LANGUAGE_NONE => array(array('value' => $work['work']['workurl'])));
    }

    if (count($work['files'])) {
        $node->field_media = array(LANGUAGE_NONE => array());
        foreach($work['files'] as $fileInfo) {
            $file = system_retrieve_file($fileInfo['uri'], 'public://artwork/media/' . $fileInfo['filename'], TRUE, FILE_EXISTS_RENAME);
            if ($file && isset($file->fid)) {
                $file->display = 1;
                $file->description = $fileInfo['description'];
                $node->field_media[LANGUAGE_NONE][] = (array)$file;
            }
        }
    }

    node_save($node);
}

function _mnartist_register_get_legacy_account($email) {
    $dbh = ConnectionFactory::getFactory()->getConnection();

    $stmt = $dbh->prepare("SELECT * FROM t_user WHERE username = :username");
    $stmt->bindParam(":username", $email);
    $stmt->execute();

    $result = $stmt->fetchAll();

    if (count($result)) {
        return true;
    }

    return false;
}

function _mnartist_register_check_for_legacy_account($email) {
    $dbh = ConnectionFactory::getFactory()->getConnection();

    $stmt = $dbh->prepare("SELECT * FROM t_user WHERE username = :username");
    $stmt->bindParam(":username", $email);
    $stmt->execute();

    $result = $stmt->fetchAll();

    if (count($result)) {
        return true;
    }

    return false;
}

function _mnartist_register_link_article($legacyData) {
    global $user;

    // migrated user fullname to use for matching article author
    $fullname = $legacyData['firstname'] . ' ' . $legacyData['lastname'];

    // this can ONLY run after articles are migrated
    $subquery1 = Database::getConnection('default', 'migration')
      ->select('t_resource', 'r');
    $subquery1->fields('r', array('id'));
    $subquery1->join('t_resourcetype', 'ty', 'ty.id = r.resourcetype');
    $subquery1->condition('ty.name', 'Resource Genre', '=');
    $subquery1->condition('r.title', array('Articles', 'Articles by Discipline'), 'IN');

    $subquery2 = Database::getConnection('default', 'migration')
      ->select('t_resource_child', 'rc');
    $subquery2->fields('rc', array('childid'));
    $subquery2->condition('rc.parentid', $subquery1, 'IN');

    $query = Database::getConnection('default', 'migration')
      ->select('t_article', 'a');
    $query->join('t_resource', 'ar', 'ar.id = a.resourceid');
    $query->join('t_resource_child', 'rc', 'rc.childid = ar.id');
    $query->join('t_resource', 'tr', 'tr.id = rc.parentid');
    $query->join('t_author', 'ta', 'ta.owner = a.resourceid');
    $query->fields('a');
    $query->fields('ta', array('authorname'));
    $query->condition('rc.parentid', $subquery2, 'IN');
    $query->condition('ta.authorname', $fullname, '=');
    $query->groupBy('a.resourceid');
    $query->groupBy('ta.authorname');
    $query->addExpression('(array_agg(ar.title))[1]', 'title');

    $result = $query->execute();
    $src_ids = array();

    while ($record = $result->fetchAssoc()) {
        $src_ids[] = $record['resourceid'];
    }

    // getting the migrated node mapping
    $query = Database::getConnection('default', 'migration')
      ->select('migrate_map_mnarticle', 'm');
    $query->fields('m', array('destid1'));
    $query->condition('m.sourceid1', $src_ids, 'IN');
    $result = $query->execute();

    $nids = array();
    while ($record = $result->fetchAssoc()) {
        $nids[] = $record['destid1'];
    }

    // update article node author to migrated user
    $mn_uid = '492';
    $links = array();
    $nodes = node_load_multiple($nids);

    foreach($nodes as $node) {
        if ($node->uid == $mn_uid) {
            $node->uid = $user->uid;
            node_save($node);
        }
    }
}

class ConnectionFactory
{
    private static $factory;
    public static function getFactory()
    {
        if (!self::$factory) {
            self::$factory = new ConnectionFactory();
        }
        return self::$factory;
    }

    private $db;

    public function getConnection() {
        if (!$this->db) {
            $username = variable_get('mnartist_postgres_user', 'postgres');
            $password = variable_get('mnartist_postgres_pass', 'mna_prod');
            $dbName = variable_get('mnartist_postgres_db', 'mna_prod');

            $this->db = new PDO('pgsql:user=' . $username . ' dbname=' . $dbName . ' password=' . $password);
            // O8
            // $this->db = new PDO('pgsql:user=' . $username . ' dbname=' . $dbName . ' password=' . $password . ' host=127.0.0.1');
            $this->db->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
        }
        return $this->db;
    }
}

/*
function mnartist_register_migrate_content() {
    _mnartist_register_get_article_data();

    return '';
}

function _mnartist_register_get_article_data() {
    $dbh = ConnectionFactory::getFactory()->getConnection();

    $stmt = $dbh->prepare("select
    tr.title as topic,
    ar.title as title,
    ar.active as active,
    ar.featured as featured,
    a.*
    from t_article a
    join t_resource ar on ar.id=a.resourceid
    join t_resource_child rc on rc.childid=ar.id
    join t_resource tr on tr.id=rc.parentid
    where rc.parentid in (
      select childid from t_resource_child where parentid in (
          select r.id from t_resource r
            join t_resourcetype ty on ty.id = r.resourcetype
           where ty.name = 'Resource Genre'
            and  (r.title = 'Articles' or r.title = 'Articles by Discipline')
      )
    )
    group by a.resourceid");
    $stmt->execute();

    $results = $stmt->fetchAll();
    dpm(count($results));
    foreach($results as $article) {
        dpm($article);
    }

    //get resources
    // $stmt = $dbh->prepare(
    //     "SELECT tr.*,
    //             trt.name as resource_type_name
    //        FROM t_resource tr
    //       INNER JOIN t_resourcetype trt ON tr.resourcetype = trt.id
    //       WHERE owner = :creatorid");

    // $stmt->bindParam(":creatorid", $userData['t_user.id']);
    // $stmt->execute();
    // $resources = $stmt->fetchAll();
    // $userData['resources'] = $resources;

    // foreach($resources as $resource) {
    //     $contactStmt = $stmt = $dbh->prepare(
    //      "SELECT tcp.*,
    //              ts.name as state_name,
    //              ts.code as state_code,
    //              tc.name as country_name,
    //              tc.code as country_code
    //         FROM t_contactpoint tcp
    //         LEFT JOIN t_state ts ON tcp.state = ts.id
    //         LEFT JOIN t_country tc on tcp.country = tc.id
    //        WHERE resourceid = :resourceId");

    //     $stmt->bindParam(":resourceId", $resource['id']);
    //     $stmt->execute();
    //     $contactInfo = $stmt->fetch();

    //     $type = strtolower($resource['resource_type_name']);
    //     switch($type) {
    //         case 'artist':
    //             $stmt = $dbh->prepare("SELECT * FROM t_artist WHERE resourceid = :resourceId");
    //             $stmt->bindParam(":resourceId", $resource['id']);
    //             $stmt->execute();
    //             $artistInfo = $stmt->fetch();
    //             $userData['artist'] = $artistInfo;
    //             $userData['artist']['childResources'] = _mnartist_register_getChildResources($resource['id']);
    //             $userData['artist']['files'] = _mnartist_register_getResourceFiles($resource['id']);
    //             if ($contactInfo) {
    //                 $userData['artist']['contact'] = $contactInfo;
    //             }
    //             $userData['resource'] = $resource;

    //             break;
    //         case 'work':
    //             if (!isset($userData[$type])) {
    //                 $userData[$type] = array();
    //             }

    //             $work = $resource;

    //             $stmt = $dbh->prepare("SELECT * FROM t_work WHERE resourceid = :resourceId");
    //             $stmt->bindParam(":resourceId", $resource['id']);
    //             $stmt->execute();
    //             $work['work'] = $stmt->fetch();

    //             $work['childResources'] = _mnartist_register_getChildResources($resource['id']);
    //             $work['files'] = _mnartist_register_getResourceFiles($resource['id']);

    //             if ($contactInfo) {
    //                 $work['contact'] = $contactInfo;
    //             }

    //             $userData[$type][] = $work;
    //             break;
    //         default:
    //             if (!isset($userData[$type])) {
    //                 $userData[$type] = array();
    //             }

    //             $userData[$type][] = $resource;
    //     }
    // }

    // return $userData;
}
*/
