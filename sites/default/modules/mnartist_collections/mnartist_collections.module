<?php

/**
 * @file
 * Code for the MNArtist Collections feature.
 */


function _mnartist_collections_block_visibility() {

    if(user_is_logged_in())
    {
    	return true;
    } else {
    	return false;
    }
}

function mnartist_collections_block_info() {
    return array(
        'mna_collections_star' => array(
            'info' => 'MNArtist Collections Star',
            'cache' => DRUPAL_NO_CACHE,
            'visibility' => BLOCK_VISIBILITY_PHP,
            'pages' => '<?php return _mnartist_collections_block_visibility(); ?>'
        ),
    );
}

function mnartist_collections_block_view($delta = '') {
    switch($delta) {
        case 'mna_collections_star':
            $block['content'] = _mnartist_collections_star();
        break;
    }
    return $block;
}

function _mnartist_collections_node_has_been_collected ($nid)
{
    global $user;
    $node = node_load($nid);
    if (is_object($node)) {
        $content_type = $node->type;
        $content_id = $node->nid;
        if ($flags = flag_lists_get_user_flags($content_type, $user, false)) {
            // Build the list of lists for this node.
            foreach ($flags as $flag) {
                if(isset($flag->module)) {
                    if ($flag->module == 'flag_lists') {
                        if (_flag_lists_is_flagged($flag, $content_id, $user->uid, 0)) {
                            return true;
                        }
                    } else {
                        if ($flag->is_flagged($content_id)) {
                            return true;
                        }
                    }
                } else {
                    if ($flag->is_flagged($content_id)) {
                        return true;
                    }
                }
            }
        }
    }

    return false;
}

function _mnartist_collections_get_user_flags($variables)
{
    $node = $variables['node'];
    $create = $variables['create'];
    $ops = $variables['ops'];
    $use_flags = $variables['use_flags'];

    $items = array();

    // Make sure we have a node.
    if (is_object($node) && user_access('create flag lists')) {
        $content_type = $node->type;
        $content_id = $node->nid;
    }
    // Or at least confirm we are on a node page and user has access.
    elseif (arg(0) == 'node' && is_numeric(arg(1)) && user_access('create flag lists')) {
        $content_id = arg(1);
        $query = db_select('node')->condition('nid', $content_id);
        $query->addField('node', 'type');
        $content_type = $query->execute()->fetchField();
    }
    else {
        return;
    }

    // Do we have a list template for this node type, or are we s
    if (!flag_lists_template_exists($content_type) && !$use_flags) {
        return;
    }

    global $user;
    if ($flags = flag_lists_get_user_flags($content_type, $user, $use_flags)) {
        // Build the list of lists for this node.
        foreach ($flags as $flag) {
            if(isset($flag->module))
            {
                if ($flag->module == 'flag_lists') {
                    $action = _flag_lists_is_flagged($flag, $content_id, $user->uid, 0) ? 'unflag' : 'flag';
                }
                else {
                    $action = $flag->is_flagged($content_id) ? 'unflag' : 'flag';;
                }
            }
            else {
                $action = $flag->is_flagged($content_id) ? 'unflag' : 'flag';;
            }

            // Do we need the ops?
            if ($ops && $flag->module == 'flag_lists') {
                $ops_links = theme('flag_lists_ops', array('flag' => $flag));
                $link = $flag->theme($action, $content_id) . $ops_links;
            }
            else {
                $link = $flag->theme($action, $content_id);
            }
            if(isset($flag->module))
            {
                // If it's a list, fix the link.
                if ($flag->module == 'flag_lists') {
                    flag_lists_fix_link($link, $action);
                }
            }
            $items[] = $link;
        }
    }
    if ($create && flag_lists_template_exists($content_type)) {
        $destination = _mnartist_collections_fix_community_destination(drupal_get_destination());
        $items[] = l(t('Make a new @name', array('@name' => variable_get('flag_lists_name', t('list')))), 'flag-lists/add/' . $content_type, array('query' => $destination));
    }

    // Return if nothing to display.
    if (empty($items) || !count($items)) {
        return;
    } else {
        return $items;
    }

}

function _mnartist_collections_fix_community_destination ($destination) {
    $parsed_dest = parse_url($destination['destination']);
    if ($parsed_dest['path'] === 'communitygetitems') {
        parse_str($parsed_dest['query'], $parsed_query);
        $incoming_offset = intval($parsed_query['start']);
        $incoming_limit = intval($parsed_query['rows']);
        $new_limit = $incoming_offset + $incoming_limit;
        $new_destination = "community?start=0&rows=$new_limit";
        $destination['destination'] = $new_destination;
    }
    return $destination;
}

function mnartist_collections_theme() {
    return array(
        'mnartist_collections_star' => array(
            'variables' => array(
                'node_id' => array(),
            ),
            'template' => 'templates/node_star'
        )
    );
}

function _mnartist_collections_star()
{
    $output = theme("mnartist_collections_star", array('node_id' => arg(1)));
    $render = array(
        '#type' => 'container',
        '#attributes' => array(),
        'content' => array(
            '#type' => 'markup',
            '#markup' => $output,
            '#weight' => 0,
        ),
    );
    return $render;
}

// for a given uid, return a db_query resultset that includes
// items that a user has favorited that are not in a flag list
function mnartist_collections_get_uncollected_favorites($uid) {

    // intent is "give me all this user's rows in flag_content,
    // but only the ones that DON'T intersect with flag_lists_content"
    $sql = "SELECT flag_content.content_id, flag_content.uid, flag_content.content_type
            FROM flag_content
            WHERE uid = $uid
            AND (SELECT count(*)
                    FROM flag_lists_content
                    WHERE content_id = flag_content.content_id
                    AND uid = flag_content.uid) = 0";
    return db_query($sql);

}