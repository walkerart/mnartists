<?php
/**
 * @file
 * Code for the MNArtist Activity feature.
 */

/**
 * Implements hook_block_info()
 */
function mnartist_activity_block_info() {

    $blocks['activity'] = array(
        'info' => t('MN Artist Activity'),
        'cache' => DRUPAL_NO_CACHE,
    );

    return $blocks;
}

function mnartist_activity_block_view($delta = '') {
    global $user;

    $page_user = user_load(arg(1));
    $list = array();
    if($user->uid == $page_user->uid)
    {
        $results = db_query("SELECT am.message FROM mnartists.activity_messages am JOIN mnartists.activity_targets at ON am.amid = at.amid
                  WHERE at.aid IN (SELECT aid FROM activity WHERE nid IN (SELECT content_id FROM mnartists.flag_content WHERE content_type = 'node' AND uid = :uid))
                  ORDER BY am.amid DESC LIMIT 10", array(':uid' => $user->uid));
        foreach($results as $data) {
            $list[] = $data->message;
        }
    } else {
        $results = db_query("SELECT am.message FROM mnartists.activity_messages am JOIN mnartists.activity_targets at ON am.amid = at.amid
                             WHERE at.uid = :uid ORDER BY am.amid DESC LIMIT 10", array(':uid' => $page_user->uid));
        foreach($results as $data) {
            $list[] = $data->message;
        }
    }

    if(count($list) > 0)
    {
        $content = theme_item_list(array('items' => $list, 'title' => '', 'type' => 'ul', 'attributes' => array()));
    } else {
        $content = "No Activity";
    }

    $block['subject'] = t('Activity');
    $block['content'] = $content;

    return $block;
}

/**
 * Implements hook_token_info().
 */
function mnartist_activity_token_info() {
  return array(
    'tokens' => array(
      'node' => array(
        'node-post-artwork-media-image-uri' => array(
          'name' => t("Activity Artwork Node Media Uri"),
          'description' => t("Uri for either the media image itself or, if it's a different media type, its image representation"),
        ),
        'node-first-image-uri' => array(
          'name' => t("Activity Non-Artwork Node Image Uri"),
          'description' => t("Image Uri for first image on a non-artwork node"),
        ),
        'node-post-text-summary' => array(
          'name' => t("Node Text Summary"),
          'description' => t("A truncated piece of the node's text content"),
        ),
        'node-revision-author-full-name' => array(
          'name' => t("Node Author Full Name"),
          'description' => t("First Last or Collective name of node author"),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_node_inserts().
 * We call node update POST node insert, to
 * make sure that field_media is there for
 * hook_tokens to use when generating activity
 * messages. Don't try this at home, kids, you
 * will regret it.
 */

function mnartist_activity_node_insert($node) {
  activity_node_update($node);
}

/**
 * Implements hook_tokens().
 */
function mnartist_activity_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'node-post-artwork-media-image-uri':
          $uri = '';
          if (isset($data['node']->field_media['und'])) {
            $uri = artist_community_image_for_artwork_image_uri($data['node']->field_media['und'][0]['uri']);
          }
          if (isset($uri)) {
            $replacements[$original] = file_create_url($uri);
          }
          break;
        case 'node-first-image-uri':
          if (isset($data['node']->field_images['und'])) {
            $uri = $data['node']->field_images['und'][0]['uri'];
          } else if (isset($data['node']->op_cover_image['und'])) {
            $uri = $data['node']->op_cover_image['und'][0]['uri'];
          }
          if (isset($uri)) {
            $replacements[$original] = file_create_url($uri);
          }
          break;
        case 'node-revision-author-full-name':
          $replacements[$original] = mnartist_profiles_collective_or_fullname_or_username($data['node']->revision_uid);
          break;
        case 'node-post-text-summary':
          $limit = 500;
          $final = '';
          if (isset($data['node']->body['und'])) {
            $safe_body =  $data['node']->body['und'][0]['value'];
            $stripped_safe_body = trim(strip_tags($safe_body));
          } else if (isset($data['node']->field_body['und'])) {
            $safe_body = $data['node']->field_body['und'][0]['value'];
            $stripped_safe_body = trim(strip_tags($safe_body));
          } else {
            break;
          }
          if (isset($stripped_safe_body)) {
            if (strlen($stripped_safe_body) > $limit) {
              $final = substr($stripped_safe_body, 0, $limit).'&hellip;';
            } else {
              $final = $stripped_safe_body;
            }
            $replacements[$original] = $final;
          }
      }
    }
  }
  return $replacements;
}