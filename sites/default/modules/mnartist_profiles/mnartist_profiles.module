<?php
/**
 * @file
 * Code for the MNArtist Profiles feature.
 */
// @TODO if you use mnartist_profiles_fullname_or_username in any other modules make sure to indicate in the module info file that the module is dependent on this one
define('ARTIST_ROLE', 4);
define('ORG_ROLE', 5);
define('PUBLIC_ROLE', 6);
define('ORG_ADMIN_ROLE', 7);
define('FEED_DEFAULT_ROW_LIMIT', '20');

include_once 'mnartist_profiles.features.inc';

function mnartist_profiles_menu() {

    // endpoint for downloading user resume
    $items['user/%/resume/download'] = array(
        'page callback'     => 'mnartist_profiles_resume_download',
        'page arguments'    => array(1),
        'access callback'   => TRUE,
        'type'              => MENU_CALLBACK,
    );

    // @TODO pretty sure this belongs somewhere else, move it there
    $items['user/feed'] = array(
        'page callback'     => 'mnartist_profiles_feed',
        'access callback'   => TRUE,
        'type'              => MENU_CALLBACK,
    );

    // @TODO pretty sure this belongs somewhere else, move it there
    $items['user/feed/more'] = array(
        'page callback'     => 'mnartist_profiles_feed_more',
        'access callback'   => TRUE,
        'type'              => MENU_CALLBACK,
    );

    $items['user/welcome'] = array(
        'page callback'     => 'mnartist_profiles_welcome',
        'access callback'   => TRUE,
        'type'              => MENU_CALLBACK,
    );

    $items['user/%/setwelcome'] = array(
        'page callback'     => 'mnartist_profiles_set_welcome',
        'page arguments'    => array(1),
        'access callback'   => TRUE,
        'type'              => MENU_CALLBACK,
    );

    $items['user/ac_fullname'] = array(
        'page callback'     => 'mnartist_profiles_ac_fullname',
        'page arguments'    => array(),
        'access callback'   => TRUE,
        'type'              => MENU_CALLBACK,
    );

    return $items;

}


function mnartist_profiles_ac_fullname($string) {
    // get the data
    global $solarium_config;
    $client = new Solarium\Client($solarium_config);
    $solarium_query = $client->createSelect();
    $solarium_query->setQuery("index_id:users");
    $solarium_query->createFilterQuery('name_query')->setQuery(AC_SORT_BY_NAME_FIELD.":$string* OR tm_sort_by_name:$string");

    $resultset = $client->select($solarium_query);
    $matches = array();
    foreach ($resultset as $result) {
        if ($result->tm_sort_by_name !== "") {
            $key = $result->tm_name[0];
            $value = $result->tm_sort_by_name[0];
        } else {
            $key = $value = $result->tm_name[0];
        }
        $matches["$key"] = "$value";
    }
    print drupal_json_encode($matches);
    drupal_exit();
}

function mnartist_profiles_user_update(&$edit, $account, $category) {

    // if user is changing their privacy flag to ON,
    // the set all their nodes to unpublished
    if (isset($edit['field_user_global_privacy_flag']) &&
        $edit['field_user_global_privacy_flag'][LANGUAGE_NONE][0]['value'] == '1') {

        $query = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'node')
            ->propertyCondition('uid', $account->uid)
            ->execute();

        $node_keys = array_keys($entities['node']);
        if (!empty($node_keys)) {
            $nodes = node_load_multiple($node_keys);
            foreach ($nodes as $node) {
                $node->status = '0';
                node_save($node);
            }
        }
    }

}

function mnartist_profiles_welcome() {

    global $user;

    // include feed js
    $account = user_load($user->uid);
    $ive_tried_this = isset($account->field_show_welcome[LANGUAGE_NONE]) ? intval($account->field_show_welcome[LANGUAGE_NONE][0]['value']) : 0;

    drupal_add_js(drupal_get_path('module', 'mnartist_profiles') .'/js/welcome.js');
    return theme("mna_user_welcome", array('ive_tried_this' => $ive_tried_this));
}

function mnartist_profiles_set_welcome($uid) {
    $account = user_load($uid);

    // var_dump($account->field_show_welcome);
    var_dump($_POST['no-welcome']);
    $welcome_value = (isset($_POST['no-welcome']) && $_POST['no-welcome'] === 'on') ? 1: 0;
    $field_show_welcome = array(
        LANGUAGE_NONE => array(
            array(
                'value' => $welcome_value
            )
        )
    );
    $account->field_show_welcome = $field_show_welcome;
    user_save($account);

    $account = user_load($uid);
    var_dump($account->field_show_welcome);

    drupal_exit();
}

function mnartist_profiles_menu_alter(&$items) {
    // override menu type for mailchimp settings page
    // to suppress tab on profile page
    $items['user/%user/mailchimp']['type'] = MENU_CALLBACK;
    return $items;
}

function _mnartist_profiles_should_show_welcome() {
    global $user;
    $account = user_load($user->uid);

    // if feed is empty...
    $query = db_select('activity', 'a')
                    ->fields('a')
                    ->condition('uid', $user->uid)
                    ->execute();
    $feed_count = $query->rowCount();
    $show_welcome_field = (!isset($account->field_show_welcome['und']) || (isset($account->field_show_welcome['und']) && $account->field_show_welcome['und'][0]['value'] === '1'));
    // and the show welcome field on the user
    // is true
    return ($feed_count === 0 && $show_welcome_field);
}

// feeds the feed "infinite scroll" more data
function mnartist_profiles_feed_more() {

    // set up offset and limit
    $current_offset = (isset($_GET['offset'])) ? intval($_GET['offset']) : null;
    $current_limit = (isset($_GET['limit'])) ? intval($_GET['limit']) : FEED_DEFAULT_ROW_LIMIT;

    $feed_data = _mnartist_profiles_get_feed_data($current_offset, $current_limit);
    echo theme("mna_feed_raw", array('feed_data' => $feed_data,
                                        'current_offset' => $current_offset,
                                        'current_limit' => $current_limit));

    drupal_exit();
}

// feeds the standard page load feed with a page containing feed data
function mnartist_profiles_feed() {

    // include feed js
    drupal_add_js(drupal_get_path('module', 'mnartist_profiles') .'/js/feed.js');

    // set up offset and limit
    $current_offset = (isset($_GET['offset'])) ? intval($_GET['offset']) : null;
    $current_limit = (isset($_GET['limit'])) ? intval($_GET['limit']) : FEED_DEFAULT_ROW_LIMIT;

    // get the data and render it
    $feed_data = _mnartist_profiles_get_feed_data($current_offset, $current_limit);
    return array(
        '#type' => 'container',
        '#attributes' => array(),
        'content' => array(
            '#type' => 'markup',
            '#markup' => theme("mna_feed", array('feed_data' => $feed_data,
                                        'current_offset' => $current_offset,
                                        'current_limit' => $current_limit)),
            '#weight' => 0,
        ),
    );
}


// gets feed data for regular feed and raw feed
function _mnartist_profiles_get_feed_data($row_offset = null, $row_limit = null)  {

    // @TODO deal with user-not-logged-in case here
    if (!user_is_logged_in()) {
        return;
    }

    global $user;

    $row_offset = (is_null($row_offset)) ? 0 : intval($row_offset);
    $row_limit = (is_null($row_limit)) ? FEED_DEFAULT_ROW_LIMIT : $row_limit;

    // get users current user has flagged, put it
    // into a unique'd array
    $flagged_users = array();
    $flagged_stuff = flag_get_user_flags('user');
    if (isset($flagged_stuff['usercollections'])) {
        foreach ($flagged_stuff['usercollections'] as $thing) {
            $flagged_users[] = $thing->content_id;
        }
    }
    $flagged_users = array_unique($flagged_users);

    if (empty($flagged_users)) {
        return array();
    }

    $sql = "SELECT DISTINCT activity.type, activity.uid, activity.eid, activity.created, activity_messages.message FROM activity
            INNER JOIN activity_targets ON activity.aid = activity_targets.aid
            INNER JOIN activity_messages ON activity_targets.amid = activity_messages.amid
            WHERE ((activity.uid = :my_uid and activity_targets.uid = :my_uid) OR (activity.uid != :my_uid AND activity_targets.uid = 0))
            AND activity.uid in (:flagged_users)
            ORDER BY activity.created DESC";
    if ($row_limit !== null) {
        $sql .= " LIMIT $row_limit";
    }
    if ($row_offset !== null) {
        $sql .= " OFFSET $row_offset";
    }
    $result = db_query($sql, array(':flagged_users' => $flagged_users, ':my_uid' => $user->uid));

    // munge the data to send to the template, add user
    // picture uri's as you go
    $feed_data = array();
    foreach ($result as $row) {
        $context_object = new StdClass();
        $context_user = user_load($row->uid);
        $context_object->message = $row->message;
        $context_object->entity_id = $row->eid;
        $working_uri = (isset($context_user->picture->uri)) ? $context_user->picture->uri : variable_get('user_picture_default');
        $context_object->user_picture_uri = image_style_url('square_thumbnail', $working_uri);
        $context_object->update_timestamp = $row->created;
        $feed_data[] = $context_object;
    }

    return $feed_data;
}

// gives you either the collective name, or fullname, or username
// for a given uid
function mnartist_profiles_collective_or_fullname_or_username($uid, $prefer_full_name = false) {
    $context_user = user_load($uid);

    if (array_intersect(array('Organization'), array_values($context_user->roles))) {
        $context_org = profile2_load_by_user($uid, 'organization');
        if (isset($context_org->field_organization_name[LANGUAGE_NONE]) &&
            $context_org->field_organization_name[LANGUAGE_NONE][0]['value'] !== '') {
            return $context_org->field_organization_name[LANGUAGE_NONE][0]['value'];
        }
    } else {
        $context_profile = profile2_load_by_user($uid, 'main');
        if (isset($context_profile->field_pseudonym[LANGUAGE_NONE]) && $prefer_full_name !== true) {
            return $context_profile->field_pseudonym[LANGUAGE_NONE][0]['value'];
        } else if (isset($context_profile->field_full_name[LANGUAGE_NONE])) {
            $entity = field_collection_item_load($context_profile->field_full_name[LANGUAGE_NONE][0]['value']);
            if (isset($entity->field_last_name[LANGUAGE_NONE][0]['value'])) {
                $last_name = $entity->field_last_name[LANGUAGE_NONE][0]['value'];
                $full_name = (isset($entity->field_first_name[LANGUAGE_NONE][0]['value'])) ? $entity->field_first_name[LANGUAGE_NONE][0]['value']." $last_name" : $last_name;
                return $full_name;
            }
        }
    }
    return '';
}

function mnartist_profiles_get_sort_by_name($uid) {
    $context_user = user_load($uid);
    if (array_intersect(array('Organization'), array_values($context_user->roles))) {
        $context_org = profile2_load_by_user($uid, 'organization');
        if (isset($context_org->field_organization_name[LANGUAGE_NONE]) &&
            $context_org->field_organization_name[LANGUAGE_NONE][0]['value'] !== '') {
            return $context_org->field_organization_name[LANGUAGE_NONE][0]['value'];
        }
    } else {
        $context_profile = profile2_load_by_user($uid, 'main');
        if (isset($context_profile->field_pseudonym[LANGUAGE_NONE]) && $prefer_full_name !== true) {
            return $context_profile->field_pseudonym[LANGUAGE_NONE][0]['value'];
        } else if (isset($context_profile->field_full_name[LANGUAGE_NONE])) {
            $entity = field_collection_item_load($context_profile->field_full_name[LANGUAGE_NONE][0]['value']);
            if (isset($entity->field_last_name[LANGUAGE_NONE][0]['value'])) {
                return $entity->field_last_name[LANGUAGE_NONE][0]['value'];
            }
        }
    }
    return '';
}

// get all a user's roles from artworks they have submitted
function mnartist_profiles_get_artwork_roles_for_user($uid) {
    $all_roles = array();
    $user_artworks = mnartist_profiles_get_artworks_for_user($uid);

    if (!(empty($user_artworks))) {
        $artwork_ids = array();
        foreach ($user_artworks as $artwork_node) {
            $artwork_ids[] = $artwork_node->nid;
        }
        $sql = "SELECT DISTINCT field_roles_tid FROM field_revision_field_roles where entity_id IN (:target_nodes)";
        $result = db_query($sql, array(':target_nodes' => $artwork_ids));
        foreach ($result as $row) {
            if (isset($row->field_roles_tid)) {
                $term = taxonomy_term_load($row->field_roles_tid);
                $all_roles[] = $term->name;
            }
        }
    }
    return $all_roles;
}

// get all artwork nodes for a given user
function mnartist_profiles_get_artworks_for_user($uid) {
    // @TODO move artwork type into a constant?
    $sql = "SELECT * FROM node WHERE type = 'artwork' AND uid = :target_user";
    $result = db_query($sql, array(':target_user' => $uid));
    return $result->fetchAll();
}

function mnartist_profiles_resume_download($uid) {

    // pull in user global
    global $user;

    // check if the current user is the one whose resume data we're fetching,
    // or is an admin user
    if ($user->uid == $uid || in_array('administrator', $user->roles)) {

        $context_profile = profile2_load_by_user($uid, 'resume');

        // if we got a profile back...
        if ($context_profile != NULL && $context_profile != false) {
            $template_data = array();

            // for each of the profile fields
            foreach ($context_profile as $field_name => $field) {

                // get field metadata
                $field_info = field_info_field($field_name);
                $field_info_instances = field_info_instances('profile2', 'resume');
                $label = (isset($field_info_instances[$field_name])) ? $field_info_instances[$field_name]['label'] : '';

                // if the field is NOT a field collection, just stash its contents
                if (isset($field_info['type']) && $field_info['type'] != 'field_collection' && isset($field['und'])) {
                    $template_data[$field_name] = array(
                        'label' => $label,
                        'item' => $field['und']
                    );

                // or if it IS a field collection go a bit deeper (only deals with one
                // level of nesting here at this point)
                } else if (isset($field_info['type']) && $field_info['type'] == 'field_collection') {

                    $template_data[$field_name] = array(
                        'label' => $label,
                        'item' => array()
                    );
                    $items = (isset($field['und'])) ? $field['und'] : null;
                    if ($items !== null) {
                        foreach ($items as &$collection) {
                            $entity = field_collection_item_load($collection['value']);
                            $instances = field_info_instances('field_collection_item', $field_name);

                            $context_data = array();
                            foreach ($instances as $instance_field_name => $instance_field) {
                                $context_data[$instance_field_name] = array(
                                    'label' => $instances[$instance_field_name]['label'],
                                    'item' => (isset($entity->{$instance_field_name}['und'])) ? $entity->{$instance_field_name}['und'] : null
                                );
                            }
                            $template_data[$field_name]['item'][] = $context_data;
                        }
                    }
                }
            }

            // render the template with the data we just constructed,
            // and output it
            $output = theme("mna_resume_download", array(
                                'user_full_name' => mnartist_profiles_collective_or_fullname_or_username($uid),
                                'resume_data' => $template_data
                            )
                        );
        } else {
            $output = "No resume data for that user.";
        }
    } else {
        $output = "I'm sorry, you're not allowed to see that.";
    }
    drupal_add_css(drupal_get_path('theme', 'mnartists').'/css/resume-download.css');
    $render = array(
        '#type' => 'container',
        '#attributes' => array(),
        'content' => array(
            '#type' => 'markup',
            '#markup' => $output,
            '#weight' => 0,
        ),
    );
    return $render;
}

function mnartist_profiles_theme() {
    $themes = array();

    $themes['mna_my_stuff_menu'] = array(
        'template' => 'templates/mna-my-stuff-menu',
        'variables' => array(
            'links' => array()
        )
    );

    $themes['mna_resume_download'] = array(
        'template' => 'templates/mna-resume-download',
        'variables' => array(
            'resume_data' => array()
        )
    );

    $themes['mna_feed'] = array(
        'template' => 'templates/mna-feed',
        'variables' => array(
            'feed_data' => array()
        )
    );

    $themes['mna_feed_raw'] = array(
        'template' => 'templates/mna-feed-raw',
        'variables' => array(
            'feed_data' => array()
        )
    );

    $themes['mna_user_profile'] = array(
        'template' => 'templates/mna-user-profile',
        'variables' => array(
            'user' => new StdClass(),
            'fieldset' => array(),
            'top_name' => '',
        )
    );

    $themes['mna_user_collections'] = array(
        'template' => 'templates/mna-user-collections',
        'variables' => array()
    );

    $themes['mna_user_welcome'] = array(
        'template' => 'templates/mna-user-welcome',
        'variables' => array()
    );

    return $themes;
}

/**
 * Form alter to prepopulate the user registration form with role types
 */
function mnartist_profiles_form_user_register_form_alter(&$form, &$form_state, $form_id) {
    $form['account_type'] = array(
        '#type'     => 'select',
        '#title'    => t('Registration Type'),
        '#options'  => array(
            'public'    => t('Public'),
            'artist'    => t('Artist'),
            'org'       => t('Organization'),
        ),
        '#required' => TRUE,
        '#weight'   => 100,
    );

    // customizing registration form field help text
    $form['account']['name']['#description'] = t('Create a username that you&rsquo;ll use to log into your account.');
    $form['account']['mail']['#description'] = t('Use your most current email address. Don&rsquo;t worry, it doesn&rsquo;t have to match your old account. You&rsquo;ll be able to migrate later.');
    $form['mailchimp_lists']['mailchimp_mnartists_org']['subscribe']['#description'] = t('Check this option to receive twice-monthly updates from mnartists.org, featuring the newest articles, opportunities and events.');
    $form['account_type']['#description'] = t('Basic Account: Customize the site to your artistic interests without creating a public profile<br>Artist Profile: All of the above, plus create a public profile with your artwork, information, and resume<br>Organization Profile: Create a public profile containing information about your organization<br>Only one account type per email.');

    $form['#submit'][] = 'mnartist_profiles_form_user_register_submit';
}

function mnartist_profiles_form_user_register_submit(&$form, &$form_state) {
    global $user;

    // Determine what type of account the user registered
    switch($form_state['values']['account_type']) {
        case 'public':
            $rid = PUBLIC_ROLE;
            $goto = 'main';
            break;
        case 'artist':
            $rid = ARTIST_ROLE;
            $goto = 'main';
            break;
        case 'org':
            $rid = ORG_ROLE;
            $goto = 'organization';
            break;
    }

    // If an rid is assigned, assign that role to the user
    if (isset($rid)) {
        user_multiple_role_edit(array($user->uid), 'add_role', $rid);
    }


    // Redirect to the users profile edit page
    // not doing this anymore, we're redirecting to migrate
    // in register module instead
    // drupal_goto('user/' . $user->uid . '/edit/' . $goto);
}

/**
 * Implementes hook_field_extra_fields()
 */
function mnartist_profiles_field_extra_fields() {
    $extra['user']['user'] = array(
        'display' => array(
            'mnartist_profiles_artworks' => array(
                'label' => t('MNArtist Profiles: Artist Artworks'),
                'description' => 'Slideshow displaying a users artworks',
                'weight' => 100,
            ),
            'mnartist_profiles_collections' => array(
                'label' => t('MNArtist Profiles: Collections'),
                'description' => 'A list of collections by content type',
                'weight' => 100,
            ),
        ),
    );

    return $extra;
}

/**
 * Implements hook_user_view()
 */
function mnartist_profiles_user_view($account, $view_mode, $langcode) {

    global $user;

    // don't allow access if target user is set to private,
    // and we're not an admin and we're not the target user
    if ($user->uid !== $account->uid &&
        !in_array('administrator', array_values($user->roles)) &&
        isset($account->field_user_global_privacy_flag) &&
        isset($account->field_user_global_privacy_flag[LANGUAGE_NONE]) &&
        $account->field_user_global_privacy_flag[LANGUAGE_NONE][0]['value'] === '1')  {

        drupal_access_denied();
        drupal_exit();

    } else {
        // Show an artists artworks
        $view = views_get_view('artist_artworks');
        $view->dom_id = 'artist-artworks';
        $view->args[] = arg(1);
        $view->execute();

        $account->content['mnartist_profiles_artworks'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Artworks'),
            '#markup' => $view->render('block_1'),
        );

        // Build an artists collections by node type
        $types = node_type_get_types();
        $content = '';
        $account->content['mnartist_profiles_collections'] = array(
            '#type' => 'user_profile_category',
            '#title' => t('Collections'),
        );

        foreach($types as $type) {

            $view = views_get_view('collections');
            $view->dom_id = 'artist-collections-' . $type->type;
            $view->args[] = arg(1);
            $view->args[] = $type->type;
            $view->execute();

            if (!$view->total_rows) continue;

            $content = '<h3>' . $type->name . '</h3>';
            $content .= $view->render();
            $account->content['mnartist_profiles_collections'][$type->type] = array(
                '#type' => 'user_profile_item',
                '#title' => $type->name,
                '#markup' => $view->render(),
            );

        }
    }
}

function mnartist_profiles_preprocess_user_profile(&$vars) {
    // hide the summary view
    unset($vars['user_profile']['summary']);
}

/**********************************
 * Utility functions
 */
function _get_role($user = NULL) {
    if (!$user) {
        global $user;
    }

    if (isset($user->roles[ARTIST_ROLE])) {
        return 'artist';
    } else if (isset($user->roles[ORG_ROLE])) {
        return 'org';
    } else {
        return 'public';
    }
}

function _mnartist_profile_block_visibility() {
    global $user;

    if ((arg(0) == "user" && in_array(arg(2), array("edit", "mailchimp"))) ||
        (in_array(arg(0), array('opportunities', 'applications'))) ||
        (!user_is_logged_in() && arg(0) == "user" && (is_null(arg(1)) || in_array(arg(1), array("password", "register")))) ||
        (arg(0) == "node" && in_array(arg(1), array("edit", "add"))) ||
        (arg(0) == "node" && in_array(arg(2), array("edit"))) ||
        (arg(0) == "user" && in_array(arg(1), array("saved-filters", "feed", "welcome"))) ||
        (user_is_logged_in() && (arg(0) == "user" && in_array(arg(2), array("flags")) && flag_lists_is_owner('edit', arg(4)))) ||
        (user_is_logged_in() && (arg(0) == "user" && in_array(arg(2), array("flags")) && !is_numeric(arg(3)))) ||
        (user_is_logged_in() && (arg(0) == "flags" && flag_lists_is_owner('edit', arg(2))))
        ) {
        return true;
    }

    return false;
}


function mnartist_profiles_block_info() {
    return array(
        'mna_my_stuff' => array(
            'info' => 'My Stuff',
            'cache' => DRUPAL_NO_CACHE,
            'visibility' => BLOCK_VISIBILITY_PHP,
            'pages' => '<?php return _mnartist_profile_block_visibility(); ?>'
        ),

        'mna_user_profile' => array(
            'info' => t('User Profile'),
            'cache' => DRUPAL_NO_CACHE,
            'visibility' => BLOCK_VISIBILITY_PHP,
            'pages' => '<?php return _mnartist_profile_block_visibility(); ?>'
        ),

        'mna_user_collections' => array(
            'info' => t('User Collections'),
            'cache' => DRUPAL_NO_CACHE,
            'visibility' => BLOCK_VISIBILITY_PHP,
            'pages' => '<?php return _mnartist_profile_block_visibility(); ?>'
        ),

        'mna_all_artworks_link' => array(
            'info' => t('All Artworks Link'),
            'cache' => DRUPAL_NO_CACHE,
            'visibility' => BLOCK_VISIBILITY_PHP,
            'pages' => '<?php return _mnartist_profile_block_visibility(); ?>'
        )

        // @TODO next add block, start with just a list of user's collections, replace that in current thing
    );
}

function mnartist_profiles_block_view($delta = '') {
    switch($delta) {
        case 'mna_my_stuff':
            $block['subject'] = 'My Stuff';
            $block['content'] = _mnartist_profile_my_stuff();
        break;
        case 'mna_user_profile':
            $block['subject'] = 'User Profile';
            $block['content'] = _mnartist_profile_user_profile();
        break;
        case 'mna_user_collections':
            $block['subject'] = 'User Collections';
            $block['content'] = _mnartist_profile_user_collections();
        break;
        case 'mna_all_artworks_link':
            $block['subject'] = 'All Artworks Link';
            $block['content'] = _mnartist_profile_all_artworks_link();
        break;
    }

    return $block;
}

function _mnartist_profile_my_stuff() {
    global $user;
    $output = "";

    if (!user_is_logged_in()) {
        $userBlock = module_invoke('user', 'block', 'view', 'login');
        $output = $userBlock['content'];

        $links = array();
        $links[] = l("Login", "user");
        $links[] = l("Register", "user/register");
        $links[] = l("Forgot Password", "user/password");

        $output .= theme_item_list(array(
            'items' => $links,
            'title' => null,
            'type' => 'ul',
            'attributes' => array(
                'class' => array('my-stuff-menu', 'login-menu')
            )
        ));
    } else {
        $links = array();

        $links[] = l("Feed", "user/feed");

        $account = user_load($user->uid);
        $flagLists = flag_lists_get_user_flags(NULL, $account);
        $flags = array();
        $flags[] = l('Start A New Collection',
                    "flag-lists/add/artwork",
                    array(
                        'query' => array(
                            'destination' => "user/{$user->uid}/flags/lists"// @TODO this would be even better if it could also take you to the specific list you just created
                        )
                    )
                );
        foreach($flagLists as $flag) {
            $flags[] = l($flag->title, "user/{$user->uid}/flags/lists/{$flag->fid}");
        }
        $links[] = array(
            'data' => l("Collections", "user/{$user->uid}/flags/lists"),
            'children' => $flags
        );
        $links[] = array(
            'data' => l("Applications", "applications"),
        );
        $links[] = array(
            'data' => l("Saved Filters", "user/saved-filters"),
            'children' => _mnartist_filter_view_filter()
        );

        // check for artist role
        $links[] = l("Account", "user/{$user->uid}/edit");
        if (_get_role($user) === 'artist') {
            $links[] = l("Profile", "user/{$user->uid}/edit/main") . l("View", "user/{$user->uid}", array("attributes" => array("class" => array("user-view"))));
        }
        if (_get_role($user) === 'org' || in_array('administrator', array_values($user->roles))) {
            $links[] = l("Organization", "user") . l("edit", "user/{$user->uid}/edit/organization", array("attributes" => array("class" => array("user-view"))));
        }
        if (_get_role($user) === 'artist') {
            $links[] = l("Résumé", "user/{$user->uid}/edit/resume", array()) . l("View", "user/{$user->uid}/resume/download", array("attributes" => array("class" => array("user-view"), "target" => "_blank")));
        }

        $renderedLinks = theme_item_list(array(
            'items' => $links,
            'title' => null,
            'type' => 'ul',
            'attributes' => array(
                'class' => array('my-stuff-menu')
            )
        ));
        $editItems = array();
        if (_get_role($user) == 'artist' || in_array('administrator', array_values($user->roles))) {
            $editItems[] = l("Add Artwork", "node/add/artwork");
        }
        if (count(array_intersect(array('administrator', 'Artist', 'Organization'), array_values($user->roles)))) {
            $editItems[] = l("Add Event", "node/add/event");
        }
        if (in_array('administrator', array_values($user->roles)) ||
            in_array('Organizational Admin', array_values($user->roles))) {
            $editItems[] = l("Add Opportunity", "node/add/opportunity") . l("manage", "opportunities", array("attributes" => array("class" => array("user-view"))));
        }
        if (in_array('administrator', array_values($user->roles))) {
            $editItems[] = l("Add Venue", "node/add/venue");
            $editItems[] = l("Add Article", "node/add/article");
        }

        $editItems[] = l("Logout", "user/logout");

        $editLinks = theme_item_list(array(
            'items' => $editItems,
            'title' => null,
            'type' => 'ul',
            'attributes' => array(
                'class' => array('my-stuff-edit-menu')
            )
        ));

        $output = theme("mna_my_stuff_menu", array(
            'links' => $renderedLinks,
            'editLinks' => $editLinks
        ));
    }
    return $output;
}

function _mnartist_profile_all_artworks_link() {
    $user_id = arg(1);
    $context_user = user_load($user_id);
    if($context_user) {
        $link_fragment_arr = array();
        $link_fragment_arr[] = '<div class="all-artworks">';
        $link_fragment_arr[] = "<a href='/community?content[artwork]=1&global_search=\"".check_plain(mnartist_profiles_collective_or_fullname_or_username($context_user->uid))."\"'>All Artworks</a>";
        $link_fragment_arr[] = '</div>';
        return implode('', $link_fragment_arr);
    }
}

function _mnartist_profile_user_collections() {
    $user_id = arg(1);
    $collection_items_limit = 4;

    if (is_numeric($user_id)) {
        $context_user = user_load($user_id);
        $collections_data = array();

        // calls mnartist_flag_lists_privacy_flag_lists_get_user_flags instead of
        // flag_lists_get_user_flags so that we get results filtered for privacy
        $user_collections = mnartist_flag_lists_privacy_flag_lists_get_user_flags(NULL, $context_user);
        foreach ($user_collections as $collection) {

            // @TODO add public check, once that's in here
            $fid = $collection->fid;
            $content = flag_lists_get_flagged_content($fid, $user_id);
            $context_items = array();
            foreach ($content as $index => $item) {
                if ($index > $collection_items_limit - 1) { break ; }
                $context_node = node_load($item->content_id);

                if (!is_null($context_node) && $context_node !== false) {
                    $context_item = new StdClass;
                    $context_item->title = $context_node->title;
                    $context_item->uri = "/node/{$context_node->nid}";
                    if ($context_node->type === 'artwork') {
                        if (isset($context_node->field_media['und'])) {
                            // check what kind of media we're dealing with
                            $working_uri = $context_node->field_media['und'][0]['uri'];
                            $scheme = file_uri_scheme($working_uri);
                            switch ($scheme) {
                              case ('soundcloud'):
                              case ('youtube'):
                              case ('vimeo'):
                                $wrapper = file_stream_wrapper_get_instance_by_uri($working_uri);
                                $working_uri = $wrapper->getLocalThumbnailPath();
                                break;
                              case ('public'):
                                break;
                            }
                            $context_item->image_uri = image_style_url('square_thumbnail', $working_uri);
                        } else {
                            $context_item->image_uri = null;
                        }
                    } else {
                        $context_item->image_uri = (isset($context_node->field_images['und'])) ? image_style_url('square_thumbnail', $context_node->field_images['und'][0]['uri']) : null;
                    }

                    // only add this item if we have gotten an image
                    if (!is_null($context_item->image_uri)) {
                        $context_items[] = $context_item;
                    }
                }
            }

            $context_collection = new StdClass;
            $context_collection->title = $collection->title;
            $context_collection->uri = "/user/$user_id/flags/lists/{$collection->fid}";
            $context_collection->items = $context_items;
            $context_collection->has_more = (count($content) > $collection_items_limit);

            if (!empty($context_collection->items)) {
                $collections_data[] = $context_collection;
            }
        }
        return theme('mna_user_collections', array('collections' => $collections_data));
    }
}

function _mnartist_profile_user_profile() {
    $output = "";
    $user = user_load(arg(1));
    $fieldset = array();
    if(isset($user->content['profile_main']))
    {
        $main_array = array_values($user->content['profile_main']['view']['profile2']);
        $main_pid = array_keys($user->content['profile_main']['view']['profile2']);
        $main = array_shift($main_array);
        foreach($main as $data)
        {
            if(is_array($data))
            {
                if(isset($data['#theme']))
                {
                    $field_data = field_info_field($data['#field_name']);
                    $privacy = (bool) _profile2_field_privacy_value($field_data['id'], $main_pid);
                    if($privacy != '1')
                    {
                        foreach($data['#items'] as $key => $value)
                        {
                            $fieldset[$data['#field_name']][] = array(
                                'name' => $data['#field_name'],
                                'value' => $data[$key]
                            );
                        }
                    }
                }
            }
        }
    } else if (isset($user->content['profile_organization'])) {
        $org_array = array_values($user->content['profile_organization']['view']['profile2']);
        $org_pid = array_keys($user->content['profile_organization']['view']['profile2']);
        $org = array_shift($org_array);
        foreach($org as $data)
        {
            if(is_array($data)) {
                if(isset($data['#theme']))
                {
                    $field_data = field_info_field($data['#field_name']);
                    $privacy = (bool) _profile2_field_privacy_value($field_data['id'], $org_pid);
                    if($privacy != '1')
                    {
                        foreach($data['#items'] as $key => $value)
                        {
                            $fieldset[$data['#field_name']][] = array(
                                'name' => $data['#field_name'],
                                'value' => $data[$key]
                            );
                        }
                    }
                }
            }
        }
    } else {
        $main = NULL;
    }

    if(isset($user->content['profile_resume']))
    {
        $res_array = array_values($user->content['profile_resume']['view']['profile2']);
        $res_pid = array_keys($user->content['profile_resume']['view']['profile2']);
        $res = array_shift($res_array);
        foreach($res as $data)
        {
            if(is_array($data))
            {
                if(isset($data['#theme']))
                {
                    $field_data = field_info_field($data['#field_name']);
                    $privacy = (bool) _profile2_field_privacy_value($field_data['id'], $res_pid);
                    if($privacy != '1')
                    {
                        foreach($data['#items'] as $key => $value)
                        {
                            $fieldset[$data['#field_name']][] = array(
                                'name' => $data['#field_name'],
                                'value' => $data[$key]
                            );
                        }
                    }
                }
            }
        }
    } else {
        $res = NULL;
    }
    if(isset($fieldset['field_full_name']))
    {
        $fsvalue = array_values($fieldset['field_full_name'][0]['value']['entity']['field_collection_item']);
        $fs = array_shift($fsvalue);
        $top_name = '';
        $top_name .= (isset($fs['field_first_name'])) ? $fs['field_first_name'][0]['#markup'] : '';
        $top_name .= (isset($fs['field_last_name'])) ? ' '.$fs['field_last_name'][0]['#markup'] : '';
    } else {
        if(isset($fieldset['field_pseudo']))
        {
            $top_name = 'toast';// @TODO ???
        } else {
            $top_name = $user->name;
        }
    }

    return theme("mna_user_profile", array('context_user' => $user,
                                        'fieldset' => $fieldset,
                                        'top_name' => $top_name,
                                        'fsvalue' => isset($fsvalue) ? $fsvalue : null,
                                        'fs' => isset($fs) ? $fs : null));
}

function mnartist_profiles_form_alter(&$form, $form_state, $form_id) {
    global $user;

    if ($form_id == 'user_profile_form') {

        if (isset($form["#user_category"]) && $form["#user_category"] == 'main') {

            // include main profile instructions
            $form['privacy_instructions']['#markup'] = "<div class='privacy-instructions'>Manage information that will appear on your public profile.<br>Help our funders learn more about our artistic communities by filling out as many fields as possible, even if you keep them private.</div>";
            $form['privacy_instructions']['#weight'] = -100;

        } else if (isset($form["#user_category"]) && $form["#user_category"] == 'resume') {

            $form['resume_instructions']['#markup'] = "<div class='privacy-instructions'>Use this resume builder to manage and save your ongoing artistic experience. <br> Find data imported from your resume on the old mnartists.org stored in its entirety under the Imported Data field below.  Please take a moment to copy and paste this text in the new form, so that your new resume can be easily displayed and downloaded.</div>";
            $form['resume_instructions']['#weight'] = -100;

            // include form js
            drupal_add_js(drupal_get_path('module', 'mnartist_profiles') .'/js/resume_form.js');

            $uid = $form['#user']->uid;
            // @TODO is this test acceptable? or should it be tied to a specific user permission?
            if ($user->uid == $uid || in_array('administrator', $user->roles)) {
                $form['resume_download'] = array(
                    '#markup' => "<a href='/user/$uid/resume/download'>download resume</a>"
                );
            }
        }
        $form['account']['status']['#options'][0] = "Inactive";
        $form['picture']['#title'] = "Profile Picture";
        $form['picture']['picture_upload']['#title'] = "Upload Profile Picture";

        // add link to nl sub to user form at bottom of account form
        $is_account = arg(3);
        $is_account = is_null($is_account);
        if ($is_account) {
            $form['mailchimp_link']['#markup'] = "<a href='/user/{$user->uid}/mailchimp' class='newsletter-edit'>Edit My Newsletter Subscriptions</a>";
            $form['mailchimp_link']['#weight'] = 100;
        }

    } else if (in_array($form_id, array('article_node_form', 'artwork_node_form', 'community_node_form', 'event_node_form', 'program_node_form', 'venue_node_form')) &&
        !(in_array('administrator', array_values($user->roles)))) {
            // disable additional options if we're on the appropriate
            // node edit forms and we're not an admin user
            _mnartist_profiles_disable_vertical_tabs($form);

            // leaving this in here since we *might* want to keep it?
            // if (isset($account->field_user_global_privacy_flag) &&
            //     $account->field_user_global_privacy_flag[LANGUAGE_NONE][0]['value'] == '1') {
            //         // then set published to false and type to hidden
            //         $form['options']['status']['#default_value'] = '0';
            //         $form['options']['status']['#type'] = 'hidden';
            // }
    }
}

function mnartist_profiles_user_login (&$edit, $account) {
    $edit['redirect'] = 'user/feed';
}

function mnartist_profiles_form_venue_node_form_alter(&$form, &$form_state, $form_id) {
    global $user;

    // we only want administrator users to be able to
    // publish venues, so if the context user is NOT
    // an admin, 'take care of' field_public.
    if (!in_array('administrator', $user->roles)) {
        $form['field_public']['#access'] = FALSE;
    }
}

function _mnartist_profiles_disable_vertical_tabs(&$form){
    if(isset($form['additional_settings']['#type']) && ($form['additional_settings']['#type'] === 'vertical_tabs')) {
        $form['additional_settings']['#access'] = FALSE;
    }
}


// entity property info alter and callbacks to make a bunch
// of nested and composed fields accessible to solr
function mnartist_profiles_entity_property_info_alter(&$info) {

    $info['user']['bundles']['user']['properties']['near_me_latlng'] = array(
        'type' => 'string',
        'label' => t('User Latitude/Longitude'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_latlng_getter_callback',
    );
    $info['user']['bundles']['user']['properties']['mnartist_profile2_search'] = array(
        'type' => 'list<text>',
        'label' => t('All Profile Content'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_profile2_search_getter_callback',
    );


    // this doesn't *really* belong here, but I guess
    // this is the best of a bunch of bad options for placement
    $info['node']['bundles']['event']['properties']['near_me_latlng'] = array(
        'type' => 'string',
        'label' => t('Event Latitude/Longitude'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_latlng_getter_callback',
    );

    // creating a common field between users and nodes that an
    // all content search can be sorted on
    $info['user']['bundles']['user']['properties']['sort_by_name'] = array(
        'type' => 'string',
        'label' => t('Sort By Name'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_sort_by_name_callback',
    );
    $info['node']['bundles']['artwork']['properties']['sort_by_name'] = array(
        'type' => 'string',
        'label' => t('Sort By Name'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_sort_by_name_callback',
    );
    $info['node']['bundles']['article']['properties']['sort_by_name'] = array(
        'type' => 'string',
        'label' => t('Sort By Name'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_sort_by_name_callback',
    );
    $info['node']['bundles']['event']['properties']['sort_by_name'] = array(
        'type' => 'string',
        'label' => t('Sort By Name'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_sort_by_name_callback',
    );


    // creating a common date sort field between users and nodes
    $info['user']['bundles']['user']['properties']['sort_by_date'] = array(
        'type' => 'date',
        'label' => t('Sort By Date'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_sort_by_date_callback',
    );
    $info['node']['bundles']['artwork']['properties']['sort_by_date'] = array(
        'type' => 'date',
        'label' => t('Sort By Date'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_sort_by_date_callback',
    );
    $info['node']['bundles']['article']['properties']['sort_by_date'] = array(
        'type' => 'date',
        'label' => t('Sort By Date'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_sort_by_date_callback',
    );
    $info['node']['bundles']['event']['properties']['sort_by_date'] = array(
        'type' => 'date',
        'label' => t('Sort By Date'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_sort_by_date_callback',
    );


    // index flag counts for nodes
    // this (and the above) should move into the community module
    $info['node']['bundles']['artwork']['properties']['flags_count'] = array(
        'type' => 'integer',
        'label' => t('Flags Count'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_flags_count_callback',
    );
    $info['node']['bundles']['article']['properties']['flags_count'] = array(
        'type' => 'integer',
        'label' => t('Flags Count'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_flags_count_callback',
    );
    $info['node']['bundles']['event']['properties']['flags_count'] = array(
        'type' => 'integer',
        'label' => t('Flags Count'),
        'sanitized' => TRUE,
        'getter callback' => 'mnartist_profiles_flags_count_callback',
    );
}


function mnartist_profiles_sort_by_date_callback($item) {
    if (isset($item->type)) {
        // if this is an event, try to use start date,
        // otherwise date changed
        if ($item->type === 'event') {
            if (isset($item->field_date['und'])
                && isset($item->field_date['und'][0]['value'])) {
                return $item->field_date['und'][0]['value'];
            } else {
                return $item->created;
            }
        // or if this is a non-event node, just use
        // date changed
        } else {
            return $item->created;
        }
    // and if it's a user, use date of birth (or today? if no value is in there?)
    } else {
        $main_profile = profile2_load_by_user($item->uid, 'main');
        if (isset($main_profile->field_birthdate['und'])) {
            return $main_profile->field_birthdate['und'][0]['value'];
        }
        return new DateTime();
    }
}

function mnartist_profiles_profile2_search_getter_callback($item) {
    $return_terms = array();
    $main_profile_terms = _mnartist_profiles_profile2_profiles_as_indexable(profile2_load_by_user($item->uid, 'main'));
    $resume_terms = _mnartist_profiles_profile2_profiles_as_indexable(profile2_load_by_user($item->uid, 'resume'));
    $org_terms = _mnartist_profiles_profile2_profiles_as_indexable(profile2_load_by_user($item->uid, 'organization'));
    $return_terms = array_merge($main_profile_terms, $resume_terms, $org_terms);
    return $return_terms;
}

// util for getting profile2 profiles as cleaned up arrays for
// indexing above
function _mnartist_profiles_profile2_profiles_as_indexable($profile) {
    $return_arr = array();
    if ($profile != NULL && $profile != false) {
        foreach ($profile as $field_name => $field) {
            $field_info = field_info_field($field_name);
            $field_id = $field_info['id'];
            $privacy = (bool) _profile2_field_privacy_value($field_id, $profile->pid);

            if (isset($field_info['type']) && $field_info['type'] != 'field_collection') {
                if ($privacy !== true) {
                    if (isset($field['und']) && !empty($field['und'][0]['safe_value'])) {
                        $return_arr[] = strip_tags($field['und'][0]['safe_value']);
                    }
                }
            } else if (isset($field_info['type']) && $field_info['type'] == 'field_collection') {
                $items = (isset($field['und'])) ? $field['und'] : null;
                if ($items !== null) {
                    foreach ($items as &$collection) {
                        $entity = field_collection_item_load($collection['value']);
                        $instances = field_info_instances('field_collection_item', $field_name);
                        foreach ($instances as $instance_field_name => $instance_field) {
                            $instance_field_info = field_info_field($instance_field_name);
                            $instance_field_id = $instance_field_info['id'];
                            $collection_field_privacy = (bool) _profile2_field_privacy_value($instance_field_id, $profile->pid);
                            if ($privacy !== true || true) {
                                if (isset($instance_field['und']) && !empty($instance_field['und'][0]['safe_value'])) {
                                    $return_arr[] = strip_tags($instance_field['und'][0]['safe_value']);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $return_arr;
}

function mnartist_profiles_search_api_data_type_info() {
  return array(
    'location' => array(
      'name' => t('Latitude/longitude'),
      'fallback' => 'string',
    ),
  );
}

function mnartist_profiles_flags_count_callback($item) {
    $sql = "SELECT count FROM flag_lists_counts WHERE content_id = $item->nid";
    $result = db_query($sql);
    $count = 0;
    foreach ($result as $row) {
        $count += $row->count;
    }
    return $count;
}

function mnartist_profiles_latlng_getter_callback($item) {

    $search_string = '';

    if (isset($item->type)) {
        // if this is a node, specifically an event,
        // try to get its zip
        if ($item->type === 'event' && isset($item->field_venue['und'])) {
            $venue = node_load($item->field_venue['und'][0]['target_id']);
            if ($venue->field_zip['und']) {
                $search_string = $venue->field_zip['und'][0]['value'];
            }
        }
    } else {
        // this is a user, get search string from module method
        $search_string = mnartist_profiles_get_geocoding_search_string_for_uid($item->uid);
    }

    // if we have a search string, try to geocode it
    if ($search_string && $search_string !== '') {
        $coords_array = array();
        $point = geocoder('google', $search_string);
        try {
            if ($point) {
                $geoJSON = $point->out('json');
                $parsedPoint = json_decode($geoJSON);
                $lat = $parsedPoint->coordinates[1];
                $long = $parsedPoint->coordinates[0];
            }
        } catch (Exception $ex) {
            watchdog('mnartist_profiles', 'Geocoding failed during solr indexing: '.$ex->message, WATCHDOG_ERROR);
        }

        if (isset($parsedPoint->coordinates)) {
            $coords_array = array("$lat,$long");
        }
        return $coords_array;
    }
    return null;
}


function mnartist_profiles_sort_by_name_callback($item) {
    if (isset($item->type)) {
        return $item->title;
    } else {
        return mnartist_profiles_get_sort_by_name($item->uid);
    }
}

function mnartist_profiles_get_geocoding_search_string_for_uid($uid) {

    $search_string = false;
    $main_profile = profile2_load_by_user($uid, 'main');
    if (isset($main_profile)) {
        $search_string = '';
        if (isset($main_profile->field_address['und']) &&
            isset($main_profile->field_city['und']) &&
            isset($main_profile->field_state['und']) &&
            isset($main_profile->field_zip['und'])) {

            $address = $main_profile->field_address['und'][0]['value'];
            $city = $main_profile->field_city['und'][0]['value'];
            $state = $main_profile->field_state['und'][0]['value'];
            $zip = $main_profile->field_zip['und'][0]['value'];
            $search_string = "$address, $city, $state, $zip";

        } else if (isset($main_profile->field_zip['und'])) {
            $search_string = $main_profile->field_zip['und'][0]['value'];
        }
    }
    return $search_string;
}

function mnartist_profiles_search_api_index_items_alter(array &$items, SearchApiIndex $index) {

    // if a user has marked their account as private, don't
    // index it, and if a private user owns a node don't index
    // that either
    if ($index->machine_name === USER_INDEX) {
        foreach($items as $id => $item){
            if(isset($item->field_user_global_privacy_flag) &&
                $item->field_user_global_privacy_flag[LANGUAGE_NONE][0]['value'] === '1') {
                unset($items[$id]);
            }
        }
    } else if ($index->machine_name === NODE_INDEX) {
        foreach($items as $id => $item){
            $node_author = user_load($item->uid);
            if(isset($node_author->field_user_global_privacy_flag) &&
                $node_author->field_user_global_privacy_flag[LANGUAGE_NONE][0]['value'] === '1') {
                unset($items[$id]);
            }
        }
    }

}
