<?php

/**
 * Implements hook_menu().
 *
 */
function mn_ap_menu() {
  $items['opportunity/%/apply'] = array(
    'title' => 'Apply',
    'page callback' => 'mn_ap_apply',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
    'file' => 'mn_ap.apply.inc',
  );
  $items['opportunity/%/apply/ajax'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'ap_ajax_callback',
    'access callback' => 'user_is_logged_in',
    'access arguments' => array('access content'),
  );
  $items['opportunity/%/submissions'] = array(
    'title' => 'Submissions',
    'page callback' => 'mn_ap_submission',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1),
    'file' => 'mn_ap.submission.inc',
  );
  $items['opportunity/%/submission/%'] = array(
    'title' => 'Applicant Review',
    'page callback' => 'mn_ap_review',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1,3),
    'file' => 'mn_ap.review.inc',
  );
  $items['opportunity/%/submission/%/resume'] = array(
    'title' => 'Applicant Resume',
    'page callback' => 'mn_ap_resume',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1,3),
    'file' => 'mn_ap.resume.inc',
  );
  $items['opportunity/%/submission/%/admin'] = array(
    'title' => 'Admin Applicant View',
    'page callback' => 'mn_ap_admin',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(1,3),
    'file' => 'mn_ap.admin.inc',
  );
  $items['opportunity/%/submissions/%/xls/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'ap_submissions_xls',
    'page arguments' => array(1,3,5),
    'access callback' => 'user_is_logged_in',
    'access arguments' => array('access content'),
  );
  $items['opportunity/%/apply/submit'] = array(
    'title' => 'Submit',
    'type' => MENU_CALLBACK,
    'page callback' => 'ap_submit_form',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function mn_ap_theme() {
  return array(
    'mn_ap_apply' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-ap-apply',
    ),
    'mn_ap_submissions' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-ap-submissions',
    ),
    'mn_ap_admin' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-ap-admin',
    ),
    'mn_ap_review' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-ap-review',
    ),
    'mn_ap_resume' => array(
      'variables' => array('rows' => array()),
      'template' => 'mn-ap-resume',
    )
  );
}

function mn_ap_get_ap_artworks($nid, $uid) {
  $ap_artworks = '';
  $results = db_select('op_artworks', 'op')
    ->fields('op')
    ->condition('nid', $nid, '=')
    ->condition('uid', $uid, '=')
    ->execute()
    ->fetchAll();
  if ($results) {
    foreach ($results as $result) {
      if ($result->fid) {
        $ap_artworks[$result->vid] =  $result->fid;
      }
    }
  }
  return $ap_artworks;
}

/**
 * Submit form for the op_applications table
 * Uploads files from custom  upload fields
 */
function ap_submit_form() {
  global $user;
  $title = $_POST['title'];
  $nid = $_POST['nid'];
  $uid = $user->uid;
  $name = $user->name;
  $ap_folder = $nid;
  $user_folder = '/' . $uid;
  $ap_folder_path = variable_get('file_public_path', conf_path() . '/files/opportunity/' . $ap_folder);
  $user_folder_path = $ap_folder_path . $user_folder;

  $reopen = isset($_POST['reopen']) ? $_POST['reopen'] : 0;
  // if this is a reopen application get previous artwork data
  if ($reopen == 1) {
    $previous_artworks = mn_ap_get_ap_artworks($nid, $uid);
  }

  $input = array(
      'nid' => $nid,
      'uid' => $uid,
      'first_name' => $_POST['first_name'],
      'last_name' => $_POST['last_name'],
      'email' => $_POST['email'],
      'phone' => $_POST['phone'],
      'address' => $_POST['address'],
      'city' => $_POST['city'],
      'state' => $_POST['state'],
      'zip' => $_POST['zip'],
      'website' => !empty($_POST['website']) ? $_POST['website'] : '',
      'gender' => !empty($_POST['gender']) ? $_POST['gender'] : '',
      'age' => !empty($_POST['age']) ? $_POST['age'] : '0',
      'ethnicity' => !empty($_POST['ethnicity']) ? $_POST['ethnicity'] : '',
      'county' => !empty($_POST['county'])  ? $_POST['county'] : '',
      'country' => !empty($_POST['country']) ? $_POST['country'] : '',
      'bio' => !empty($_POST['bioEditor']) ? $_POST['bioEditor'] : '',
      'statement' => !empty($_POST['statementEditor']) ? $_POST['statementEditor'] : '',
      'proposal' => !empty($_POST['proposalEditor']) ? $_POST['proposalEditor'] : '',
      'field1' => !empty($_POST['field1Editor']) ? $_POST['field1Editor'] : '',
      'field2' => !empty($_POST['field2Editor']) ? $_POST['field2Editor'] : '',
      'field3' => !empty($_POST['field3Editor']) ? $_POST['field3Editor'] : '',
      'field4' => !empty($_POST['field4Editor']) ? $_POST['field4Editor'] : '',
      'complete' => 1,
      'reopen' => 0
  );

  //create application folder if doesn't exist
  if (!file_exists($ap_folder_path)) {
    file_prepare_directory($ap_folder_path, $options = FILE_CREATE_DIRECTORY);
    //mkdir($ap_folder_path, 0777, true);
  }
  //create user folder if doesn't exist
  if (!file_exists($user_folder_path)) {
    file_prepare_directory($user_folder_path, $options = FILE_CREATE_DIRECTORY);
    //mkdir($user_folder_path , 0777, true);
  }

  if (!empty($_POST['resumeMarkup'])) {
    if (file_prepare_directory($ap_folder_path, $options = FILE_MODIFY_PERMISSIONS) && file_prepare_directory($user_folder_path, $options = FILE_MODIFY_PERMISSIONS)) {
      //$filepath = str_replace($GLOBALS['base_url'], "", file_create_url('resume'));

      $file = "resume.html";
      file_unmanaged_save_data($_POST['resumeMarkup'], "$user_folder_path/$file", $replace = FILE_EXISTS_REPLACE);
    }
  }
  //check for artwork
  if (!empty($_POST['artwork'])) {
    $artwork_data = mn_ap_artworks_data($uid);
    array_pop($artwork_data);
    //loop through the checked artwork fids from the form
    foreach($_POST['artwork'] as $fid) {
      //if the artwork doesn't already exist then save it
      if (! isset($previous_artworks) || !in_array($fid, $previous_artworks)) {
        //loop thourgh all artwork data
        foreach($artwork_data as $data) {
          //find correct data for upload
          foreach($data['images'] as $image) {
            if ($image['fid'] == $fid) {
              $work['fid'] = $fid;
              $work['vid'] = $data['vid'];
              $work['uid'] = $uid;
              $work['nid'] = $nid;
              $work['title'] = isset($data['title']) ? $data['title'] : '';
              $work['medium'] = isset($data['medium']) ? json_encode($data['medium']) : '';
              $work['date'] = isset($data['date']) ? $data['date'] : '';
              $work['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : '';
              $work['excerpt'] = isset($data['excerpt']) ? $data['excerpt'] : '';
              $work['other_artists'] = $data['other_artists'] != '' ? json_encode($data['other_artists']) : '';
              $work['venue'] = isset($data['venue']) ? $data['venue'] : '';
              $work['description'] = isset($data['body']) ? $data['body'] : '';
              $work['file_type'] = isset($image['type']) ? $image['type'] : '';
              $work['file'] = isset($image['file']) ? $image['file'] : '';
              if ($image['type'] == 'image') {
                $url = image_style_url('large', $image['file']);
                $data = drupal_http_request($url);
                $thumb = image_style_url('ap_tiny', $image['file']);
                $thumb_data = drupal_http_request($thumb);
                if (file_prepare_directory($ap_folder_path, $options = FILE_MODIFY_PERMISSIONS) && file_prepare_directory($user_folder_path, $options = FILE_MODIFY_PERMISSIONS)) {
                  //get filepath of existing image
                  $filepath = str_replace($GLOBALS['base_url'], "", file_create_url($image['file']));
                  $file = drupal_basename($filepath);
                  $work['file'] = $file;
                  //move the the image to new location
                  file_unmanaged_save_data($data->data, "$user_folder_path/$file", $replace = FILE_EXISTS_RENAME);
                  file_unmanaged_save_data($thumb_data->data, "$user_folder_path/thumb_$file", $replace = FILE_EXISTS_RENAME);
                }
              }
              if ($image['type'] == 'document') {
                $url = file_create_url($image['file']);
                $data = drupal_http_request($url);
                if (file_prepare_directory($ap_folder_path, $options = FILE_MODIFY_PERMISSIONS) && file_prepare_directory($user_folder_path, $options = FILE_MODIFY_PERMISSIONS)) {
                  $filepath = str_replace($GLOBALS['base_url'], "", file_create_url($image['file']));
                  $file = drupal_basename($filepath);
                  $work['file'] = $file;
                  file_unmanaged_save_data($data->data, "$user_folder_path/$file", $replace = FILE_EXISTS_RENAME);
                }
              }
              // write data to op_artwork table
              db_insert('op_artworks')
                ->fields($work)
                ->execute();
            }
          }
        }
      }
    }
  }

  //remove unselected works from op_artworks
  if(isset($previous_artworks)) {
    foreach ($previous_artworks as $previous) {
      if (!in_array($previous, $_POST['artwork'])) {
        //delete
        db_delete('op_artworks')
          ->condition('fid', $previous, '=')
          ->condition('uid', $uid, '=')
          ->condition('nid', $nid, '=')
          ->execute();
      }
    }
  }

  if(!empty($_FILES["upload1"])) {
    $name = do_file_upload($_FILES["upload1"], $user_folder_path);
    if (!empty($name)) {
      $input["upload1"] = $name;
    }
  }
  if(!empty($_FILES["upload2"])) {
    $name = do_file_upload($_FILES["upload2"], $user_folder_path);
    if (!empty($name)) {
      $input["upload2"] = $name;
    }
  }
  if(!empty($_FILES["upload3"])) {
    $name = do_file_upload($_FILES["upload3"], $user_folder_path);
    if (!empty($name)) {
      $input["upload3"] = $name;
    }
  }
  if(!empty($_FILES["upload4"])) {
    $name = do_file_upload($_FILES["upload4"], $user_folder_path);
    if (!empty($name)) {
      $input["upload4"] = $name;
    }
  }

  //checks for an existing application
  $result = mn_ap_application_data($input['nid'], $input['uid']);

  if ($result) {
    $input['updated_at'] = date("Y-m-d H:i:s");
    db_update('op_applications')
        ->condition('pid', $result['pid'], '=')
        ->fields($input)
        ->execute();
  } else {
    $input['created_at'] = date("Y-m-d H:i:s");
    db_insert('op_applications')
        ->fields($input)
        ->execute();
  }

  drupal_set_message(t('Your application has been submitted.'), 'status');
  return drupal_goto('application/' . $nid);
}

/*
* function to handle file upload
*/
function do_file_upload($file, $user_folder_path){
  foreach ($file["error"] as $key => $error) {
    if ($error == UPLOAD_ERR_OK) {
      $tmp_name = $file["tmp_name"][$key];
      $name = $file["name"][$key];
      if (!file_exists("$user_folder_path/$name")) {
        move_uploaded_file($tmp_name, "$user_folder_path/$name");
        $result = $name;
      } else {
        $new_name = file_newname($user_folder_path, $name);
        move_uploaded_file($tmp_name, "$user_folder_path/$new_name");
        $result = $new_name;
      }
    }
  }
  if (!empty($result)) {
    return $result;
  }
}

/*
* function to generate newname for uploads
*/
function file_newname($path, $filename){
  if ($pos = strrpos($filename, '.')) {
         $name = substr($filename, 0, $pos);
         $ext = substr($filename, $pos);
  } else {
         $name = $filename;
  }
  $newpath = $path.'/'.$filename;
  $newname = $filename;
  $counter = 0;
  while (file_exists($newpath)) {
         $newname = $name .'_'. $counter . $ext;
         $newpath = $path.'/'.$newname;
         $counter++;
   }
  return $newname;
}

function mn_ap_application_data($nid, $uid) {
  $result = db_select('op_applications', 'op')
      ->fields('op')
      ->condition('nid', $nid, '=')
      ->condition('uid', $uid, '=')
      ->execute()
      ->fetchAssoc();
  return $result;
}

function mn_ap_application_artworks($nid, $uid) {
  $result = db_select('op_artworks', 'op')
      ->fields('op')
      ->condition('nid', $nid, '=')
      ->condition('uid', $uid, '=')
      ->execute()
      ->fetchAll();
  return $result;
}

function mn_ap_artworks_data($uid, $vid = NULL) {
  $query =  new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'artwork')
    //->field_condition('body', 'body_value')
    ->propertyCondition('uid', $uid)
    ->propertyOrderBy('created', 'DESC');

  $result = $query->execute();

  $out = array();
  if (!empty($result['node'])) {
    $resultKeys = array_keys($result['node']);
    $out = node_view_multiple(node_load_multiple($resultKeys));
  }

  if (empty($out['nodes'])) {
    return drupal_set_message(t('You have not added any artworks to your profile.'), 'error');
  }

  $rows = array();
  foreach ($out['nodes'] as $row) {
    //getting object and converting to array
    $object = (array)$row['field_media']['#object'];
    //dpm($object);
    //get medium from tid
    $medium = isset($object['field_medium']['und']) ? mn_ap_medium_data($object['field_medium']['und']) : '';
    //clean up artwork
    $images = isset($object['field_media']) ? mn_ap_artwork_image_data($object['field_media']) : '';
    //get date fields and make readable date
    $day = isset($object['field_created_date']['und']['0']['from']['day']) ? (int)$object['field_created_date']['und']['0']['from']['day'] : '';
    $month = isset($object['field_created_date']['und']['0']['from']['month']) ? (int)$object['field_created_date']['und']['0']['from']['month'] : '';
    $year = isset($object['field_created_date']['und']['0']['from']['year']) ? (int)$object['field_created_date']['und']['0']['from']['year'] : '';
    $excerpt = isset($object['field_artwork_excerpt']['und']['0']['safe_value']) ? $object['field_artwork_excerpt']['und']['0']['safe_value'] : '';
    $date = get_artwork_date($month, $day, $year);
    $other_artists = isset($object['field_other_artists_involved']['und']) ? mn_ap_get_other_artists($object['field_other_artists_involved']['und']) : '';
    $venue = isset($object['field_venue']['und']) ? mn_ap_get_venues($object['field_venue']['und']) : '';

    $rows[] = array(
      'vid' => isset($object['vid']) ? $object['vid'] : '',
      'title' => isset($object['title']) ? $object['title'] : '',
      'body' => isset($object['body']['und']['0']['safe_value']) ? strip_tags($object['body']['und']['0']['safe_value']) : '',
      'date' => $date,
      'dimensions' => isset($object['field_dimensions']['und']['0']['value']) ? $object['field_dimensions']['und']['0']['value'] : '',
      'excerpt' => $excerpt,
      'medium' => $medium,
      'images' => $images,
      'other_artists' => $other_artists,
      'venue' => $venue,
      //'field_media' => isset($object['field_media']) ? $object['field_media'] : '',
      //'row' => $row
    );
  }
  return $rows; //$out['nodes'];
}

/*
** Entity Lookup for Venue Title
*/
function mn_ap_get_venues($venues) {
  $artwork_venue = '';
  foreach ($venues as $venue) {
    $venue_id = $venue['target_id'];
    $query =  new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
    ->entityCondition('type', 'venue')
    ->propertyCondition('nid', $venue_id, '=');
    $result = $query->execute();
    $out = array();
    if (!empty($result['node'])) {
      $resultKeys = array_keys($result['node']);
      $out = node_view_multiple(node_load_multiple($resultKeys));
    }
    $artwork_venue = $out['nodes'][$venue_id]['#node']->title;
  }
  return $artwork_venue;
}

/*
** Term look up to get other artists for artworks
*/
function mn_ap_get_other_artists($artists) {
  foreach ($artists as $artist) {
    $term = (array)taxonomy_term_load($artist['tid']);
    $other_artists[] = $term['name'];
  }
  return $other_artists;
}

/*
* this creates a combined array of required and optional form areas
*/
function get_form_areas($required, $optional) {
  $areas = array();
  $required  = isset($required['und']) ? $required['und'] : '';
  $optional  = isset($optional['und']) ? $optional['und'] : '';
  $combined = array_merge((array)$required, (array)$optional);
  if($combined) {
    foreach ($combined as $c) {
      if ($c) $areas[] = $c['value'];
    }
  }
  return $areas;
}

/*
* set the order of form steps check if they exist and create array for steps use arraykeys for step #'s
*/
function get_form_steps($required, $optional, $work) {
  $required  = isset($required['und']) ? $required['und'] : '';
  $optional  = isset($optional['und']) ? $optional['und'] : '';
  $work  = isset($work['und']) ? $work['und'] : '';
  $steps = array(
    'statement-proposal' => '',
    'bio-resume' => '',
    'work' => '',
    'fields-uploads' => ''
  );
  $combined = array_merge((array)$required, (array)$optional, (array)$work);
  foreach ($combined as $c) {
    if (!empty($c)) {
      switch ($c['value']) {
        case 'statement':
          $steps['statement-proposal'] = 'statement-proposal';
          break;
        case 'proposal':
          $steps['statement-proposal'] = 'statement-proposal';
          break;
        case 'bio':
          $steps['bio-resume'] = 'bio-resume';
          break;
        case 'resume':
          $steps['bio-resume'] = 'bio-resume';
          break;
        case 'image':
        case 'video':
        case 'sound':
          $steps['work'] = 'work';
          break;
        case 'field1':
        case 'field2':
        case 'field3':
        case 'field4':
          $steps['fields-uploads'] = 'fields-uploads';
          break;
        case 'upload1':
        case 'upload2':
        case 'upload3':
        case 'upload4':
          $steps['fields-uploads'] = 'fields-uploads';
          break;
      }
    }
  }
  foreach ($steps as $step) {
    if($step == '') {
      $key = array_search($step, $steps);
      unset($steps[$key]);
    }
  }
  return array_keys($steps);
}

/**
 * required to get medium data because it is an array of tid's
 */
function mn_ap_medium_data($media) {
  foreach ($media as $medium) {
    $term = (array)taxonomy_term_load($medium['tid']);
    $mediums[] = $term['name'];
  }
  return $mediums;
}
/**
* Getting the date for display
*/
function get_artwork_date($month, $day, $year){
  if ($month != '' && $day != '' && $year != '') {
    $date = date('F j, Y', strtotime("$month/$day/$year"));
  } elseif ($month != '' && $year != '') {
    $month = date('F', strtotime($month));
    $date = "$month, $year";
  } else {
    $date = $year;
  }
  return $date;
}

/**
 * get only required information out of field_media for use in template
 */
function mn_ap_artwork_image_data($artworks) {
  //dpm($artworks);
  foreach($artworks['und'] as $artwork) {
    if (isset($artwork['uri'])) {
      if (substr($artwork['filemime'], 0, 1) == 'i') {
        $art[] = array(
          'fid' => $artwork['fid'],
          'type' => 'image',
          'file' => $artwork['uri'],
          'filename' => $artwork['filename']
        );
      } elseif (substr($artwork['uri'], 0, 1) == 's') {
        $url = explode("/", substr($artwork['uri'], 15));
        $art[] = array(
          'fid' => $artwork['fid'],
          'type' => 'soundcloud',
          'file' => isset($url[2]) ? "http://soundcloud.com/$url[0]/$url[2]" : "http://soundcloud.com/$url[0]",
          'filename' => $artwork['filename']
        );
      } elseif (substr($artwork['uri'], 0, 1) == 'y') {
        $art[] = array(
          'fid' => $artwork['fid'],
          'type' => 'youtube',
          'file' => 'http://www.youtube.com/embed/' . substr($artwork['uri'], 12) . '?autoplay=0',
          'filename' => $artwork['filename']
        );
      } elseif (substr($artwork['uri'], 0, 1) == 'v') {
        $art[] = array(
          'fid' => $artwork['fid'],
          'type' => 'vimeo',
          'file' => '//player.vimeo.com/video/' . substr($artwork['uri'], 10),
          'filename' => $artwork['filename']
        );
      } elseif ($artwork['type'] == 'document') {
        $art[] = array(
          'fid' => $artwork['fid'],
          'type' => 'document',
          'file' => $artwork['uri'],
          'filename' => $artwork['filename']
        );
      }
    }
  }
  return $art;
}

/**
 * Ajax Callback for updating the op_applications table
 */
function ap_ajax_callback() {
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    global $user;
    //set input from the post method
    $input = array(
      'nid' => (int)$_POST['node_id'],
      'uid' => $user->uid,
      'first_name' => !empty($_POST['first_name'])  ? $_POST['first_name'] : '',
      'last_name' => !empty($_POST['last_name'])  ? $_POST['last_name'] : '',
      'email' => !empty($_POST['email'])  ? $_POST['email'] : '',
      'phone' => !empty($_POST['phone'])  ? $_POST['phone'] : '',
      'address' => !empty($_POST['address'])  ? $_POST['address'] : '',
      'city' => !empty($_POST['city'])  ? $_POST['city'] : '',
      'state' => !empty($_POST['state'])  ? $_POST['state'] : '',
      'zip' => !empty($_POST['zip'])  ? (int)$_POST['zip'] : '',
      'website' => !empty($_POST['website']) ? $_POST['website'] : '',
      'gender' => !empty($_POST['gender'])  ? $_POST['gender'] : '',
      'age' => trim($_POST['age']) != '' ? $_POST['age'] : '0',
      'ethnicity' => !empty($_POST['ethnicity']) ? $_POST['ethnicity'] : '',
      'county' => !empty($_POST['county'])  ? $_POST['county'] : '',
      'country' => !empty($_POST['country']) ? $_POST['country'] : '',
      'bio' => !empty($_POST['bio'])  ? $_POST['bio'] : '',
      'statement' => !empty($_POST['statement'])  ? $_POST['statement'] : '',
      'proposal' => !empty($_POST['proposal'])  ? $_POST['proposal'] : '',
      'field1' => !empty($_POST['field1'])  ? $_POST['field1'] : '',
      'field2' => !empty($_POST['field2'])  ? $_POST['field2'] : '',
      'field3' => !empty($_POST['field3'])  ? $_POST['field3'] : '',
      'field4' => !empty($_POST['field4'])  ? $_POST['field4'] : '',
    );

    //checks for an existing application
    $result = mn_ap_application_data($input['nid'], $input['uid']);
    if (!$result) {
      $input['created_at'] = date("Y-m-d H:i:s");
      db_insert('op_applications')
          ->fields($input)
          ->execute();
    } else {
      $input['updated_at'] = date("Y-m-d H:i:s");
      db_update('op_applications')
          ->condition('pid', $result['pid'], '=')
          ->fields($input)
          ->execute();
    }
  }
}

function mn_ap_get_submissions($nid, $accepted = NULL, $completed = NULL) {
  $query = db_select('op_applications', 'op')
      ->fields('op')
      ->condition('nid', $nid, '=')
      ->orderBy('uid', 'asc');
      if($completed) $query->condition('complete', $completed, '=');
      if($accepted) $query->condition('accept', $accepted, '=');
    $results = $query->execute()->fetchAll();
  $resultArray = array();
  foreach ($results as $result) {
    $resultArray[] = (array)$result;
  }
  return $resultArray;
}

function mn_ap_get_all_reviews($nid, $round) {
  $query = db_select('op_applications', 'ap');
  $query->join('op_rating', 'r', 'ap.uid = r.aid');
  $query->condition('ap.nid', $nid, '=')
      ->condition('r.nid', $nid, '=')
      ->condition('r.round', $round, '=')
      ->fields('ap',array('uid'))
            ->fields('r',array('rating', 'comment'))
            ->orderBy('ap.uid', 'desc');
  $results = $query->execute()->fetchAll();

  $submissions = mn_ap_get_submissions($nid, 0, 0);
  $submissions = (array)$submissions;

  $works = db_select('op_artworks', 'op')
      ->fields('op')
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchAll();

  $combined = array();

  foreach ($submissions as $submission) {
    $temp = array();
    $i = 0;
    $c = 1;
    $rating = 0;
    foreach ($results as $result) {
      if($result->uid == $submission['uid']) {
        $rating += $result->rating;
        $avg = $rating / $c;
        $temp['avgRating'] = $avg;
        $temp['voteCount'] = $c;
        $temp['reviews'][$i] = $result;
        $i++;
        $c++;
      }
    }
    $w = 0;
    foreach ($works as $work) {
      if($work->uid == $submission['uid']) {
        $temp['artworks'][$w] = $work;
        $w++;
      }
    }
    $combined[] = array_merge($submission, (array)$temp);
  }
  return $combined;
}

function get_juror_reviews($nid, $uid, $round) {
  if ($round > 1) {
    $results = mn_ap_get_submissions($nid, 1, 1);
  } else {
    $results = mn_ap_get_submissions($nid, 0, 1);
  }

  $query = db_select('op_rating', 'r');
  $query->condition('r.nid', $nid, '=');
  $query->condition('r.round', $round, '=');
  $query->condition('r.uid', $uid, '=');
  $query->fields('r');
  $reviews = $query->execute()->fetchAll();

  $works = db_select('op_artworks', 'op')
      ->fields('op')
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchAll();

  $combined = array();
  foreach ($results as $result) {
    $temp = array();
    foreach ($reviews as $review) {
      if($review->aid == $result['uid']) {
        $temp['rating'] = $review->rating;
        $temp['comment'] = $review->comment;
      }
    }
    $w = 0;
    foreach ($works as $work) {
      if($work->uid == $result['uid']) {
        $temp['artworks'][$w] = $work;
        $w++;
      }
    }
    $combined[] = array_merge((array)$result, (array)$temp);

  }
  return $combined;
}

/*
* Get all fields used in application and all applications for
*/
function mn_ap_get_all_for_xls($nid, $round) {
  //opportunity node
  $node = node_load($nid);
  //submissions
  if ($round  == 1) {
    $submissions = mn_ap_get_submissions($nid, 0, 0);
    $submissions = (array)$submissions;
  } else {
    $submissions = mn_ap_get_submissions($nid, 1, 1);
    $submissions = (array)$submissions;
  }
  //reviews
  $query = db_select('op_rating', 'r');
  $query->condition('r.nid', $nid, '=');
  $query->condition('r.round', $round, '=');
  $query->fields('r');
  $reviews = $query->execute()->fetchAll();

  //form areas incuded in opportunity
  $areas = get_form_areas($node->field_op_required, $node->field_op_optional);
  //jurors
  $jurors = mn_op_get_jurors($nid);

  //combine reviews with juror names
  $combined = array();
  foreach ($submissions as $submission) {
    $reviewFields = array();
    $formFields = array();
    $formFields['uid'] = $submission['uid'];
    $formFields['first_name'] = $submission['first_name'];
    $formFields['last_name'] = $submission['last_name'];
    $formFields['address'] = $submission['address'];
    $formFields['city'] = $submission['city'];
    $formFields['state'] = $submission['state'];
    $formFields['zip'] = $submission['zip'];
    $formFields['email'] = $submission['email'];
    in_array('website', $areas) ? $formFields['website'] = $submission['website'] : '';
    in_array('phone', $areas) ? $formFields['phone'] = $submission['phone'] : '';
    in_array('gender', $areas) ? $formFields['gender'] = $submission['gender'] : '';
    in_array('ethnicity', $areas) ? $formFields['ethnicity'] = $submission['ethnicity'] : '';
    in_array('age', $areas) ? $formFields['age'] = $submission['age'] : '';
    in_array('county', $areas) ? $formFields['county'] = $submission['county'] : '';
    in_array('country', $areas) ? $formFields['country'] = $submission['country'] : '';
    in_array('bio', $areas) ? $formFields['bio'] = $submission['bio'] : '';
    in_array('statement', $areas) ? $formFields['statement'] = $submission['statement'] : '';
    in_array('proposal', $areas) ? $formFields['proposal'] = $submission['proposal'] : '';
    in_array('field1', $areas) ? $formFields['field1'] = $submission['field1'] : '';
    in_array('field2', $areas) ? $formFields['field2'] = $submission['field2'] : '';
    in_array('field3', $areas) ? $formFields['field3'] = $submission['field3'] : '';
    in_array('field4', $areas) ? $formFields['field4'] = $submission['field4'] : '';
    in_array('upload1', $areas) ? $formFields['upload1'] = $submission['upload1'] : '';
    in_array('upload2', $areas) ? $formFields['upload2'] = $submission['upload2'] : '';
    in_array('upload3', $areas) ? $formFields['upload3'] = $submission['upload3'] : '';
    in_array('upload4', $areas) ? $formFields['upload4'] = $submission['upload4'] : '';

    $j = 1; //juror review count
    $c = 1; //count for # of reviews used in avg
    $rating = 0;
    $avg = 0;
    foreach ($jurors as $juror) {
      foreach ($reviews as $review) {
        //if review matches juror and review matches applicant - create a review
        if ($review->uid == $juror->uid && $review->aid == $submission['uid']) {
          if ($review->rating != 0) {
            $rating += $review->rating;
            $avg = $rating / $c;
            $c++;
            $reviewFields['review ' . $j] = $juror->name . ', ' . $juror->mail . ', ' . $review->rating . ', ' . $review->comment;
          }
        }
      }
      //if no review field has been created - make one that says - no review
      if (! array_key_exists('review ' . $j, $reviewFields)) {
        $reviewFields['review ' . $j] = $juror->name . ', ' . $juror->mail . ', No Review';
      }
      $j++; //increment juror count
    }

    $reviewFields['avg_rating'] = $avg;
    $reviewFields['rating_count'] = $c-1;

    $formFields['completed'] = $submission['complete'] == 1 ? 'True' : 'False';
    $formFields['completed_at'] = $submission['updated_at'];
    $formFields['accepted'] = $submission['accept'] == 1 ? 'True' : 'False';
    $formFields['accepted_at'] = $submission['accepted_at'];

    $combined[] = array_merge($formFields, (array)$reviewFields);
  }
  return $combined;
}

function ap_submissions_xls($nid, $title, $round) {
  $filename = $title .'-round-' .  $round . '.xls';
  $submissions = mn_ap_get_all_for_xls($nid, $round);
  //$submissions = mn_ap_get_all_reviews($nid);
  if ($submissions) {
    $submissionArray[] = array_keys($submissions[0]);
    foreach ($submissions as $submission) {
      $submissionArray[] = array_values($submission);
    }
  }

  array_to_xls_download($submissionArray, $filename);
}

function array_to_xls_download($array, $filename = "export.xls", $delimiter="\t") {
  // open raw memory as file so no temp files needed, you might run out of memory though
  $f = fopen('php://memory', 'w');
  // loop over the input array
  foreach ($array as $line) {
      // generate xls lines from the inner arrays
      fputcsv($f, $line, $delimiter, '"');
  }
  // rewind the "file" with the xls lines
  fseek($f, 0);
  // tell the browser it's going to be a xls file
  header('Content-Type:   application/vnd.ms-excel; charset=utf-8');
  // tell the browser we want to save it instead of displaying it
  header('Content-Disposition: attachement; filename="'.$filename.'";');

  // make php send the generated xls lines to the browser
  fpassthru($f);
}

function mn_ap_check_juror($nid, $mail){
  $juror = 0;
  $result = db_select('op_jurors', 'op')
      ->fields('op')
      ->condition('nid', $nid, '=')
      ->condition('mail', $mail, '=')
      ->execute()
      ->fetchAssoc();
    if ($result) $juror = 1;
    return $juror;
}

function mn_ap_update_ap_status($nid, $uid, $status) {
  $input['accepted_at'] = date("Y-m-d H:i:s");
  //toggle the currently set status
  if ($status == 0 || $status == '0') {
      $input['accept'] = 1;
  } elseif($status == 1) {
      $input['accept'] = 0;
      $input['accepted_at'] = NULL;
  }
  db_update('op_applications')
      ->condition('nid', $nid, '=')
      ->condition('uid', $uid, '=')
      ->fields($input)
      ->execute();
}

function mn_ap_reopen_ap($nid, $uid, $reopen) {
  //toggle reopen bool
  if ($reopen == 0) {
      $input['reopen'] = 1;
  } elseif($reopen == 1) {
      $input['reopen'] = 0;
  }
  db_update('op_applications')
      ->condition('nid', $nid, '=')
      ->condition('uid', $uid, '=')
      ->fields($input)
      ->execute();
}

function mn_ap_reopen_all_aps($nid, $reopen) {
  $submissions = mn_ap_get_submissions($nid);

  foreach ($submissions as $submission) {
    mn_ap_reopen_ap($nid, $submission['uid'], $reopen);
  }

  //toggle reopen bool
  if ($reopen == 0) {
      $reopen = 1;
      mn_ap_update_reopen_setting($nid, $reopen);
      drupal_set_message('Warning: You have reopened all applications to accept further materials. Please add any additional fields you require below. If you remove an exisiting field you will lose access to that information.', 'error');
      return drupal_goto('node/' . $nid . '/edit');
  } elseif($reopen == 1) {
      $reopen = 0;
      mn_ap_update_reopen_setting($nid, $reopen);
      return drupal_set_message('You have closed all reopened applications.', 'status');
  }
}

function mn_ap_update_reopen_setting($nid, $reopen) {
    //check for exisiting settings
  $existing = mn_op_check_existing_settings($nid);
  if ($existing) {
    //update
    db_update('op_jury_settings')
      ->condition('nid', $nid, '=')
      ->fields(array('reopen' => $reopen))
      ->execute();
  } else {
    //create
    db_insert('op_jury_settings')
      ->fields(array('reopen' => $reopen))
      ->execute();
  }
}

/**
* Fetch Data from Profile2 Module fields for the user
* http://drupalcontrib.org/api/drupal/contributions%21profile2%21contrib%21profile2_page.module/function/profile2_by_uid_load/7
*/
function _profile2_by_uid_load($uid, $type_name) {
  if ($uid && is_numeric($uid) && ($account = user_load($uid))) {
    $profile = profile2_load_by_user($account, $type_name);
    if (!$profile) {
      $profile = profile2_create(array('type' => $type_name));
      $profile->setUser($account);
      $profile->is_new = TRUE;
    }
    return $profile;
  }
  return FALSE;
}
