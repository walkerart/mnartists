<?php

define('NODE_INDEX', 'default_node_index');
define('USER_INDEX', 'users');

/**
 * @file
 * Code for the Artist Community feature.
 */

include_once 'artist_community.features.inc';

/**
 * Implements hook_menu()
 */
function artist_community_menu() {
    $items['community'] = array(
        'title'             => t('Community'),
        'page callback'     => 'artist_community_search_page',
        'access arguments'  => array('access content'),
        'file'              => 'artist_community.pages.inc',
    );

    return $items;
}

/**
 * Implements hook_theme()
 */
function artist_community_theme() {
    return array(
        'artist_community_page' => array(
            'variables' => array(
                'content' => array(),
            ),
            'template' => 'templates/artist-community-page',
        ),
        'artist_community_artist_profile' => array(
            'variables' => array(
                'user' => array(),
            ),
            'file' => 'artist_community.templates.inc',
            'template' => 'templates/artist-profile',
        ),
        'artist_community_menu_search' => array(
            'variables' => array(),
            'template' => 'templates/mna-search-block'
        )
    );
}

/**
 * Implements hook_block_info()
 */
function artist_community_block_info() {

    $blocks['menu-search'] = array(
        'info' => t('Menu Search'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    $blocks['community'] = array(
        'info' => t('Artist Community - Communities'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    $blocks['content'] = array(
        'info' => t('Artist Community - Content'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    return $blocks;
}

function _artist_community_block_visibility() {
    global $user;

    if (arg(0) == 'user' && $user->uid == arg(1)) {
        return false;
    }

    return true;
}

function artist_community_block_view($delta = '') {
    switch($delta) {
        case 'community':
            $block['subject'] = t('Communities');
            $block['content'] = _community_block_community();
            break;
        case 'content':
            $block['subject'] = t('Content');
            $block['content'] = _community_block_content();
            break;
        case 'menu-search':
            $block['subject'] = t('Search');
            $block['content'] = _community_block_search();
    }

    return $block;
}

function _community_block_search() {
    return theme("artist_community_menu_search", array(

    ));
}

/**
 * @return
 * returns a rendered menu for content
 */
function _community_block_community() {
    $items = array();

    // render community menu;
    $results = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->condition('type', 'community')
        ->execute()
        ->fetchAll(); 

    foreach($results as $result) {
        $sub_items = array();

        // build the top level link
        $attributes = array(
            'class' => (isset($_GET['og'][$result->nid])) 
                    ? array('active-trail') : array(),
        );
        $list = url_query_master($result->title, 'community', 'og', $result->nid, $attributes);
        $items[$result->title] = $list;
    }

    ksort($items);
    array_unshift($items, l('All Communities', 'community'));

    return theme('item_list', array(
        'items' => $items,
        'attributes' => array('class' => 'artist-community-menu'),
    ));
}

/**
 * @return
 * returns a rendered menu for content types
 */
function _community_block_content() {
    // render content menu;
    $menu_items = array(
        'article' => array(
            'title' => t('Articles'),
            'subcontent' => ''
        ),
        'artists' => array(
            'title' => t('Artists'),
            'subcontent' => ''
        ),
        'artwork' => array(
            'title' => t('Artworks'),
            'subcontent' => ''
        ),
        'event' => array(
            'title' => t('Events'),
            'subcontent' => '<div class="menu-event-datepicker"></div>'
        ),
        'opportunity' => array(
            'title' => t('Opportunities'),
            'subcontent' => ''
        ),
        'organizations' => array(
            'title' => t('Organizations'),
            'subcontent' => ''
        ),
    );

    $query = (isset($_GET['og'])) ? $_GET['og'] : array();

    $items[] = l('All Content', 'community', array('query' => $query));

    foreach($menu_items as $key => $item) {
        $link = url_query_master($item['title'], 'community', 'content', $key);
        $items[] = $link . $item['subcontent'];
    }

    return theme('item_list', array(
        'items' => $items,
        'attributes' => array('class' => 'community-content-menu'),
    ));
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function artist_community_form_user_profile_form_alter(&$form, &$form_state) {
    // Hide featured artists from non admins
    if (!user_access('administer users')) {
        unset($form['field_featured_artist']);
    }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function artist_community_form_artwork_node_form_alter(&$form, &$form_state) {
    // Find the communities associated with each term
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_medium', 'm', 'n.nid = m.entity_id'); 
    $result = $query->fields('n', array('nid', 'title'))
        ->fields('m')
        ->condition('type', 'community')
        ->orderBy('title')
        ->execute();

    // Build a nested array to provide grouped select options
    while ($row = $result->fetchAssoc()) {
       $rows[$row['title']][$row['field_medium_tid']] = $form['field_medium']['und']['#options'][$row['field_medium_tid']];
    }

    $form['field_medium']['und']['#options'] = $rows;
    unset($form['og_group_ref']);

    $form['#submit'][] = 'artist_community_artwork_form_submit';
}

function artist_community_artwork_form_submit(&$form, &$form_state) {
    global $user;
    $user = user_load($user->uid);
    $values = array('entity' => $user);

    foreach($form_state['values']['field_medium']['und'] as $field) {
        $gid = gid_by_tid($field['tid']);
        // Add artwork to the group
        $form_state['values']['og_group_ref']['und'][]['target_id'] = $gid; 
        // Add user to the group
        og_group('node', $gid, $values);
    }
}

/**
 * Given a taxonomy term id, return the community nid related to the term
 */
function gid_by_tid($tid) {
    $result = db_select('field_data_field_medium', 'm')
        ->fields('m', array('entity_id'))
        ->condition('field_medium_tid', $tid)
        ->execute()
        ->fetchAssoc();
    return $result['entity_id'];
}

function artist_community_execute_query($index, $filters = array()) {
        // Initialize the solr query
    $options = array(
        'search id' => 'artist_community:' . $index,
        'parse mode' => 'terms',
    );  
    $query = search_api_query($index, $options);

    // Add filters
    foreach($filters as $filter) {
        $query->filter($filter);
    }

    $index = $query->getIndex();
    $results = $query->execute();

    return $index->loadItems(array_keys($results['results']));
}

/**
 * Search an array for a key.  Append it if it doesnt exist.
 * remove it if it does
 */
function array_mashinator(&$array, $needle) {
    if (empty($array) || !in_array($needle, $array)) { 
        $array[] = $needle;
    } else {
        // The needle exists in our query so remove it from the array 
        $key = array_search($needle, $array);
        unset($array[$key]);
        $array = array_values($array);
    }   
}

/**
 * Create links that accomodate our fabulious queries
 * @param $text
 *  The text to be displayed in the link
 * @param $path
 *  the url the link should link to
 * @param $key
 *  The key that the value should be linked to in the query
 * @param $val
 *  The value of the key
 * @param $attributes
 *  an array of attributes as defined by l()
 *
 * @return
 *  returns an html link
 */
function url_query_master($text, $path, $key, $val, $attributes = array()) {
    $query = array();

    if (isset($_GET['og'])) {
        $query['og'] = $_GET['og'];
    }

    if (isset($_GET['content'])) {
        $query['content'] = $_GET['content'];
    }

    if ($key == 'og') {
        if ($node = node_load($val)) {
            if (isset($_GET['og'][$val]) && $_GET['og'][$val] == 1) $attributes['class'][] = 'selected';
            /**
             * If the value is set then unset it so we can toggle
             * between states.  If it isnt set it as true since this
             * is the root menu item.
             */
            if (isset($query['og'][$val])) {
                unset($query['og'][$val]);
            } else {
                $query['og'][$val] = TRUE;
            }

            $output = l($text, $path, array('query' => $query, 'attributes' => $attributes));

            // build sub menu items from the medium taxonomy
            foreach($node->field_medium['und'] as $tid) {
                $attributes = array();

                // Reset the query so that the community values are included
                if (isset($_GET['og'][$val])) {
                    $query['og'][$val] = $_GET['og'][$val];
                }

                if (isset($_GET['og'][$val]) && is_array($_GET['og'][$val]) && in_array($tid['tid'], $_GET['og'][$val])) {
                    $attributes['class'] = array('active-trail','selected');
                }

                // if the query is true convert it to an array
                if ($query['og'][$val] == 1) {
                    $query['og'][$val] = array();
                }

                $term = taxonomy_term_load($tid['tid']);
        
                array_mashinator($query['og'][$val], $tid['tid']);

                // Build a sub menu of taxonomy terms
                $sub_items[] = l($term->name, 'community', array(
                    'query' => $query,
                    'attributes' => $attributes,
                ));
            }   

            if (isset($sub_items)) {
                $output .= theme('item_list', array('items' => $sub_items));
            }   

        }
    } else if ($key == 'content') {
        array_mashinator($query['content'], $val);
        $output = l($text, $path, array('query' => $query, 'attributes' => $attributes));
    }

    return $output;
}

//Remove extra media values from the teaser view
function artist_community_entity_view($entity, $type, $view_mode, $langcode) {
    if ($view_mode === 'teaser' && $entity->type === 'artwork') {
        $entity->content['field_media']['#items'] = array_slice($entity->content['field_media']['#items'], 0, 1);
    }
}
