<?php

/**
 * @file
 * Code for the Artist Community feature.
 * NB: the label for this field was changed during development from 'medium' to 'community', and this is why
 *      you will find the data in field_medium, not field_community.
 */

// some indices
define('NODE_INDEX', 'default_node_index');
define('USER_INDEX', 'users');

// some vocabulary ids
define('SUBJECT_VID', '8');
define('EXPERIENCE_VID', '12');
define('PRACTICE_VID', '13');
define('ARTICLE_CATEGORY_VID', '6');
define('EVENT_CATEGORY_VID', '2');
define('ORGANIZATIONS_CATEGORY_VID', '7');
define('OPPORTUNITY_TYPE_VID', '14');


// default limits for search
define('SEARCH_DEFAULT_ROWS', '20');
define('NEAR_ME_RADIUS', '50');

include_once 'artist_community.features.inc';

// field names for use in our solr queries
define('AC_OG_GROUP_REF_FIELD', 'im_og_group_ref');
define('AC_MEDIUM_FIELD', 'im_field_medium');
define('AC_SUBJECT_FIELD', 'im_field_subject_concept');
define('AC_FOR_SALE_FIELD', 'bs_field_for_sale');
define('AC_USER_NODE_FIELD', 'im_og_user_node');
define('AC_USER_OG_MEMBERSHIP', 'im_og_membership');
define('AC_TYPE_FIELD', 'ss_type');
define('AC_USER_ROLES_FIELD', 'im_roles');
define('AC_USER_PRACTICE_FIELD', 'im_profile_main:field_practice');
define('AC_USER_EXPERIENCE_FIELD', 'is_profile_main:field_experience');
define('AC_CREATED_FIELD', 'ds_created');
define('AC_USER_LATLNG_FIELD', 'locs_near_me_latlng');
define('AC_START_DATE_FIELD', 'ds_field_date:value');
define('AC_CATEGORY_FIELD', 'is_field_category');
define('AC_ARTICLE_CATEGORY_FIELD', 'is_field_article_category');
define('AC_GLOBAL_SEARCH_FIELD', 'tm_search_api_aggregation_1');
define('AC_PROFILE_SEARCH_FIELD', 'tm_mnartist_profile2_search');
define('AC_SORT_BY_NAME_FIELD', 'ss_sort_by_name');
define('AC_SORT_BY_DATE_FIELD', 'ds_sort_by_date');
define('AC_SORT_BY_RECENT_FIELD', 'ds_created');
define('AC_ORG_CATEGORY_FIELD', 'is_profile_organization:field_organization_type');
define('AC_OPP_TYPE_FIELD', 'is_field_op_type');
define('AC_OPP_ANNOUNCE_DATE_FIELD', 'ds_field_announce_date');

define('DEFAULT_DOCUMENT_IMAGE', 'icon-media-document.png');


// config for solarium
global $solarium_config;
$solarium_config = array(
    'endpoint' => array(
        'localhost' => array(
            'host' => '127.0.0.1',
            'port' => 8080,
            'path' => '/solr/',
        )
    )
);



/**
 * Implements hook_menu()
 */
function artist_community_menu() {
    $items['community'] = array(
        'title'             => t('Community'),
        'page callback'     => 'artist_community_search_page',
        'access arguments'  => array('access content'),
        'file'              => 'artist_community.pages.inc',
    );
    $items['communitygetitems'] = array(
        'title'             => t('Community Get Items'),
        'access arguments'  => array('access content'),
        'page callback'     => 'artist_community_get_items',
    );

    return $items;
}

/**
 * Implements hook_theme()
 */
function artist_community_theme() {
    return array(
        'artist_community_page' => array(
            'variables' => array(
                'content' => array(),
            ),
            'file' => 'artist_community.templates.inc',
            'template' => 'templates/artist-community-page',
        ),
        'artist_community_page_search_results' => array(
            'variables' => array(
                'content' => array(),
            ),
            'file' => 'artist_community.templates.inc',
            'template' => 'templates/artist-community-page-search-results',
        ),
        'artist_community_artist_profile' => array(
            'variables' => array(
                'user' => array(),
            ),
            'file' => 'artist_community.templates.inc',
            'template' => 'templates/artist-profile',
        ),
        'artist_community_menu_search' => array(
            'variables' => array(),
            'template' => 'templates/mna-search-block'
        ),
        'artist_community_menu_location_search' => array(
            'variables' => array(),
            'template' => 'templates/mna-location-search-block'
        ),
        'artist_community_event_category_link' => array(
            'variables' => array(),
            'template' => 'templates/mna-event-category-link'
        ),
    );
}

/**
 * Implements hook_block_info()
 */
function artist_community_block_info() {

    $blocks['menu-search'] = array(
        'info' => t('Menu Search'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    $blocks['community'] = array(
        'info' => t('Artist Community - Communities'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    $blocks['content'] = array(
        'info' => t('Artist Community - Content'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    $blocks['event-category-link'] = array(
        'info' => t('Artist Community - Event Category Link'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    return $blocks;
}

function _artist_community_block_visibility() {
    global $user;

    if ((arg(0) == "user" && in_array(arg(2), array("edit", "mailchimp", "welcome"))) ||
            (in_array(arg(0), array('opportunities', 'applications'))) ||
            (!user_is_logged_in() && arg(0) == "user" && (is_null(arg(1)) || in_array(arg(1), array("password", "register")))) ||
            (arg(0) == "node" && in_array(arg(1), array("edit", "add"))) ||
            (arg(0) == "node" && in_array(arg(2), array("edit"))) ||
            (arg(0) == "user" && in_array(arg(1), array("saved-filters", "feed", "welcome"))) ||
            (user_is_logged_in() && (arg(0) == "user" && in_array(arg(2), array("flags")) && flag_lists_is_owner('edit', arg(4)))) ||
            (user_is_logged_in() && (arg(0) == "user" && in_array(arg(2), array("flags")) && !is_numeric(arg(3)))) ||
            (user_is_logged_in() && (arg(0) == "flags" && flag_lists_is_owner('edit', arg(2))))
        ) {
        return false;
    }

    return true;
}

function artist_community_block_view($delta = '') {
    switch($delta) {
        case 'community':
            $block['subject'] = t('Communities');
            $block['content'] = _community_block_community();
            break;
        case 'content':
            $block['subject'] = t('Content');
            $block['content'] = _community_block_content();
            break;
        case 'menu-search':
            $block['subject'] = t('Search');
            $block['content'] = _community_block_search();
            break;
        case 'event-category-link':
            $block['subject'] = t('Event Category Link');
            $block['content'] = _community_block_event_category_link();
            break;
    }

    return $block;
}

function _community_block_event_category_link () {
    return theme("artist_community_event_category_link", array(

    ));
}

function _community_block_search() {
    return theme("artist_community_menu_search", array(

    ));
}

/**
 * @return
 * returns a rendered menu for content
 */
function _community_block_community() {
    global $search_facets;
    _set_community_query_facets();

    $items = array();

    // render community menu;
    $results = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->condition('type', 'community')
        ->execute()
        ->fetchAll();

    foreach($results as $result) {
        $community = node_load($result->nid);

        // build the top level link
        $attributes = array(
            'class' => (isset($_GET['og'][$result->nid]))
                    ? array('active-trail') : array(),
        );
        $list = url_query_master($result->title, 'community', 'og', $result->nid, $attributes);
        $items[$result->title] = $list;
    }

    ksort($items);
    $all_community_classes = array('active-trail');
    if (!isset($_GET['og'])) { $all_community_classes[] = 'selected'; }
    array_unshift($items, l('All Communities', 'community', array('attributes' => array('class' => $all_community_classes))));

    return theme('item_list', array(
        'items' => $items,
        'attributes' => array('class' => 'artist-community-menu'),
    ));
}

/**
 * @return
 * returns a rendered menu for content types
 */
function _community_block_content() {
    // render content menu;

    global $search_facets;

    $menu_items = array(
        'article' => array(
            'title' => t('Articles'),
            'subcontent' => '',
        ),
        'artists' => array(
            'title' => t('Artists'),
            'subcontent' => '',
        ),
        'artwork' => array(
            'title' => t('Artworks'),
            'subcontent' => '',
        ),
        'event' => array(
            'title' => t('Events'),
            'subcontent' => '',
        ),
        'opportunity' => array(
            'title' => t('Opportunities'),
            'subcontent' => '',
        ),
        'organizations' => array(
            'title' => t('Organizations'),
            'subcontent' => '',
        ),
    );

    $query = (isset($_GET['og'])) ? $_GET['og'] : array();

    $all_content_classes = array('active-trail');
    if (!isset($_GET['content'])) { $all_content_classes[] = 'selected'; }
    $all_content_count = $search_facets->getFacet('all_content')->getValue();
    $items[] = l('All Content'." ($all_content_count)", 'community', array('query' => $query,
                                                                            'attributes' => array(
                                                                                'class' => $all_content_classes)
                                                                            ));

    foreach($menu_items as $key => $item) {
        $attributes = array();
        if (isset($item['class'])) {
            $attributes['class'] = $item['class'];
        }
        //($text, $path, $key, $val, $attributes = array())
        $link = url_query_master($item['title'], 'community', 'content', $key, $attributes);
        $items[] = $link . $item['subcontent'];
    }

    return theme('item_list', array(
        'items' => $items,
        'attributes' => array('class' => 'community-content-menu'),
    ));
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function artist_community_form_user_profile_form_alter(&$form, &$form_state) {
    // Hide featured artists from non admins
    if (!user_access('administer users')) {
        unset($form['field_featured_artist']);
    }
}

/**
 * Implements hook_form_FORM_alter()
 */
function artist_community_form_alter(&$form, &$form_state) {

    if (in_array($form['#id'], array('artwork-node-form', 'article-node-form'))) {

        // Find the communities associated with each term
        $query = db_select('node', 'n');
        $query->leftJoin('field_data_field_medium', 'm', 'n.nid = m.entity_id');
        $result = $query->fields('n', array('nid', 'title'))
            ->fields('m')
            ->condition('type', 'community')
            ->orderBy('title')
            ->execute();

        // Build a nested array to provide grouped select options
        while ($row = $result->fetchAssoc()) {
           $rows[$row['title']][$row['field_medium_tid']] = $form['field_medium'][LANGUAGE_NONE]['#options'][$row['field_medium_tid']];
        }
        $form['field_medium'][LANGUAGE_NONE]['#options'] = $rows;
        unset($form['og_group_ref']);
        $form['#submit'][] = 'artist_community_artwork_or_article_form_submit';
    }

}

function artist_community_artwork_or_article_form_submit(&$form, &$form_state) {
    global $user;
    $user = user_load($user->uid);
    $values = array('entity' => $user);

    foreach($form_state['values']['field_medium']['und'] as $field) {
        $gid = gid_by_tid($field['tid']);
        // Add artwork to the group
        $form_state['values']['og_group_ref']['und'][]['target_id'] = $gid;
        // Add user to the group
        og_group('node', $gid, $values);
    }
}


/**
 * Given a taxonomy term id, return the community nid related to the term
 */
function gid_by_tid($tid) {
    $result = db_select('field_data_field_medium', 'm')
        ->fields('m', array('entity_id'))
        ->condition('field_medium_tid', $tid)
        ->condition('bundle', 'community')
        ->execute()
        ->fetchAssoc();
    return $result['entity_id'];
}

function artist_community_execute_query($index, $filters = array(), $sorts = array(), $rows = null) {
    // Initialize the solr query
    $options = array(
        'search id' => 'artist_community:' . $index,
        'parse mode' => 'terms',
        'limit' => $rows,
    );
    $query = search_api_query($index, $options);

    // Add filters
    foreach($filters as $filter) {
        $query->filter($filter);
    }

    // Add sorts
    foreach($sorts as $sort) {
        $term = $sort[0];
        $direction = isset($sort[1]) ? $sort[1] : null;
        if ($direction !== null) {
            $query->sort($term, $direction);
        } else {
            $query->sort($term);
        }
    }

    $index = $query->getIndex();
    $results = $query->execute();
    return $index->loadItems(array_keys($results['results']));
}

/**
 * Search an array for a key.  Append it if it doesnt exist.
 * remove it if it does
 */
function array_mashinator(&$array, $needle) {
    if (empty($array) || !in_array($needle, $array)) {
        $array[] = $needle;
    } else {
        // The needle exists in our query so remove it from the array
        $key = array_search($needle, $array);
        unset($array[$key]);
        $array = array_values($array);
    }
}

/**
 * Create links that accomodate our fabulious queries
 * @param $text
 *  The text to be displayed in the link
 * @param $path
 *  the url the link should link to
 * @param $key
 *  The key that the value should be linked to in the query
 * @param $val
 *  The value of the key
 * @param $attributes
 *  an array of attributes as defined by l()
 *
 * @return
 *  returns an html link
 */
function url_query_master($text, $path, $key, $val, $attributes = array()) {
    global $search_facets;
    _set_community_query_facets();

    $query = array();

    if (isset($_GET['og'])) {
        $query['og'] = $_GET['og'];
    }

    if (isset($_GET['content'])) {
        $query['content'] = $_GET['content'];
    }

    if (isset($_GET['global_search']) && !empty($_GET['global_search'])) {
        $query['global_search'] = $_GET['global_search'];
    }

    if (isset($_GET['artworks_for_sale'])) {
        $query['artworks_for_sale'] = $_GET['artworks_for_sale'];
    }

    if ($key == 'og') {
        if ($node = node_load($val)) {
            if (isset($_GET['og'][$val]) && $_GET['og'][$val] == 1) $attributes['class'][] = 'selected';
            /**
             * If the value is set then unset it so we can toggle
             * between states.  If it isnt set it as true since this
             * is the root menu item.
             */
            if (isset($query['og'][$val])) {
                unset($query['og'][$val]);
            } else {
                $query['og'][$val] = TRUE;
            }

            if (isset($attributes['facet_count'])) {
                $output = l($text.' ('.$attributes['facet_count'].')', $path, array('query' => $query, 'attributes' => $attributes));
            } else {
                $output = l($text, $path, array('query' => $query, 'attributes' => $attributes));
            }

            foreach($node->field_medium['und'] as $tid) {

                $attributes = array();

                // Reset the query so that the community values are included
                if (isset($_GET['og'][$val])) {
                    $query['og'][$val] = $_GET['og'][$val];
                } else {
                    $query['og'][$val] = array();
                }

                if (isset($_GET['og'][$val]) && is_array($_GET['og'][$val]) && in_array($tid['tid'], $_GET['og'][$val])) {
                    $attributes['class'] = array('active-trail','selected');
                }

                // if the query is true convert it to an array
                if ($query['og'][$val] == 1) {
                    $query['og'][$val] = array();
                }

                $term = taxonomy_term_load($tid['tid']);

                array_mashinator($query['og'][$val], $tid['tid']);

                // Build a sub menu of taxonomy terms
                $sub_items[] = l($term->name, 'community', array(
                    'query' => $query,
                    'attributes' => $attributes,
                ));
            }

            if (isset($sub_items)) {
                $output .= theme('item_list', array('items' => $sub_items));
            }

        }
    } else if ($key == 'content') {

        if (isset($_GET['content'][$val]) && $_GET['content'][$val] == 1) {
            $attributes['class'] = array('active-trail','selected');
        } else if (isset($_GET['content'][$val]) && is_array($_GET['content'][$val])) {
            $attributes['class'] = array('active-trail','active');
        }

        if (isset($query['content'][$val])) {
            unset($query['content'][$val]);
        } else {
            $query['content'][$val] = TRUE;
        }

        // should be able to just use the values for $val as index names and then put that into getFacet,
        // but to do that better figure out what the facet-exists test is
        $facet_count = 0;
        switch ($val) {
            case 'artists':
            case 'organizations':
                $facet_count = intval($search_facets->getFacet($val)->getValue());
                break;
            case 'event':
            case 'artwork':
            case 'article':
                $facet_count = intval($search_facets->getFacet($val.'s')->getValue());
                break;
            case 'opportunity':
                $facet_count = intval($search_facets->getFacet('opportunities')->getValue());
                break;
        }
        $output = l($text." ($facet_count)", $path, array('query' => $query, 'attributes' => $attributes));

        if ($val === 'artists') {

            $artist_sub_items = array();

            // build location search form
            $artist_search_class = '';
            $artist_location_search_string = (isset($_GET['artist_location_search'])) ? $_GET['artist_location_search'] : '';
            if (isset($_GET['content']['artists']) && $_GET['content']['artists'] == 1
                    && isset($_GET['artist_location_search'])) {
                $artist_search_class = 'active-trail selected';
            }
            $artist_sub_items[] = theme('artist_community_menu_location_search', array(
                'search_input_name' => 'artist_location_search',
                'action_url' => '/community',
                'form_class' => $artist_search_class,
                'related_filters' => isset($_GET['content']) ? $_GET['content'] : array(),
                'content_type' => 'artists',
                'search_field_value' => $artist_location_search_string,
            ));

            $artist_sub_items[] = '<span class="community-content-menu-subheading">Experience</span>';
            $experience_vocabulary_tree = taxonomy_get_tree(EXPERIENCE_VID);

            $experience_facets_rec = array();
            $experience_facets = $search_facets->getFacet('user_experiences');
            foreach ($experience_facets as $value => $count) {
                $experience_facets_rec[$value] = $count;
            }
            $experience_sub_items = array();
            $experience_sub_items = _artist_community_build_subitems_for_item($val, $experience_vocabulary_tree, $experience_facets_rec, $query);
            $artist_sub_items = array_merge($artist_sub_items, $experience_sub_items);

            $artist_sub_items[] = '<span class="community-content-menu-subheading">Practice</span>';
            $practice_vocabulary_tree = taxonomy_get_tree(PRACTICE_VID);
            $practice_facets_rec = array();
            $practice_facets = $search_facets->getFacet('user_practices');
            foreach ($practice_facets as $value => $count) {
                $practice_facets_rec[$value] = $count;
            }
            $practice_sub_items = _artist_community_build_subitems_for_item($val, $practice_vocabulary_tree, $practice_facets_rec, $query);
            $artist_sub_items = array_merge($artist_sub_items, $practice_sub_items);

            if (isset($artist_sub_items)) {
                $output .= theme('item_list', array('items' => $artist_sub_items));
            }

        } else if ($val === 'artwork') {

            $artwork_sub_items = array();
            $subject_vocabulary_tree = taxonomy_get_tree(SUBJECT_VID);

            // get artwork subject facet counts
            $artwork_subject_facets_rec = array();
            $artwork_subject_facets = $search_facets->getFacet('node_artwork_subject');
            foreach ($artwork_subject_facets as $value => $count) {
                $artwork_subject_facets_rec[$value] = $count;
            }
            $artwork_sub_items = _artist_community_build_subitems_for_item($val, $subject_vocabulary_tree, $artwork_subject_facets_rec, $query);

            // add for sale filter
            $artwork_for_sale_facets = $search_facets->getFacet('node_artwork_for_sale');
            $artwork_for_sale_facet_count = 0;
            foreach ($artwork_for_sale_facets as $value => $count) {
                if ($value === 'true') {
                    $artwork_for_sale_facet_count += $count;
                }
            }
            $artwork_for_sale_attributes = array();
            if (isset($_GET['content']['artwork_for_sale']) && $_GET['content']['artwork_for_sale'] == 1) {
                $artwork_for_sale_attributes['class'] = array('active-trail','selected');
            }
            $query['content']['artwork_for_sale'] = TRUE;
            $artwork_sub_items[] = l("For Sale ($artwork_for_sale_facet_count)", 'community', array(
                'query' => $query,
                'attributes' => $artwork_for_sale_attributes,
            ));
            if (isset($artwork_sub_items)) {
                $output .= theme('item_list', array('items' => $artwork_sub_items));
            }

        } else if ($val === 'article') {
            $article_sub_items = array();
            $article_category_vocabulary_tree = taxonomy_get_tree(ARTICLE_CATEGORY_VID);

            // get artwork subject facet counts
            $article_subject_facets_rec = array();
            $article_subject_facets = $search_facets->getFacet('node_article_category');
            foreach ($article_subject_facets as $value => $count) {
                $article_subject_facets_rec[$value] = $count;
            }
            $article_sub_items = _artist_community_build_subitems_for_item($val, $article_category_vocabulary_tree, $article_subject_facets_rec, $query);
            if (isset($article_sub_items)) {
                $output .= theme('item_list', array('items' => $article_sub_items));
            }
        } else if ($val === 'organizations') {
            $organizations_sub_items = array();
            $organizations_category_vocabulary_tree = taxonomy_get_tree(ORGANIZATIONS_CATEGORY_VID);

            // get facet counts
            $organizations_category_facets_rec = array();
            $organizations_category_facets = $search_facets->getFacet('organizations_type');
            foreach ($organizations_category_facets as $value => $count) {
                $organizations_category_facets_rec[$value] = $count;
            }
            $organizations_sub_items = _artist_community_build_subitems_for_item($val, $organizations_category_vocabulary_tree, $organizations_category_facets_rec, $query);
            if (isset($organizations_sub_items)) {
                $output .= theme('item_list', array('items' => $organizations_sub_items));
            }
        } else if ($val === 'event') {

            $event_sub_items = array();

            // build event location search form
            $event_search_class = '';
            $event_location_search_string = (isset($_GET['event_location_search'])) ? $_GET['event_location_search'] : '';
            if (isset($_GET['content']['event']) && $_GET['content']['event'] == 1
                    && (isset($_GET['event_location_search']) ||
                        isset($_GET['event_date']))) {
                $event_search_class = 'active-trail selected';
            }
            $event_sub_items[] = theme('artist_community_menu_location_search', array(
                'search_input_name' => 'event_location_search',
                'action_url' => '/community',
                'form_class' => $event_search_class,
                'related_filters' => isset($_GET['content']) ? $_GET['content'] : array(),
                'content_type' => 'event',
                'search_field_value' => $event_location_search_string,
            ));
            $event_sub_items[] = '<div class="menu-event-datepicker"></div>';

            // get event category facet counts
            $event_category_facets_rec = array();
            $event_category_facets = $search_facets->getFacet('node_category');
            foreach ($event_category_facets as $value => $count) {
                $event_category_facets_rec[$value] = $count;
            }

            // and build sub-items for categories
            $event_category_vocab_tree = taxonomy_get_tree(EVENT_CATEGORY_VID);
            $event_sub_items = array_merge($event_sub_items, _artist_community_build_subitems_for_item($val, $event_category_vocab_tree, $event_category_facets_rec, $query));

            // do past event thing
            $past_event_attributes = array();
            if (isset($_GET['content']['event_include_past']) && $_GET['content']['event_include_past'] == '1') {
                $past_event_attributes['class'] = array('active-trail','selected');
            }

            // OKAY, this is not great, but with the amount of time
            // available this is what I could get working.
            // The include past flag is *sort of* part of the event
            // filter, but not directly, so we're going to go directly
            // against $_GET here to build the on/off querystrings we
            // want.
            if (!isset($query['content']['event_include_past'])) {
                $new_arr = array('content' => array('event_include_past' => TRUE, 'event' => TRUE));
                $no_q = $_GET;
                unset($no_q['q']);
                if (isset($no_q['content'])) {
                    $merged_content = array_merge($new_arr['content'], $no_q['content']);
                    $no_q['content'] = $merged_content;
                } else {
                    $no_q['content'] = $new_arr['content'];
                }
                $new_arr = $no_q;
            } else {
                $no_q = $_GET;
                unset($no_q['q']);
                unset($no_q['content']['event_include_past']);
                if (isset($no_q['content']['event']) && !is_array($no_q['content']['event'])) {
                    unset($no_q['content']['event']);
                }
                $new_arr = $no_q;
            }
            $event_sub_items[] = "<span class='community-content-menu-separator'></span>";
            $event_sub_items[] = l("Include Past Events", 'community', array(
                'query' => $new_arr,
                'attributes' => $past_event_attributes,
            ));

            if (isset($event_sub_items)) {
                $output .= theme('item_list', array('items' => $event_sub_items));
            }
        } else if ($val === 'opportunity') {

            $opportunity_sub_items = array();

            // get opportunity type facet counts
            $opportunity_category_facets_rec = array();
            $opportunity_category_facets = $search_facets->getFacet('opportunity_type');
            foreach ($opportunity_category_facets as $value => $count) {
                $opportunity_category_facets_rec[$value] = $count;
            }
            $opportunity_category_vocab_tree = taxonomy_get_tree(OPPORTUNITY_TYPE_VID);
            $opportunity_sub_items = _artist_community_build_subitems_for_item($val, $opportunity_category_vocab_tree, $opportunity_category_facets_rec, $query);
            if (isset($opportunity_sub_items)) {
                $output .= theme('item_list', array('items' => $opportunity_sub_items));
            }
        }
    }

    return $output;
}

// used to take a top-level item and its sub-items as
// an iterable of tid's, and return an array of the
// sub-items. meant to reduce some duplication above.
function _artist_community_build_subitems_for_item ($val, $taxonomy_terms, $facets, $query) {

    $sub_items = array();
    foreach($taxonomy_terms as $term) {
        $attributes = array();
        $facet_count = isset($facets[$term->tid]) ? intval($facets[$term->tid]) : 0;

        // Reset the query so that the content sub-categories are included
        if (isset($_GET['content'][$val])) {
            $query['content'][$val] = $_GET['content'][$val];
        } else {
            $query['content'][$val] = array();
        }

        if (isset($_GET['content'][$val]) && is_array($_GET['content'][$val]) && in_array($term->tid, $_GET['content'][$val])) {
            $attributes['class'] = array('active-trail','selected');
        }

        // if the query is true convert it to an array
        if ($query['content'][$val] == 1) {
            $query['content'][$val] = array();
        }

        array_mashinator($query['content'][$val], $term->tid);

        // intervene to treat event_include_past as a special case
        if (isset($query['content']['event_include_past']) &&
            $query['content']['event_include_past'] == 1 &&
            empty($query['content']['event']) &&
            count($query['content']) == 2) {
            $query['content']['event'] = 1;
        }


        // Build a sub menu of taxonomy terms
        $sub_items[] = l($term->name." ($facet_count)", 'community', array(
            'query' => $query,
            'attributes' => $attributes,
        ));
    }
    return $sub_items;

}

//Remove extra media values from the teaser view
function artist_community_entity_view($entity, $type, $view_mode, $langcode) {
    if ($view_mode === 'teaser' && $entity->type === 'artwork') {
        if (!empty($entity->content['field_media'])) {
            $entity->content['field_media']['#items'] = array_slice($entity->content['field_media']['#items'], 0, 1);
        }
    }
}

// endpoint for getting community results
function artist_community_get_items () {
    // get url params, then pass them on
    $local_og = (isset($_GET['og'])) ? $_GET['og'] : null;
    $local_content = (isset($_GET['content'])) ? $_GET['content'] : null;
    $offset = (isset($_GET['start']) && is_numeric($_GET['start'])) ? intval($_GET['start']) : null;
    $limit = (isset($_GET['rows']) && is_numeric($_GET['rows'])) ? intval($_GET['rows']) : null;
    $local_sort = (isset($_GET['sort'])) ? $_GET['sort'] : null;
    $local_sort_direction = (isset($_GET['sort_direction'])) ? $_GET['sort_direction'] : null;
    $rendernodes = true;

    $resultset = _artist_community_get_items_query($local_og, $local_content, $offset, $limit, $rendernodes, $local_sort, $local_sort_direction);
    echo implode('', $resultset['results']);
    drupal_exit();
}

function _artist_community_get_items_query ($local_og = null,
                                            $local_content = null,
                                            $offset = null,
                                            $limit = null,
                                            $rendernodes = null,
                                            $local_sort = null,
                                            $local_sort_direction = null) {

    global $solarium_config;
    global $search_facets;

    // declare container for all results
    $all_results = array();

    // containers for the query conditions we'll build below
    $nodeQueryBuilder = array();
    $userQueryBuilder = array();

    // couple of filter triggers for the mixed content-type/user-type filtering
    $filtered_by_type = false;
    $filtered_by_type_and_user = false;
    $filtered_by_events_only = false;
    $filtered_by_events_and_location = (isset($_GET['event_location_search']));
    $filtered_by_event_date = false;
    $filtered_by_event_include_past = false;

    // $filtered_by_user_only = false;
    $filtered_by_user_location = false;

    // instantiate our client and query object
    $client = new Solarium\Client($solarium_config);
    $solarium_query = $client->createSelect();

    // add the search term if a user entered one
    if (isset($_GET['global_search']) && !empty($_GET['global_search'])) {
        // @ddamico: there is surely a better way to do this,
        // but I couldn't get exact term searches to work unless
        // I included the search term both with and without
        // the wildcard (it's as if the * is behaving as 1 or more
        // instead of 0 or more)
        $globalQs = AC_GLOBAL_SEARCH_FIELD.":{$_GET['global_search']}* OR ".AC_GLOBAL_SEARCH_FIELD.":{$_GET['global_search']} OR ";
        $globalQs .= AC_PROFILE_SEARCH_FIELD.":{$_GET['global_search']}* OR ".AC_PROFILE_SEARCH_FIELD.":{$_GET['global_search']}";
        $solarium_query->setQuery($globalQs);
    }

    if (isset($local_content['event_include_past']) &&
        $local_content['event_include_past'] === '1') {
        $filtered_by_event_include_past = true;
    }


    // Handle Organic groups and taxonomies
    if ($local_og !== null) {
        foreach($local_og as $og_id => $terms) {

            // Add taxonomy filters for a specific taxonomy
            if (is_array($terms)) {
                foreach($terms as $term) {
                    $nodeQueryBuilder[] = AC_MEDIUM_FIELD.":$term";
                }
            } else {
                $nodeQueryBuilder[] = AC_OG_GROUP_REF_FIELD.":$og_id";
            }
            $userQueryBuilder[] = AC_USER_NODE_FIELD.":$og_id";
        }
    } else {
        if ($filtered_by_event_include_past) {
            $nodeQueryBuilder[] = '('.AC_TYPE_FIELD.':article OR '.AC_TYPE_FIELD.':artwork OR '.AC_TYPE_FIELD.':event OR ('.AC_TYPE_FIELD.':opportunity AND '.AC_OPP_ANNOUNCE_DATE_FIELD.':[* TO NOW]))';
        } else {
            $nodeQueryBuilder[] = '('.AC_TYPE_FIELD.':article OR '.AC_TYPE_FIELD.':artwork OR ('.AC_TYPE_FIELD.':opportunity AND '.AC_OPP_ANNOUNCE_DATE_FIELD.':[* TO NOW]) OR ('.AC_TYPE_FIELD.":event AND ds_field_date\:value:[NOW TO *]))";
        }
    }

    $nodeQueryBuilderString = (count($nodeQueryBuilder) !== 0) ? ' AND ('.implode(' OR ', $nodeQueryBuilder).')' : '';
    $userQueryBuilderString = (count($userQueryBuilder) !== 0) ? ' AND ('.implode(' OR ', $userQueryBuilder).')' : '';

    if ($local_content !== null) {

        if (isset($_GET['content']) &&
            count($_GET['content']) === 1 &&
            !(isset($_GET['og'])) &&
            isset($_GET['content']['event'])) {

            $filtered_by_events_only = true;
        }

        if (isset($_GET['content']) &&
            count($_GET['content']) === 1 &&
            !(isset($_GET['og'])) &&
            isset($_GET['content']['event']) &&
            isset($_GET['event_date'])) {

            $filtered_by_event_date = true;
        }

        $contentFilters = array(
            'node' => array(),
            'user' => array()
        );


        foreach($local_content as $type => $value) {
            $forSaleQuery = null;
            switch($type) {
                case 'artwork':
                case 'artwork_for_sale':
                case 'article':
                case 'opportunity':
                    // subject for artwork, 'is_field_category' for the others
                    $contextQueryBuilder = array();
                    $typeQuery = AC_TYPE_FIELD.":$type";
                    $subQuery = null;
                    if ($type === 'artwork') {
                        $subQueryTargetField = AC_SUBJECT_FIELD;
                    } else if ($type === 'article') {
                        $subQueryTargetField = AC_ARTICLE_CATEGORY_FIELD;
                    } else if ($type === 'opportunity') {
                        $subQueryTargetField = AC_OPP_TYPE_FIELD;
                    } else {
                        $subQueryTargetField = AC_CATEGORY_FIELD;
                    }
                    if (isset($local_content[$type]) &&
                        is_array($local_content[$type]) &&
                        $type !== 'artwork_for_sale') {
                        $subQuery = implode(' OR ', $local_content[$type]);
                    }
                    if (isset($local_content['artwork_for_sale']) &&
                        $local_content['artwork_for_sale'] === '1') {
                        $typeQuery = AC_TYPE_FIELD.":artwork";
                        $forSaleQuery = AC_FOR_SALE_FIELD.':true';
                    }
                    if (!is_null($subQuery) && !is_null($forSaleQuery)) {
                        $contextQueryString = "($typeQuery AND ($subQueryTargetField:($subQuery) AND $forSaleQuery))";
                    } else if (!is_null($subQuery) && is_null($forSaleQuery)) {
                        $contextQueryString = "($typeQuery AND ($subQueryTargetField:($subQuery)))";
                    } else if (is_null($subQuery) && !is_null($forSaleQuery)) {
                        $contextQueryString = "($typeQuery AND ($forSaleQuery))";
                    } else {
                        $contextQueryString = "($typeQuery)";
                    }
                    $contentFilters['node'][] = $contextQueryString;
                    break;
                case 'event':
                    $contextQueryBuilder = array();
                    $typeQuery = AC_TYPE_FIELD.":$type";
                    $subQuery = null;
                    $subQueryTargetField = AC_CATEGORY_FIELD;
                    if (!isset($_GET['content']['event_include_past']) ||
                        (isset($_GET['content']['event_include_past']) && isset($_GET['content']['event_include_past']) != '1')) {
                        $typeQuery .= " AND ds_field_date\:value:[NOW TO *]";
                    }
                    if (isset($_GET['event_location_search'])) {
                        $event_coords = _get_location_coords_from_search_string(urldecode($_GET['event_location_search']));
                        $eventLocationSearchString = '{!geofilt sfield='.AC_USER_LATLNG_FIELD." pt=$event_coords d=".NEAR_ME_RADIUS.'}';
                        $solarium_query->createFilterQuery('event_location')->setQuery($eventLocationSearchString);
                    }
                    $contextQueryString = "($typeQuery)";
                    $contentFilters['node'][] = $contextQueryString;
                    break;
                case 'artists':
                    $roleQuery = AC_USER_ROLES_FIELD.":".ARTIST_ROLE;
                    $subQuery = array();
                    if (is_array($local_content[$type])) {
                        $practices = $experiences = array();
                        foreach ($local_content[$type] as $tid) {
                            $term = taxonomy_term_load($tid);
                            if ($term->vid === EXPERIENCE_VID) {
                                $experiences[] = $tid;
                            } else if ($term->vid === PRACTICE_VID) {
                                $practices[] = $tid;
                            }
                        }
                        if (!empty($experiences)) { $subQuery[] = str_replace(':','\:',AC_USER_EXPERIENCE_FIELD).':('.implode(' OR ', $experiences).')'; }
                        if (!empty($practices)) { $subQuery[] = str_replace(':','\:',AC_USER_PRACTICE_FIELD).':('.implode(' OR ', $practices).')'; }
                    }
                    if (isset($_GET['artist_location_search'])) {
                        $artist_coords = _get_location_coords_from_search_string(urldecode($_GET['artist_location_search']));
                        $userLocationSearchString = '{!geofilt sfield='.AC_USER_LATLNG_FIELD." pt=$artist_coords d=".NEAR_ME_RADIUS.'}';
                        $solarium_query->createFilterQuery('artist_location')->setQuery($userLocationSearchString);
                    }
                    $contextQueryString = (!empty($subQuery)) ? "(($roleQuery) AND (".implode(' AND ', $subQuery)."))" : "($roleQuery)";
                    $contentFilters['user'][] = $contextQueryString;
                    break;
                case 'organizations':
                    $roleQuery = AC_USER_ROLES_FIELD.":".ORG_ROLE;
                    $subQuery = array();
                    if (is_array($local_content[$type])) {
                        $org_categories = array();
                        foreach ($local_content[$type] as $tid) {
                            $org_categories[] = $tid;
                        }
                        $escapedFieldName = str_replace(':', '\:', AC_ORG_CATEGORY_FIELD);
                        if (!empty($org_categories)) { $subQuery[] = $escapedFieldName.':('.implode(' OR ', $org_categories).')'; }
                    }
                    $contextQueryString = (!empty($subQuery)) ? "(($roleQuery) AND (".implode(' AND ', $subQuery)."))" : "($roleQuery)";
                    $contentFilters['user'][] = $contextQueryString;
                    break;
            }

        }
        $contentFilterQueryStrings = array();
        if (!empty($contentFilters['node'])) {
            $contentFilterQueryStrings[] = '(index_id:'.NODE_INDEX.' AND '.implode(' AND ', $contentFilters['node']).')';
        }
        if (!empty($contentFilters['user'])) {
            $contentFilterQueryStrings[] = '(index_id:'.USER_INDEX.' AND '.AC_SORT_BY_NAME_FIELD.':[\'\' TO *] AND '.implode(' AND ', $contentFilters['user']).')';
        }
        $contentFilterQueryString = implode(' OR ', $contentFilterQueryStrings);
        $solarium_query->createFilterQuery($type)->setQuery($contentFilterQueryString);
    }

    $communityQueryString = "(index_id:".NODE_INDEX."$nodeQueryBuilderString AND is_status:1) OR (index_id:".USER_INDEX." AND ".AC_SORT_BY_NAME_FIELD.":['' TO *]$userQueryBuilderString)";

    $solarium_query->createFilterQuery('the_thing')->setQuery($communityQueryString);
    if ($offset !== null && is_int($offset)) {
        $solarium_query->setStart($offset);
    }
    if ($limit !== null && is_int($limit)) {
        $solarium_query->setRows($limit);
    }

    // if we're filtered by events, sort by event start date
    // instead of date created
    if ($filtered_by_events_only) {

        if (!is_null($local_sort_direction) && $local_sort_direction === 'DESC') {
            $solarium_query->addSort(AC_SORT_BY_DATE_FIELD, $solarium_query::SORT_DESC);
        } else {
            $solarium_query->addSort(AC_SORT_BY_DATE_FIELD, $solarium_query::SORT_ASC);
        }

        $solarium_query->setStart(null);
        $solarium_query->setRows(null);

        if ($filtered_by_event_date === true) {

            // validate date param
            $incoming_date = date_parse_from_format('Y-m-d', $_GET['event_date']);

            // if it's good, go ahead with the filter,
            // creating a time range to span the whole day
            if ($incoming_date !== false) {
                $the_date = new DateTime($_GET['event_date']);
                $start = $the_date->format('Y-m-d\T00:00:00\Z');
                $end = $the_date->format('Y-m-d\T23:59:59\Z');
                $solarium_query->createFilterQuery('event_date_filter')->setQuery("ds_field_date\:value:[$start TO $end]");
            }
        }
    } else {
        // ss_full_name
        $sort_key = AC_CREATED_FIELD;
        $sort_direction = $solarium_query::SORT_DESC;
        if (!is_null($local_sort)) {
            if ($local_sort === 'alpha') {
                $sort_key = AC_SORT_BY_NAME_FIELD;
            } else if ($local_sort === 'date') {
                $sort_key = AC_SORT_BY_DATE_FIELD;
            } else if ($local_sort === 'recent') {
                $sort_key = AC_SORT_BY_RECENT_FIELD;
            } else if ($local_sort === 'collected') {
                $sort_key = 'is_flags_count';
            }
        }
        if (!is_null($local_sort_direction) && $local_sort_direction === 'ASC') {
            $sort_direction = $solarium_query::SORT_ASC;
        }
        $solarium_query->addSort($sort_key, $sort_direction);
    }

    // here we cut in to say "if there are any community filters applied,
    // then apply ONLY THEM to the facet counts, not the content types
    $facet_query_string = null;
    if (isset($_GET['og'])) {
        $facet_query_string = implode(' OR ', array_merge($nodeQueryBuilder, $userQueryBuilder));
        unset($search_facets);
    } else if (isset($_GET['global_search']) && !empty($_GET['global_search'])) {
        $facet_query_string = $globalQs;
        unset($search_facets);
    }
    _set_community_query_facets($facet_query_string);

    // enable debug
    // $debug = $solarium_query->getDebug();

    // set the select
    $resultset = $client->select($solarium_query);

    // $request = $client->createRequest($solarium_query);
    // dpm((string)$request);

    // display the debug results
    // dvm($solarium_query);
    // $debugResult = $resultset->getDebug();
    // dpm($debugResult->getQueryString());
    // dpm($debugResult->getParsedQuery());
    // dpm($debugResult->getQueryParser());
    // dpm($debugResult->getOtherQuery());
    // dvm($debugResult->getExplain());


    // if we actually want markup back, get it ready
    if ($rendernodes === true) {
        if (count($resultset) > 0) {
            foreach($resultset as $item) {
                $the_element_string = '';
                switch ($item->index_id) {
                    case USER_INDEX:
                        $the_class_suffix = 'user';
                        $the_element_string = theme('artist_community_artist_profile', array('user' => user_load($item->is_uid)));
                        break;
                    case NODE_INDEX:
                        $the_node = node_load($item->is_nid);
                        $the_class_suffix = $the_node->type;
                        $the_element_string = render(node_view($the_node, 'teaser'));
                        break;
                }

                // yuck, maybe get this into a themed render if time allows
                $element_string_arr = array();
                $element_string_arr[] = "<div class='item item-$the_class_suffix'>";
                $element_string_arr[] = $the_element_string;
                $element_string_arr[] = "</div>";
                $all_results[] = implode('', $element_string_arr);
            }

            $current_start = (isset($_GET['start'])) ? intval($_GET['start']) : 0;
            $current_rows = (isset($_GET['rows'])) ? intval($_GET['rows']) : SEARCH_DEFAULT_ROWS;
            $new_start = (!is_null($current_start) && !is_null($current_rows)) ? $current_start + $current_rows : 0;

            $new_get = array(
                'og' => (isset($_GET['og'])) ? $_GET['og'] : null,
                'content' => (isset($_GET['content'])) ? $_GET['content'] : null,
                'rows' => (isset($_GET['rows'])) ? $_GET['rows'] : SEARCH_DEFAULT_ROWS,
                'start' => $new_start,
            );
            $all_results[] = '<div class="item item-more"><a href="/communitygetitems?'.http_build_query($new_get).'">Show me more!</a></div>';
        } else {
            $all_results[] = '<li class="feed-item infinify-terminator"></li>';
        }

    // or, if we just want the data back, get that ready
    } else {
        foreach($resultset as $item) {
            switch ($item->index_id) {
                case USER_INDEX:
                    $all_results[] = array('type' => 'user', 'item' => user_load($item->is_uid));
                    break;
                case NODE_INDEX:
                    $all_results[] = array('type' => 'node', 'item' => node_load($item->is_nid));
                    break;
            }
        }
    }
    return array(
        'results' => $all_results,
        'total_num_results' => $resultset->getNumFound()
    );
}

function _get_location_coords_from_search_string ($search_string) {
    $point = geocoder('google', $search_string);
    $geoJSON = $point->out('json');
    $parsedPoint = json_decode($geoJSON);
    $lat = $parsedPoint->coordinates[1];
    $long = $parsedPoint->coordinates[0];
    if (isset($parsedPoint->coordinates)) {
        return "$lat,$long";
    }
    return false;
}

function _set_community_query_facets ($filter_query_string = null) {

    global $solarium_config;
    global $search_facets;

    if (!isset($search_facets)) {
        $client = new Solarium\Client($solarium_config);
        $solarium_query = $client->createSelect();
        $solarium_query->createFilterQuery('published_filter')->setQuery('is_status:1');

        // put together the base query string, taking past events
        // into account if needed
        if (isset($_GET['global_search']) && !empty($_GET['global_search'])) {
            $finished_query_string = $filter_query_string;
        } else {
            if (isset($_GET['content']['event_include_past']) && $_GET['content']['event_include_past'] == '1') {
                $base_query_string = "(index_id:".NODE_INDEX." AND ((".AC_TYPE_FIELD.":article OR ss_type:artwork OR (".AC_TYPE_FIELD.":opportunity AND ".AC_OPP_ANNOUNCE_DATE_FIELD.":[* TO NOW]) OR ".AC_TYPE_FIELD.":event))) OR (index_id:".USER_INDEX." AND ".AC_SORT_BY_NAME_FIELD.":['' TO *])";
            } else {
                $base_query_string = "(index_id:".NODE_INDEX." AND ((".AC_TYPE_FIELD.":article OR ss_type:artwork OR (".AC_TYPE_FIELD.":opportunity AND ".AC_OPP_ANNOUNCE_DATE_FIELD.":[* TO NOW]) OR (".AC_TYPE_FIELD.":event AND ds_field_date\:value:[NOW TO *])))) OR (index_id:".USER_INDEX." AND ".AC_SORT_BY_NAME_FIELD.":['' TO *])";
            }
            $finished_query_string = (!is_null($filter_query_string)) ? "($base_query_string) AND $filter_query_string" : $base_query_string;
        }
        $solarium_query->createFilterQuery('community')->setQuery($finished_query_string);

        $facetSet = $solarium_query->getFacetSet();
        $facetSet->createFacetField('node_medium')->setField(AC_MEDIUM_FIELD);
        $facetSet->createFacetField('og_node_membership')->setField(AC_OG_GROUP_REF_FIELD);
        $facetSet->createFacetField('og_user_group')->setField(AC_USER_NODE_FIELD);
        $facetSet->createFacetField('og_user_membership')->setField(AC_USER_OG_MEMBERSHIP);
        $facetSet->createFacetField('user_practices')->setField(AC_USER_PRACTICE_FIELD);
        $facetSet->createFacetField('user_experiences')->setField(AC_USER_EXPERIENCE_FIELD);
        $facetSet->createFacetField('node_type')->setField(AC_TYPE_FIELD);
        $facetSet->createFacetField('node_artwork_subject')->setField(AC_SUBJECT_FIELD);
        $facetSet->createFacetField('node_artwork_for_sale')->setField(AC_FOR_SALE_FIELD);
        $facetSet->createFacetField('node_category')->setField(AC_CATEGORY_FIELD);
        $facetSet->createFacetField('node_article_category')->setField(AC_ARTICLE_CATEGORY_FIELD);
        $facetSet->createFacetField('organizations_type')->setField(AC_ORG_CATEGORY_FIELD);
        $facetSet->createFacetField('opportunity_type')->setField(AC_OPP_TYPE_FIELD);

        // use constants here for index_id and field and so on
        $facetSet->createFacetQuery('artists')->setQuery('index_id:'.USER_INDEX.' AND '.AC_SORT_BY_NAME_FIELD.':[\'\' TO *] AND im_roles:'.ARTIST_ROLE);
        $facetSet->createFacetQuery('organizations')->setQuery('index_id:'.USER_INDEX.' AND '.AC_SORT_BY_NAME_FIELD.':[\'\' TO *] AND im_roles:'.ORG_ROLE);
        if (isset($_GET['content']['event_include_past']) && $_GET['content']['event_include_past'] == '1') {
            $facetSet->createFacetQuery('events')->setQuery('index_id:'.NODE_INDEX.' AND '.AC_TYPE_FIELD.':event');
        } else {
            $facetSet->createFacetQuery('events')->setQuery('index_id:'.NODE_INDEX.' AND '.AC_TYPE_FIELD.':event  AND ds_field_date\:value:[NOW TO *]');
        }
        $facetSet->createFacetQuery('articles')->setQuery('index_id:'.NODE_INDEX.' AND '.AC_TYPE_FIELD.':article');
        $facetSet->createFacetQuery('artworks')->setQuery('index_id:'.NODE_INDEX.' AND '.AC_TYPE_FIELD.':artwork');
        $facetSet->createFacetQuery('opportunities')->setQuery('index_id:'.NODE_INDEX.' AND '.AC_TYPE_FIELD.':opportunity');
        $facetSet->createFacetQuery('all_content')->setQuery('(index_id:'.NODE_INDEX.' AND (('.AC_TYPE_FIELD.':article OR '.AC_TYPE_FIELD.':artwork OR '.AC_TYPE_FIELD.':event))) OR (index_id:'.USER_INDEX.' AND '.AC_SORT_BY_NAME_FIELD.':[\'\' TO *])');

        $resultset = $client->select($solarium_query);
        $search_facets = $resultset->getFacetSet();
    }
}


// hook to add css to media iframe
function artist_community_library_alter(&$libraries, $module) {
    if ($module == 'media') {
        $path = drupal_get_path('theme', 'mnartists');
        $libraries['media_browser_page']['css'][$path . '/css/jquery-ui.css']['group'] = CSS_DEFAULT;
    }
}


function artist_community_current_filters_as_banner_string () {

    $og_arr = $content_arr = $final_arr = array();
    $local_og = (isset($_GET['og'])) ? $_GET['og'] : null;
    $local_content = (isset($_GET['content'])) ? $_GET['content'] : null;
    if ($local_og !== null) {
        foreach($local_og as $og_id => $terms) {
            if (is_array($terms)) {
                foreach($terms as $term) {
                    $og_arr[] = taxonomy_term_load($term)->name;
                }
            } else {
                $og_arr[] = node_load($og_id)->title;
            }
        }
    }

    if ($local_content !== null) {
        foreach($local_content as $type => $value) {
            $context_content_arr = array();
            $content_header = $type;
            $pluralized_content_header = '';
            if ($content_header === 'opportunity') {
                $pluralized_content_header = 'opportunities';
            } else if ($content_header === 'artwork_for_sale') {
                $pluralized_content_header = 'Artworks For Sale';
            } else if (substr($content_header, (strlen($content_header) - 1), 1) !== 's') {
                $pluralized_content_header = $content_header.'s';
            } else {
                $pluralized_content_header = $content_header;
            }
            $pluralized_content_header = ucwords($pluralized_content_header);

            if (is_array($value)) {
                foreach ($local_content[$type] as $tid) {
                    $context_content_arr[] = taxonomy_term_load($tid)->name;
                }
            }
            if ($type === 'artists' && isset($_GET['artist_location_search'])) {
                $context_content_arr[] = $_GET['artist_location_search'];
            } else if ($type === 'event' && isset($_GET['event_location_search'])) {
                $context_content_arr[] = $_GET['event_location_search'];
            }
            $content_arr[] = (!empty($context_content_arr)) ? sprintf('(%s / %s)', $pluralized_content_header, implode(' + ', $context_content_arr)) : "($pluralized_content_header)";
        }
    }
    if (!empty($og_arr)) { $final_arr[] = '('.implode(' + ', $og_arr).')'; }
    if (!empty($content_arr)) { $final_arr[] = (count($content_arr) > 1) ? '('.implode(' + ', $content_arr).')' : implode(' + ', $content_arr); }
    $banner_string = implode(' x ', $final_arr);
    if (isset($_GET['global_search']) && !empty($_GET['global_search'])) {
        $banner_string .= ' + "'.urldecode($_GET['global_search']).'"';
    }
    return $banner_string;

}

// @TODO would this possibly be better placed in the theme? making
// other modules dependant on community just for this seems incorrect
function artist_community_image_for_artwork_image_uri ($uri, $image_style = null) {
    $working_uri = '';
    $scheme = file_uri_scheme($uri);
    $mime_type = file_get_mimetype($uri);
    $non_image_mime_types = array("application/pdf", "text/plain");

    switch ($scheme) {
      case ('soundcloud'):
      case ('youtube'):
      case ('vimeo'):
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $working_uri = $wrapper->getLocalThumbnailPath();
        break;
      case ('public'):
        $mime_type = file_get_mimetype($uri);
        if (in_array($mime_type, $non_image_mime_types)) {
            $working_uri = drupal_get_path('theme', 'mnartists')."/images/".DEFAULT_DOCUMENT_IMAGE;
        } else {
            // otherwise assume it's an image
            $working_uri = $uri;
        }
        break;
    }
    if ($image_style !== null && !in_array($mime_type, $non_image_mime_types)) {
        return image_style_url($image_style, $working_uri);
    }
    return $working_uri;

}


function artist_community_preprocess_page (&$vars) {
    $menu_item = menu_get_item();
    if ($menu_item['path'] === 'taxonomy/term/%') {
        // include js for tags paths
        ctools_add_js('taxonomy', 'artist_community');
    }
}