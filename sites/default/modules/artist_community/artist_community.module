<?php

/**
 * @file
 * Code for the Artist Community feature.
 * NB: the label for this field was changed during development from 'medium' to 'community', and this is why
 *      you will find the data in field_medium, not field_community.
 */

// some indices
define('NODE_INDEX', 'default_node_index');
define('USER_INDEX', 'users');
define('SUBJECT_VID', '8');
define('EXPERIENCE_VID', '12');
define('PRACTICE_VID', '13');

include_once 'artist_community.features.inc';

// field names for use in our solr queries
define('AC_OG_GROUP_REF_FIELD', 'im_og_group_ref');
define('AC_MEDIUM_FIELD', 'im_field_medium');
define('AC_SUBJECT_FIELD', 'im_field_subject_concept');
define('AC_USER_NODE_FIELD', 'im_og_user_node');
define('AC_TYPE_FIELD', 'ss_type');
define('AC_USER_ROLES_FIELD', 'im_roles');
define('AC_USER_PRACTICE_FIELD', 'im_practice');
define('AC_USER_EXPERIENCE_FIELD', 'im_experience');
define('AC_CREATED_FIELD', 'ds_created');

// config for solarium
global $solarium_config;
$solarium_config = array(
    'endpoint' => array(
        'localhost' => array(
            'host' => '127.0.0.1',
            'port' => 8080,
            'path' => '/solr/',
        )
    )
);



/**
 * Implements hook_menu()
 */
function artist_community_menu() {
    $items['community'] = array(
        'title'             => t('Community'),
        'page callback'     => 'artist_community_search_page',
        'access arguments'  => array('access content'),
        'file'              => 'artist_community.pages.inc',
    );
    $items['communitygetitems'] = array(
        'title'             => t('Community Get Items'),
        'access arguments'  => array('access content'),
        'page callback'     => 'artist_community_get_items',
    );

    return $items;
}

/**
 * Implements hook_theme()
 */
function artist_community_theme() {
    return array(
        'artist_community_page' => array(
            'variables' => array(
                'content' => array(),
            ),
            'template' => 'templates/artist-community-page',
        ),
        'artist_community_artist_profile' => array(
            'variables' => array(
                'user' => array(),
            ),
            'file' => 'artist_community.templates.inc',
            'template' => 'templates/artist-profile',
        ),
        'artist_community_menu_search' => array(
            'variables' => array(),
            'template' => 'templates/mna-search-block'
        )
    );
}

/**
 * Implements hook_block_info()
 */
function artist_community_block_info() {

    $blocks['menu-search'] = array(
        'info' => t('Menu Search'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    $blocks['community'] = array(
        'info' => t('Artist Community - Communities'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    $blocks['content'] = array(
        'info' => t('Artist Community - Content'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php return _artist_community_block_visibility(); ?>'
    );

    return $blocks;
}

function _artist_community_block_visibility() {
    global $user;

    if ((arg(0) == 'user' && $user->uid == arg(1)) ||
            (arg(0) == 'user' && !user_is_logged_in()) ||
            (arg(0) == "node" && in_array(arg(1), array("edit", "add"))) ||
            (arg(0) == "node" && in_array(arg(2), array("edit"))) ||
            (arg(0) == 'user' && in_array(arg(1), array("saved-filters", "feed")))
        ) {
        return false;
    }

    return true;
}

function artist_community_block_view($delta = '') {
    switch($delta) {
        case 'community':
            $block['subject'] = t('Communities');
            $block['content'] = _community_block_community();
            break;
        case 'content':
            $block['subject'] = t('Content');
            $block['content'] = _community_block_content();
            break;
        case 'menu-search':
            $block['subject'] = t('Search');
            $block['content'] = _community_block_search();
    }

    return $block;
}

function _community_block_search() {
    return theme("artist_community_menu_search", array(

    ));
}

/**
 * @return
 * returns a rendered menu for content
 */
function _community_block_community() {
    $items = array();

    // render community menu;
    $results = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->condition('type', 'community')
        ->execute()
        ->fetchAll();

    foreach($results as $result) {
        $sub_items = array();

        // build the top level link
        $attributes = array(
            'class' => (isset($_GET['og'][$result->nid]))
                    ? array('active-trail') : array(),
        );
        $list = url_query_master($result->title, 'community', 'og', $result->nid, $attributes);
        $items[$result->title] = $list;
    }

    ksort($items);
    array_unshift($items, l('All Communities', 'community'));

    return theme('item_list', array(
        'items' => $items,
        'attributes' => array('class' => 'artist-community-menu'),
    ));
}

/**
 * @return
 * returns a rendered menu for content types
 */
function _community_block_content() {
    // render content menu;

    // @TODO either sort these or do something on front-end to separate them visually
    $menu_items = array(
        'article' => array(
            'title' => t('Articles'),
            'subcontent' => '',
        ),
        'artists' => array(
            'title' => t('Artists'),
            'subcontent' => '',
        ),
        'artwork' => array(
            'title' => t('Artworks'),
            'subcontent' => '',
        ),
        'event' => array(
            'title' => t('Events'),
            'subcontent' => '',
        ),
        'opportunity' => array(
            'title' => t('Opportunities'),
            'subcontent' => '',
        ),
        'organizations' => array(
            'title' => t('Organizations'),
            'subcontent' => '',
        ),
    );

    $query = (isset($_GET['og'])) ? $_GET['og'] : array();

    $items[] = l('All Content', 'community', array('query' => $query));

    foreach($menu_items as $key => $item) {
        $attributes = array();
        if (isset($item['class'])) {
            $attributes['class'] = $item['class'];
        }
        //($text, $path, $key, $val, $attributes = array())
        $link = url_query_master($item['title'], 'community', 'content', $key, $attributes);
        $items[] = $link . $item['subcontent'];
    }

    return theme('item_list', array(
        'items' => $items,
        'attributes' => array('class' => 'community-content-menu'),
    ));
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function artist_community_form_user_profile_form_alter(&$form, &$form_state) {
    // Hide featured artists from non admins
    if (!user_access('administer users')) {
        unset($form['field_featured_artist']);
    }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function artist_community_form_artwork_node_form_alter(&$form, &$form_state) {

    // add multiselect javascript and css, we're going to use that to
    // alter multiselect widget
    drupal_add_js(drupal_get_path('module', 'artist_community') .'/vendor/jquery.multiselect/jquery.multiselect.min.js');
    drupal_add_css(drupal_get_path('module', 'artist_community') .'/vendor/jquery.multiselect/jquery.multiselect.css');
    drupal_add_js(drupal_get_path('module', 'artist_community') .'/js/artwork_form.js');

    // Find the communities associated with each term
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_medium', 'm', 'n.nid = m.entity_id');
    $result = $query->fields('n', array('nid', 'title'))
        ->fields('m')
        ->condition('type', 'community')
        ->orderBy('title')
        ->execute();

    // Build a nested array to provide grouped select options
    while ($row = $result->fetchAssoc()) {
       $rows[$row['title']][$row['field_medium_tid']] = $form['field_medium']['und']['#options'][$row['field_medium_tid']];
    }
    $form['field_medium']['und']['#options'] = $rows;
    unset($form['og_group_ref']);
    $form['#submit'][] = 'artist_community_artwork_form_submit';
}

function artist_community_artwork_form_submit(&$form, &$form_state) {
    global $user;
    $user = user_load($user->uid);
    $values = array('entity' => $user);

    foreach($form_state['values']['field_medium']['und'] as $field) {
        $gid = gid_by_tid($field['tid']);
        // Add artwork to the group
        $form_state['values']['og_group_ref']['und'][]['target_id'] = $gid;
        // Add user to the group
        og_group('node', $gid, $values);
    }
}

/**
 * Given a taxonomy term id, return the community nid related to the term
 */
function gid_by_tid($tid) {
    $result = db_select('field_data_field_medium', 'm')
        ->fields('m', array('entity_id'))
        ->condition('field_medium_tid', $tid)
        ->execute()
        ->fetchAssoc();
    return $result['entity_id'];
}

function artist_community_execute_query($index, $filters = array(), $sorts = array()) {
    // Initialize the solr query
    $options = array(
        'search id' => 'artist_community:' . $index,
        'parse mode' => 'terms',
    );
    $query = search_api_query($index, $options);

    // Add filters
    foreach($filters as $filter) {
        $query->filter($filter);
    }

    // Add sorts
    foreach($sorts as $sort) {
        $term = $sort[0];
        $direction = isset($sort[1]) ? $sort[1] : null;
        if ($direction !== null) {
            $query->sort($term, $direction);
        } else {
            $query->sort($term);
        }
    }

    $index = $query->getIndex();
    $results = $query->execute();
    return $index->loadItems(array_keys($results['results']));
}

/**
 * Search an array for a key.  Append it if it doesnt exist.
 * remove it if it does
 */
function array_mashinator(&$array, $needle) {
    if (empty($array) || !in_array($needle, $array)) {
        $array[] = $needle;
    } else {
        // The needle exists in our query so remove it from the array
        $key = array_search($needle, $array);
        unset($array[$key]);
        $array = array_values($array);
    }
}

/**
 * Create links that accomodate our fabulious queries
 * @param $text
 *  The text to be displayed in the link
 * @param $path
 *  the url the link should link to
 * @param $key
 *  The key that the value should be linked to in the query
 * @param $val
 *  The value of the key
 * @param $attributes
 *  an array of attributes as defined by l()
 *
 * @return
 *  returns an html link
 */
function url_query_master($text, $path, $key, $val, $attributes = array()) {
    $query = array();

    if (isset($_GET['og'])) {
        $query['og'] = $_GET['og'];
    }

    if (isset($_GET['content'])) {
        $query['content'] = $_GET['content'];
    }

    if ($key == 'og') {
        if ($node = node_load($val)) {
            if (isset($_GET['og'][$val]) && $_GET['og'][$val] == 1) $attributes['class'][] = 'selected';
            /**
             * If the value is set then unset it so we can toggle
             * between states.  If it isnt set it as true since this
             * is the root menu item.
             */
            if (isset($query['og'][$val])) {
                unset($query['og'][$val]);
            } else {
                $query['og'][$val] = TRUE;
            }

            $output = l($text, $path, array('query' => $query, 'attributes' => $attributes));

            // build sub menu items from the medium taxonomy
            foreach($node->field_medium['und'] as $tid) {
                $attributes = array();

                // Reset the query so that the community values are included
                if (isset($_GET['og'][$val])) {
                    $query['og'][$val] = $_GET['og'][$val];
                } else {
                    $query['og'][$val] = array();
                }

                if (isset($_GET['og'][$val]) && is_array($_GET['og'][$val]) && in_array($tid['tid'], $_GET['og'][$val])) {
                    $attributes['class'] = array('active-trail','selected');
                }

                // if the query is true convert it to an array
                if ($query['og'][$val] == 1) {
                    $query['og'][$val] = array();
                }

                $term = taxonomy_term_load($tid['tid']);

                array_mashinator($query['og'][$val], $tid['tid']);

                // Build a sub menu of taxonomy terms
                $sub_items[] = l($term->name, 'community', array(
                    'query' => $query,
                    'attributes' => $attributes,
                ));
            }

            if (isset($sub_items)) {
                $output .= theme('item_list', array('items' => $sub_items));
            }

        }
    } else if ($key == 'content') {

        if (isset($_GET['content'][$val]) && $_GET['content'][$val] == 1) {
            $attributes['class'] = array('active-trail','selected');
        } else if (isset($_GET['content'][$val]) && is_array($_GET['content'][$val])) {
            $attributes['class'] = array('active-trail','active');
        }

        if (isset($query['content'][$val])) {
            unset($query['content'][$val]);
        } else {
            $query['content'][$val] = TRUE;
        }
        $output = l($text, $path, array('query' => $query, 'attributes' => $attributes));

        if ($val === 'artists') {
            $artist_sub_items = array();
            $artist_sub_items[] = '<span class="community-content-menu-subheading">Experience</span>';
            $experience_vocabulary_tree = taxonomy_get_tree(EXPERIENCE_VID);
            foreach($experience_vocabulary_tree as $term) {
                $attributes = array();

                // Reset the query so that the content sub-categories are included
                if (isset($_GET['content'][$val])) {
                    $query['content'][$val] = $_GET['content'][$val];
                } else {
                    $query['content'][$val] = array();
                }

                if (isset($_GET['content'][$val]) && is_array($_GET['content'][$val]) && in_array($term->tid, $_GET['content'][$val])) {
                    $attributes['class'] = array('active-trail','selected');
                }

                // if the query is true convert it to an array
                if ($query['content'][$val] == 1) {
                    $query['content'][$val] = array();
                }

                array_mashinator($query['content'][$val], $term->tid);

                // Build a sub menu of taxonomy terms
                $artist_sub_items[] = l($term->name, 'community', array(
                    'query' => $query,
                    'attributes' => $attributes,
                ));
            }
            $artist_sub_items[] = '<span class="community-content-menu-subheading">Practice</span>';
            $practice_vocabulary_tree = taxonomy_get_tree(PRACTICE_VID);
            foreach($practice_vocabulary_tree as $term) {
                $attributes = array();

                // Reset the query so that the content sub-categories are included
                if (isset($_GET['content'][$val])) {
                    $query['content'][$val] = $_GET['content'][$val];
                } else {
                    $query['content'][$val] = array();
                }

                if (isset($_GET['content'][$val]) && is_array($_GET['content'][$val]) && in_array($term->tid, $_GET['content'][$val])) {
                    $attributes['class'] = array('active-trail','selected');
                }

                // if the query is true convert it to an array
                if ($query['content'][$val] == 1) {
                    $query['content'][$val] = array();
                }

                array_mashinator($query['content'][$val], $term->tid);

                // Build a sub menu of taxonomy terms
                $artist_sub_items[] = l($term->name, 'community', array(
                    'query' => $query,
                    'attributes' => $attributes,
                ));
            }
            if (isset($artist_sub_items)) {
                $output .= theme('item_list', array('items' => $artist_sub_items));
            }
        } else if ($val === 'artwork') {
            $artwork_sub_items = array();
            $subject_vocabulary_tree = taxonomy_get_tree(SUBJECT_VID);
            foreach($subject_vocabulary_tree as $term) {
                $attributes = array();

                // Reset the query so that the content sub-categories are included
                if (isset($_GET['content'][$val])) {
                    $query['content'][$val] = $_GET['content'][$val];
                } else {
                    $query['content'][$val] = array();
                }

                if (isset($_GET['content'][$val]) && is_array($_GET['content'][$val]) && in_array($term->tid, $_GET['content'][$val])) {
                    $attributes['class'] = array('active-trail','selected');
                }

                // if the query is true convert it to an array
                if ($query['content'][$val] == 1) {
                    $query['content'][$val] = array();
                }

                array_mashinator($query['content'][$val], $term->tid);

                // Build a sub menu of taxonomy terms
                $artwork_sub_items[] = l($term->name, 'community', array(
                    'query' => $query,
                    'attributes' => $attributes,
                ));
            }
            if (isset($artwork_sub_items)) {
                $output .= theme('item_list', array('items' => $artwork_sub_items));
            }
        }
    }

    return $output;
}

//Remove extra media values from the teaser view
function artist_community_entity_view($entity, $type, $view_mode, $langcode) {
    if ($view_mode === 'teaser' && $entity->type === 'artwork') {
        $entity->content['field_media']['#items'] = array_slice($entity->content['field_media']['#items'], 0, 1);
    }
}

// endpoint for getting community results
function artist_community_get_items ($start = null, $rows = null, $sort = null) {

    global $solarium_config;

    // get start and number of row params, if they're there
    $start_row = (isset($_GET['start']) && is_numeric($_GET['start'])) ? intval($_GET['start']) : null;
    $num_rows = (isset($_GET['rows']) && is_numeric($_GET['rows'])) ? intval($_GET['rows']) : null;

    // declare container for all results
    $all_results = array();

    // containers for the query conditions we'll build below
    $nodeQueryBuilder = array();
    $userQueryBuilder = array();

    // instantiate our client and query object
    $client = new Solarium\Client($solarium_config);
    $solarium_query = $client->createSelect();

    // Handle Organic groups and taxonomies
    if (isset($_GET['og'])) {
        foreach($_GET['og'] as $og_id => $terms) {
            $filter->condition(AC_OG_GROUP_REF_FIELD, $og_id);

            // Add taxonomy filters for a specific taxonomy
            if (is_array($terms)) {
                foreach($terms as $term) {
                    $nodeQueryBuilder[] = AC_FIELD_MEDIUM.":$term";
                }
            } else {
                $nodeQueryBuilder[] = AC_OG_GROUP_REF_FIELD.":$og_id";
            }
            $userQueryBuilder[] = AC_USER_NODE_FIELD.":$og_id";
        }
    }

    // Handle content and users
    if (isset($_GET['content'])) {
        foreach($_GET['content'] as $type => $value) {
            switch($type) {
                case 'artwork':
                    $nodeQueryBuilder[] = AC_TYPE_FIELD.":$type";
                    if (isset($_GET['content']['artwork']) &&
                        is_array($_GET['content']['artwork'])) {
                        foreach ($_GET['content']['artwork'] as $tid) {
                            $term = taxonomy_term_load($tid);
                            $filter->condition(AC_SUBJECT_FIELD, $tid);
                            $nodeQueryBuilder[] = AC_SUBJECT_FIELD.":$tid";

                        }
                        break;
                    }
                case 'article':
                case 'event':
                case 'opportunity':
                    $nodeQueryBuilder[] = AC_TYPE_FIELD.":$type";
                    break;
                case 'artists':
                    // kill the content filters??

                    if (isset($_GET['content']['artists']) &&
                        is_array($_GET['content']['artists'])) {
                        foreach ($_GET['content']['artists'] as $tid) {
                            $term = taxonomy_term_load($tid);
                            $term_target = '';
                            if ($term->vid === EXPERIENCE_VID) {
                                $term_target = AC_USER_EXPERIENCE_FIELD;
                            } else if ($term->vid === PRACTICE_VID) {
                                $term_target = AC_USER_PRACTICE_FIELD;
                            }
                            $userQueryBuilder[] = "$term_target:".$tid;
                        }
                    } else {
                        $userQueryBuilder[] = AC_USER_ROLES_FIELD.":".ARTIST_ROLE;
                    }
                    break;
                case 'organizations':
                    $userQueryBuilder[] = AC_USER_ROLES_FIELD.":".ORG_ROLE;
                    break;
            }
        }
    }

    // build the solarium query string
    $nodeQueryBuilderString = (count($nodeQueryBuilder) !== 0) ? ' AND ('.implode(' OR ', $nodeQueryBuilder).')' : '';
    $userQueryBuilderString = (count($userQueryBuilder) !== 0) ? ' AND ('.implode(' OR ', $userQueryBuilder).')' : '';

    // if we want users only, switch to that, otherwise build the full query string
    if (count($nodeQueryBuilder) === 0 && count($userQueryBuilder) > 0) {
        $finalQueryString = "(index_id:users$userQueryBuilderString)";
    } else {
        $finalQueryString = "((index_id:default_node_index AND (ss_type:article OR ss_type:artwork OR ss_type:event))$nodeQueryBuilderString) OR (index_id:users$userQueryBuilderString)";
    }

    $solarium_query->createFilterQuery('the_thing')->setQuery($finalQueryString);
    if ($start_row !== null && is_int($start_row)) {
        $solarium_query->setStart($start_row);
    }
    if ($num_rows !== null && is_int($num_rows)) {
        $solarium_query->setRows($num_rows);
    }
    $solarium_query->addSort(AC_CREATED_FIELD, $solarium_query::SORT_ASC);// @TODO get sort from incoming params?
    $resultset = $client->select($solarium_query);

    // get items of the appropriate types, put them into
    // the all community results array
    foreach($resultset as $item) {
        switch ($item->index_id) {
            case 'users':
                $all_results[] = theme('artist_community_artist_profile', array('user' => user_load($item->is_uid)));
                break;
            case 'default_node_index':
                $all_results[] = render(node_view(node_load($item->is_nid), 'teaser'));
                break;
        }
    }

    // echo "<pre>";
    var_dump($all_results);
    // echo "</pre>";
}