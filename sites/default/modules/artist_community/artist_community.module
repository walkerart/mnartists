<?php

define('NODE_INDEX', 'default_node_index');
define('USER_INDEX', 'users');

/**
 * @file
 * Code for the Artist Community feature.
 */

include_once 'artist_community.features.inc';

/**
 * Implements hook_menu()
 */
function artist_community_menu() {
    $items['community'] = array(
        'title'             => t('Community'),
        'page callback'     => 'artist_community_search_page',
        'access arguments'  => array('access content'),
        'file'              => 'artist_community.pages.inc',
    );

    return $items;
}

/**
 * Implements hook_theme()
 */
function artist_community_theme() {
    return array(
        'artist_community_artist_profile' => array(
            'variables' => array(
                'user' => array(),
            ),
            'file' => 'artist_community.templates.inc',
            'template' => 'templates/artist-profile',
        ),
    );
}

/**
 * Implements hook_block_info()
 */
function artist_community_block_info() {
    $blocks['community'] = array(
        'info' => t('Artist Community - Communities'),
        'cache' => DRUPAL_NO_CACHE,
    );

    $blocks['content'] = array(
        'info' => t('Artist Community - Content'),
        'cache' => DRUPAL_NO_CACHE,
    );

    return $blocks;
}

function artist_community_block_view($delta = '') {
    switch($delta) {
        case 'community':
            $block['subject'] = t('Communities');
            $block['content'] = _community_block_community();
            break;
        case 'content':
            $block['subject'] = t('Content');
            $block['content'] = _community_block_content();
            break;
    }

    return $block;
}

/**
 * @return
 * returns a rendered menu for content
 */
function _community_block_community() {
    $items[] = l('All Communities', 'community');

    // render community menu;
    $results = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->condition('type', 'community')
        ->execute()
        ->fetchAll(); 

    foreach($results as $result) {
        $sub_items = array();

        // build the top level link
        $list = l($result->title, 'community', array(
            'query' => array(
                'community' => $result->nid,
            ),
            'attributes' => array(
                'class' => (isset($_GET['community']) && $result->nid == $_GET['community']) 
                    ? array('active-trail') : array(),
            )
        ));

        if ($node = node_load($result->nid)) {
            // build sub menu items from the medium taxonomy
            foreach($node->field_medium['und'] as $tid) {
                $term = taxonomy_term_load($tid['tid']);
                // TODO: allow multiple terms to be selected
                $sub_items[] = l($term->name, 'community', array(
                    'query' => array(
                        'community' => $result->nid,
                        'tid' => $term->tid,
                    )
                ));
            }   

            if (isset($sub_items)) {
                $list .= theme('item_list', array('items' => $sub_items));
            }   

        }

        $items[] = $list;
    }

    return theme('item_list', array(
        'items' => $items,
        'attributes' => array('class' => 'artist-community-menu'),
    ));
}

/**
 * @return
 * returns a rendered menu for content types
 */
function _community_block_content() {
    // render content menu;
    $menu_items = array(
        'all'           => t('All Content'),
        'article'       => t('Articles'),
        'artists'       => t('Artists'),
        'artwork'       => t('Artworks'),
        'event'         => t('Events'),
        'opportunity'   => t('Opportunities'),
        'organizations' => t('Organizations'),
    );

    foreach($menu_items as $key => $title) {
        if (isset($_GET['community'])) {
            $query['community'] = $_GET['community'];
        }
        $query['content'] = $key;
        $items[] = l($title, 'community', array('query' => $query));
    }

    return theme('item_list', array(
        'items' => $items,
        'attributes' => array('class' => 'community-content-menu'),
    ));
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function artist_community_form_user_profile_form_alter(&$form, &$form_state) {
    // Hide featured artists from non admins
    if (!user_access('administer users')) {
        unset($form['field_featured_artist']);
    }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function artist_community_form_artwork_node_form_alter(&$form, &$form_state) {
    // Find the communities associated with each term
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_medium', 'm', 'n.nid = m.entity_id'); 
    $result = $query->fields('n', array('nid', 'title'))
        ->fields('m')
        ->condition('type', 'community')
        ->orderBy('title')
        ->execute();

    // Build a nested array to provide grouped select options
    while ($row = $result->fetchAssoc()) {
       $rows[$row['title']][$row['field_medium_tid']] = $form['field_medium']['und']['#options'][$row['field_medium_tid']];
    }

    $form['field_medium']['und']['#options'] = $rows;
    unset($form['og_group_ref']);

    $form['#submit'][] = 'artist_community_artwork_form_submit';
}

function artist_community_artwork_form_submit(&$form, &$form_state) {
    global $user;
    $user = user_load($user->uid);
    $values = array('entity' => $user);

    foreach($form_state['values']['field_medium']['und'] as $field) {
        $gid = gid_by_tid($field['tid']);
        // Add artwork to the group
        $form_state['values']['og_group_ref']['und'][]['target_id'] = $gid; 
        // Add user to the group
        og_group('node', $gid, $values);
    }
}

/**
 * Given a taxonomy term id, return the community nid related to the term
 */
function gid_by_tid($tid) {
    $result = db_select('field_data_field_medium', 'm')
        ->fields('m', array('entity_id'))
        ->condition('field_medium_tid', $tid)
        ->execute()
        ->fetchAssoc();
    return $result['entity_id'];
}

function artist_community_execute_query($index, $conditions = array()) {
        // Initialize the solr query
    $options = array(
        'search id' => 'artist_community:' . $index,
        'parse mode' => 'terms',
    );  
    $query = search_api_query($index, $options);
    $index = $query->getIndex();

    foreach($conditions as $key => $val) {
        $query->condition($key, $val);
    }

    $results = $query->execute();

    return $index->loadItems(array_keys($results['results']));
}
