<?php

/**
 * @file
 * The MN Artists Flag Lists Privacy module.
 *
 * Extends flag lists to add a private/public setting to them.
 */

// I guess we'll have to alter the form to get the public/private
// switch into it?
function mnartist_flag_lists_privacy_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'flag_lists_form') {
        // @TODO better way to get fid?
        $fid = arg(3);

        // get the privacy state for the current fid, db_select
        $query = db_select('mnartist_flag_lists_privacy', 'p');
        $result = $query->fields('p', array('pid', 'fid', 'private'))
            ->condition('fid', $fid)
            ->execute()->fetchAll();
        $collection_is_private = ((count($result) > 0) && intval($result[0]->private) === 1);

        // add a privacy field to the form for the front-end, set state
        // based on above result
        $form['collection_privacy'] = array(
            '#type'     => 'checkbox',
            '#title'    => t('Keep this collection private'),
            '#default_value' => $collection_is_private,
            '#weight'   => 0,
        );
        $form['#submit'][] = 'mnartist_flag_lists_privacy_form_submit';
    }
}

function mnartist_flag_lists_privacy_form_submit(&$form, &$form_state) {
    // @TODO check for completion? try/catch?
    if (!empty($form_state['values']['edit'])) {
        // Editing the title.
        $flag = flag_lists_get_flag($form_state['values']['name']);
        $fid = $flag->fid;
        $query = db_merge('mnartist_flag_lists_privacy')
                    ->key(array('fid' => $fid))
                    ->fields(array('private' => $form_state['values']['collection_privacy']))
                    ->execute();
    }
}

// alter query for views_flag_lists_user_lists view so that
// if we're asking for somebody else's lists they take the
// lists privacy settings into account
function mnartist_flag_lists_privacy_query_alter(QueryAlterableInterface $query) {
    global $user;
    if ($user->uid !== arg(1) &&
        isset($query->alterMetaData) &&
        isset($query->alterMetaData['view']) &&
        $query->alterMetaData['view']->name == "flag_lists_user_lists") {

        $query->leftJoin('mnartist_flag_lists_privacy', 'p', 'flag_lists_flags.fid = p.fid');
        $query->where("private = 0 OR private IS NULL");
    }
}

function mnartist_flag_lists_privacy_views_pre_view(&$view) {
    global $user;
    $view_name = $view->name;
    if ($view_name === 'flag_lists_user_list') {
        $is_singular_view = ((arg(0) === 'user' && is_numeric(arg(4))) || (arg(0) === 'flags' && is_numeric(arg(2))));
        if ($is_singular_view) {
            if ($user->uid !== arg(1)) {
                $list_id = $view->args[0];
                if (_mnartist_flag_lists_privacy_is_collection_private($list_id)) {
                    drupal_access_denied();
                    drupal_exit();
                }
            }
        }
    }
}

function _mnartist_flag_lists_privacy_is_collection_private($fid) {
    // get the privacy state for the current fid, db_select
    $query = db_select('mnartist_flag_lists_privacy', 'p');
    $result = $query->fields('p', array('pid', 'fid', 'private'))
        ->condition('fid', $fid)
        ->execute()->fetchAll();
    return ((count($result) > 0) && intval($result[0]->private) === 1);
}

// reimplementation of flag_lists_get_user_flags in flag_lists module,
// which takes list privacy into account
// @TODO have a look at how much overlap there is between this and
// the get_user_flags in the collections module
function mnartist_flag_lists_privacy_flag_lists_get_user_flags($content_type = NULL, $account = NULL, $use_flags = FALSE) {

    global $user;
    $flags = $lists = array();
    $query = db_select('flag_lists_flags', 'fl')
        ->fields('fl')
        ->condition('fl.uid', $account->uid);
    $query->leftJoin('flags', 'f', 'fl.pfid = f.fid');
    $query->leftJoin('flag_lists_types', 'ft', 'ft.name = f.name');
    if ($account->uid !== $user->uid) {
        $query->leftJoin('mnartist_flag_lists_privacy', 'p', 'fl.fid = p.fid');
    }
    $query->addField('ft', 'type');
    if ($content_type) {
      $query->condition('ft.type', $content_type);
    }
    if ($account->uid !== $user->uid) {
        $query->where("private = 0 OR private IS NULL");
    }

    $result = $query->execute();
    foreach ($result as $row) {
        if (!isset($lists[$row->name])) {
            $lists[$row->name] = flag_flag::factory_by_row($row);
            $lists[$row->name]->module = 'flag_lists';
        }
        else {
            $lists[$row->name]->types[] = $row->type;
        }
    }
    // Get regular flags.
    if ($use_flags) {
        $flags = flag_get_flags('node', $content_type, $account);

        // Strip out any list templates
        foreach ($flags as $key => $flag) {
            if (stristr($flag->name, 'fl_template') !== FALSE) {
                unset($flags[$key]);
            }
        }
    }

    $flags = array_merge($lists, $flags);
    return $flags;

}
